
optiboot_attiny441.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000262  00000d80  00000d80  00000074  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .trampolines  00000000  00000fe2  00000fe2  000002d6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .version      00000002  00000ffe  00000ffe  000002d6  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .comment      00000030  00000000  00000000  000002d8  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000308  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000069b  00000000  00000000  00000338  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002c7  00000000  00000000  000009d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003e7  00000000  00000000  00000c9a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000ac  00000000  00000000  00001084  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000217  00000000  00000000  00001130  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000036a  00000000  00000000  00001347  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000088  00000000  00000000  000016b1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000d80 <pre_main>:
/* everything that needs to run VERY early */
void pre_main(void) {
  // Allow convenient way of calling do_spm function - jump table, so
  //   entry to this function will always be here, independent of
  //   compilation, features etc
  asm volatile (
 d80:	01 c0       	rjmp	.+2      	; 0xd84 <main>
 d82:	26 c1       	rjmp	.+588    	; 0xfd0 <do_spm>

00000d84 <main>:
  //  SP points to RAMEND
  //  r1 contains zero
  //
  // If not, uncomment the following instructions:
  // cli();
  asm volatile ("  clr __zero_reg__");
 d84:	11 24       	eor	r1, r1
#  warning "START_APP_ON_EXTR is defined and NO_START_APP_ON_POR isn't"
#  define APP_START_REASONS 1 /* Always start rge App. */
#  define WDRF_CLR_REASONS 0  /* Never clear WDRF */
#endif

  ch = MCUSR;
 d86:	84 b7       	in	r24, 0x34	; 52

  // Skip all logic and run bootloader if MCUSR is cleared (application request)
  if (ch != 0) {
 d88:	88 23       	and	r24, r24
 d8a:	71 f0       	breq	.+28     	; 0xda8 <main+0x24>
     * One problematic scenario: broken application code sets watchdog timer
     * without clearing MCUSR before and triggers it quickly. But it's
     * recoverable by power-on with pushed reset button.
     */

    if (APP_START_REASONS) {
 d8c:	98 2f       	mov	r25, r24
 d8e:	9a 70       	andi	r25, 0x0A	; 10
 d90:	92 30       	cpi	r25, 0x02	; 2
 d92:	51 f0       	breq	.+20     	; 0xda8 <main+0x24>
      if (WDRF_CLR_REASONS) {
 d94:	81 ff       	sbrs	r24, 1
 d96:	02 c0       	rjmp	.+4      	; 0xd9c <main+0x18>
        /*
         * Clear WDRF if it was most probably set by wdr in bootloader.
         */
        if ((uint16_t)&MCUSR > 0x1F) {
          MCUSR = ~(_BV(WDRF));   // optimize to LDI/OUT
 d98:	97 ef       	ldi	r25, 0xF7	; 247
 d9a:	94 bf       	out	0x34, r25	; 52
      /*
       * save the reset flags in the designated register
       * This can be saved in a main program by putting code in .init0 (which
       * executes before normal c init code) to save R2 to a global variable.
       */
      __asm__ __volatile__ ("  mov r2, %0\n" :: "r" (ch));
 d9c:	28 2e       	mov	r2, r24

      // switch off watchdog
      watchdogConfig(WATCHDOG_OFF);
 d9e:	80 e0       	ldi	r24, 0x00	; 0
 da0:	03 d1       	rcall	.+518    	; 0xfa8 <watchdogConfig>
      // Note that appstart_vec is defined so that this works with either
      // real or virtual boot partitions.
      __asm__ __volatile__ (
 da2:	ee e0       	ldi	r30, 0x0E	; 14
 da4:	ff 27       	eor	r31, r31
 da6:	09 94       	ijmp
#elif defined(__AVR_ATtiny25__)||defined(__AVR_ATtiny45__)||defined(__AVR_ATtiny85__)
  TCCR1 = 0x0E; //div 8196 - it's an 8-bit timer.
#elif defined(__AVR_ATtiny43__)
#error "LED flash for Tiny43 not yet supported"
#else
  TCCR1B = _BV(CS12) | _BV(CS10); // div 1024
 da8:	85 e0       	ldi	r24, 0x05	; 5
 daa:	8e bd       	out	0x2e, r24	; 46
  LINBTR = (1 << LDISR) | (8 << LBT0); 
  LINCR = _BV(LENA) | _BV(LCMD2) | _BV(LCMD1) | _BV(LCMD0);
  LINDAT=0;
#else
#if (SINGLESPEED == 0)
  UART_SRA = _BV(U2X0); //Double speed mode USART0
 dac:	82 e0       	ldi	r24, 0x02	; 2
 dae:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <__RAM__+0x96>
#endif
  UART_SRB = _BV(RXEN0) | _BV(TXEN0);
 db2:	88 e1       	ldi	r24, 0x18	; 24
 db4:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <__RAM__+0x95>
  UART_SRC = _BV(UCSZ00) | _BV(UCSZ01);
 db8:	86 e0       	ldi	r24, 0x06	; 6
 dba:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <__RAM__+0x94>
  UART_SRL = (uint8_t)BAUD_SETTING;
 dbe:	80 e1       	ldi	r24, 0x10	; 16
 dc0:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__RAM__+0x91>
  RS485_PORT &= ~_BV(RS485_BIT);
  #endif
#endif

  // Set up watchdog to trigger after desired timeout
  watchdogConfig(WDTPERIOD);
 dc4:	8e e0       	ldi	r24, 0x0E	; 14
 dc6:	f0 d0       	rcall	.+480    	; 0xfa8 <watchdogConfig>

#if (LED_START_FLASHES > 0) || LED_DATA_FLASH || LED_START_ON
  /* Set LED pin as output */
  LED_DDR |= _BV(LED);
 dc8:	ba 9a       	sbi	0x17, 2	; 23
 dca:	86 e0       	ldi	r24, 0x06	; 6
    TIFR = _BV(TOV1);
    while (!(TIFR & _BV(TOV1)));
#elif defined(__AVR_ATtiny43__)
#error "LED flash for Tiny43 not yet supported"
#else
    TCNT1 = -(F_CPU/(1024*16));
 dcc:	20 e3       	ldi	r18, 0x30	; 48
 dce:	3c ef       	ldi	r19, 0xFC	; 252
    TIFR1 = _BV(TOV1);
 dd0:	91 e0       	ldi	r25, 0x01	; 1
    TIFR = _BV(TOV1);
    while (!(TIFR & _BV(TOV1)));
#elif defined(__AVR_ATtiny43__)
#error "LED flash for Tiny43 not yet supported"
#else
    TCNT1 = -(F_CPU/(1024*16));
 dd2:	3d bd       	out	0x2d, r19	; 45
 dd4:	2c bd       	out	0x2c, r18	; 44
    TIFR1 = _BV(TOV1);
 dd6:	9e b9       	out	0x0e, r25	; 14
    while (!(TIFR1 & _BV(TOV1)));
 dd8:	70 9b       	sbis	0x0e, 0	; 14
 dda:	fe cf       	rjmp	.-4      	; 0xdd8 <main+0x54>
  defined(__AVR_ATmega64__)   || defined(__AVR_ATmega128__)
  LED_PORT ^= _BV(LED);
#else
  // Newer AVRs can toggle by writing PINx.
  if (&LED_PIN <= &_SFR_IO8(0x31)) {  // "if" code optimizes away.
    LED_PIN |= _BV(LED); // becomes SBI on low ports (in theory: incorrectly)
 ddc:	b2 9a       	sbi	0x16, 2	; 22
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
 dde:	a8 95       	wdr
     *  by the UART hardware, avrdude sends several attempts in rather
     *  quick succession, some of which will be lost and cause us to
     *  get out of sync.  So if we see any data; stop blinking.
     */
#ifndef LIN_UART
    if (UART_SRA & _BV(RXC0))
 de0:	40 91 96 00 	lds	r20, 0x0096	; 0x800096 <__RAM__+0x96>
 de4:	47 fd       	sbrc	r20, 7
 de6:	02 c0       	rjmp	.+4      	; 0xdec <main+0x68>
 de8:	81 50       	subi	r24, 0x01	; 1
#else
// This doesn't seem to work?
//    if ((UART_PIN & (1<<UART_RX_BIT)) == 0)
//      break;  // detect start bit on soft uart too.
#endif
  } while (--count);
 dea:	99 f7       	brne	.-26     	; 0xdd2 <main+0x4e>

      /*
       * Copy data from the buffer into the flash write buffer.
       */
      do {
        __boot_page_fill_short((uint16_t)(void*)addrPtr, *(mybuff.wptr++));
 dec:	bb 24       	eor	r11, r11
 dee:	b3 94       	inc	r11
      } while (len -= 2);

      /*
       * Actually Write the buffer to flash (and wait for it to finish.)
       */
      __boot_page_write_short(address.word);
 df0:	95 e0       	ldi	r25, 0x05	; 5
 df2:	a9 2e       	mov	r10, r25
       * and we needed the space back.
       */
#ifdef FOURPAGEERASE
      if ((address.bytes[0] & ((SPM_PAGESIZE<<2)-1))==0) {
#endif
        __boot_page_erase_short(address.word);
 df4:	23 e0       	ldi	r18, 0x03	; 3
 df6:	72 2e       	mov	r7, r18
        // Move RESET vector to 'save' vector
        // Save jmp targets (for "Verify")
        rstVect0_sav = buff.bptr[rstVect0];
        rstVect1_sav = buff.bptr[rstVect1];
        addr16_t vect;
        vect.word = ((uint16_t)pre_main-1);
 df8:	3f eb       	ldi	r19, 0xBF	; 191
 dfa:	c3 2e       	mov	r12, r19
 dfc:	36 e0       	ldi	r19, 0x06	; 6
 dfe:	d3 2e       	mov	r13, r19
        // an RJMP instruction is 0b1100xxxx xxxxxxxx, so we should be able to
        // do math on the offsets without masking it off first.
        // Note that rjmp is relative to the already incremented PC, so the
        //  offset is one less than you might expect.
        buff.bptr[0] = vect.bytes[0]; // rjmp to start of bootloader
        buff.bptr[1] = vect.bytes[1] | 0xC0;  // make an "rjmp"
 e00:	8d 2d       	mov	r24, r13
 e02:	80 6c       	ori	r24, 0xC0	; 192
 e04:	68 2e       	mov	r6, r24
#endif

  /* Forever loop: exits by causing WDT reset */
  for (;;) {
    /* get character from UART */
    ch = getch();
 e06:	c4 d0       	rcall	.+392    	; 0xf90 <getch>

    if (ch == STK_GET_PARAMETER) {
 e08:	81 34       	cpi	r24, 0x41	; 65
 e0a:	59 f4       	brne	.+22     	; 0xe22 <main+0x9e>
      unsigned char which = getch();
 e0c:	c1 d0       	rcall	.+386    	; 0xf90 <getch>
 e0e:	18 2f       	mov	r17, r24
      verifySpace();
 e10:	d0 d0       	rcall	.+416    	; 0xfb2 <verifySpace>
      /*
       * Send optiboot version as "SW version"
       * Note that the references to memory are optimized away.
       */
      if (which == STK_SW_MINOR) {
        putch(optiboot_version & 0xFF);
 e12:	83 e0       	ldi	r24, 0x03	; 3
      } else if (which == STK_SW_MAJOR) {
 e14:	11 38       	cpi	r17, 0x81	; 129
 e16:	09 f4       	brne	.+2      	; 0xe1a <main+0x96>
        putch(optiboot_version >> 8);
 e18:	88 e0       	ldi	r24, 0x08	; 8
 e1a:	b3 d0       	rcall	.+358    	; 0xf82 <putch>
    }
    else {
      // This covers the response to commands like STK_ENTER_PROGMODE
      verifySpace();
    }
    putch(STK_OK);
 e1c:	80 e1       	ldi	r24, 0x10	; 16
 e1e:	b1 d0       	rcall	.+354    	; 0xf82 <putch>
#endif

  /* Forever loop: exits by causing WDT reset */
  for (;;) {
    /* get character from UART */
    ch = getch();
 e20:	f2 cf       	rjmp	.-28     	; 0xe06 <main+0x82>
         * other parameters - enough to keep Avrdude happy
         */
        putch(0x03);
      }
    }
    else if (ch == STK_SET_DEVICE) {
 e22:	82 34       	cpi	r24, 0x42	; 66
 e24:	19 f4       	brne	.+6      	; 0xe2c <main+0xa8>
      // SET DEVICE is ignored
      getNch(20);
 e26:	84 e1       	ldi	r24, 0x14	; 20
    }
    else if (ch == STK_SET_DEVICE_EXT) {
      // SET DEVICE EXT is ignored
      getNch(5);
 e28:	cc d0       	rcall	.+408    	; 0xfc2 <getNch>
 e2a:	f8 cf       	rjmp	.-16     	; 0xe1c <main+0x98>
    }
    else if (ch == STK_SET_DEVICE) {
      // SET DEVICE is ignored
      getNch(20);
    }
    else if (ch == STK_SET_DEVICE_EXT) {
 e2c:	85 34       	cpi	r24, 0x45	; 69
 e2e:	11 f4       	brne	.+4      	; 0xe34 <main+0xb0>
      // SET DEVICE EXT is ignored
      getNch(5);
 e30:	85 e0       	ldi	r24, 0x05	; 5
 e32:	fa cf       	rjmp	.-12     	; 0xe28 <main+0xa4>
    }
    else if (ch == STK_LOAD_ADDRESS) {
 e34:	85 35       	cpi	r24, 0x55	; 85
 e36:	41 f4       	brne	.+16     	; 0xe48 <main+0xc4>
      // LOAD ADDRESS
      address.bytes[0] = getch();
 e38:	ab d0       	rcall	.+342    	; 0xf90 <getch>
 e3a:	c8 2f       	mov	r28, r24
      address.bytes[1] = getch();
 e3c:	a9 d0       	rcall	.+338    	; 0xf90 <getch>
 e3e:	d8 2f       	mov	r29, r24
      }
      else {
        RAMPZ &= 0xFE;
      }
#endif
      address.word *= 2; // Convert from word address to byte address
 e40:	cc 0f       	add	r28, r28
 e42:	dd 1f       	adc	r29, r29
      watchdogConfig(WATCHDOG_16MS);
      verifySpace();
    }
    else {
      // This covers the response to commands like STK_ENTER_PROGMODE
      verifySpace();
 e44:	b6 d0       	rcall	.+364    	; 0xfb2 <verifySpace>
 e46:	ea cf       	rjmp	.-44     	; 0xe1c <main+0x98>
      }
#endif
      address.word *= 2; // Convert from word address to byte address
      verifySpace();
    }
    else if (ch == STK_UNIVERSAL) {
 e48:	86 35       	cpi	r24, 0x56	; 86
 e4a:	21 f4       	brne	.+8      	; 0xe54 <main+0xd0>
        getNch(3);
        putch(0x00);
      }
#else
      // UNIVERSAL command is ignored
      getNch(4);
 e4c:	84 e0       	ldi	r24, 0x04	; 4
 e4e:	b9 d0       	rcall	.+370    	; 0xfc2 <getNch>
      putch(0x00);
 e50:	80 e0       	ldi	r24, 0x00	; 0
 e52:	e3 cf       	rjmp	.-58     	; 0xe1a <main+0x96>
#endif
    }
    /* Write memory, length is big endian and is in bytes */
    else if (ch == STK_PROG_PAGE) {
 e54:	84 36       	cpi	r24, 0x64	; 100
 e56:	09 f0       	breq	.+2      	; 0xe5a <main+0xd6>
 e58:	5c c0       	rjmp	.+184    	; 0xf12 <main+0x18e>
      // PROGRAM PAGE - we support flash programming only, not EEPROM
      uint8_t desttype;
      uint8_t *bufPtr;
      pagelen_t savelength;

      GETLENGTH(length);
 e5a:	9a d0       	rcall	.+308    	; 0xf90 <getch>
 e5c:	99 d0       	rcall	.+306    	; 0xf90 <getch>
 e5e:	58 2e       	mov	r5, r24
      savelength = length;
      desttype = getch();
 e60:	97 d0       	rcall	.+302    	; 0xf90 <getch>
 e62:	48 2e       	mov	r4, r24

      // read a page worth of contents
      bufPtr = buff.bptr;
 e64:	00 e0       	ldi	r16, 0x00	; 0
 e66:	11 e0       	ldi	r17, 0x01	; 1
      do *bufPtr++ = getch();
 e68:	48 01       	movw	r8, r16
 e6a:	ef ef       	ldi	r30, 0xFF	; 255
 e6c:	8e 1a       	sub	r8, r30
 e6e:	9e 0a       	sbc	r9, r30
 e70:	8f d0       	rcall	.+286    	; 0xf90 <getch>
 e72:	f8 01       	movw	r30, r16
 e74:	80 83       	st	Z, r24
 e76:	84 01       	movw	r16, r8
      while (--length);
 e78:	58 10       	cpse	r5, r8
 e7a:	f6 cf       	rjmp	.-20     	; 0xe68 <main+0xe4>

      // Read command terminator, start reply
      verifySpace();
 e7c:	9a d0       	rcall	.+308    	; 0xfb2 <verifySpace>
    {
#endif
/*
 * AVR with 2-byte ISR Vectors and rjmp
 */
      if (address.word == rstVect0) {
 e7e:	20 97       	sbiw	r28, 0x00	; 0
 e80:	81 f4       	brne	.+32     	; 0xea2 <main+0x11e>
        // This is the reset vector page. We need to live-patch
        // the code so the bootloader runs first.
        //
        // Move RESET vector to 'save' vector
        // Save jmp targets (for "Verify")
        rstVect0_sav = buff.bptr[rstVect0];
 e82:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__RAM__+0x100>
 e86:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <__RAM__+0x124>
        rstVect1_sav = buff.bptr[rstVect1];
 e8a:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <__RAM__+0x101>
 e8e:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <__RAM__+0x125>
        // Instruction is a relative jump (rjmp), so recalculate.
        // an RJMP instruction is 0b1100xxxx xxxxxxxx, so we should be able to
        // do math on the offsets without masking it off first.
        // Note that rjmp is relative to the already incremented PC, so the
        //  offset is one less than you might expect.
        buff.bptr[0] = vect.bytes[0]; // rjmp to start of bootloader
 e92:	c0 92 00 01 	sts	0x0100, r12	; 0x800100 <__RAM__+0x100>
        buff.bptr[1] = vect.bytes[1] | 0xC0;  // make an "rjmp"
 e96:	60 92 01 01 	sts	0x0101, r6	; 0x800101 <__RAM__+0x101>
 * void writebuffer(memtype, buffer, address, length)
 */
static inline void writebuffer(int8_t memtype, addr16_t mybuff,
                               addr16_t address, pagelen_t len)
{
  switch (memtype) {
 e9a:	f5 e4       	ldi	r31, 0x45	; 69
 e9c:	4f 12       	cpse	r4, r31
 e9e:	1a c0       	rjmp	.+52     	; 0xed4 <main+0x150>
 ea0:	ff cf       	rjmp	.-2      	; 0xea0 <main+0x11c>
        // Note that rjmp is relative to the already incremented PC, so the
        //  offset is one less than you might expect.
        buff.bptr[0] = vect.bytes[0]; // rjmp to start of bootloader
        buff.bptr[1] = vect.bytes[1] | 0xC0;  // make an "rjmp"
#if (SAVVEC_ADDRESS != RSTVEC_ADDRESS)
      } else if (address.word == SAVVEC_ADDRESS) {
 ea2:	c0 31       	cpi	r28, 0x10	; 16
 ea4:	d1 05       	cpc	r29, r1
 ea6:	c9 f7       	brne	.-14     	; 0xe9a <main+0x116>
        addr16_t vect;
        vect.bytes[0] = rstVect0_sav;
 ea8:	e0 90 24 01 	lds	r14, 0x0124	; 0x800124 <__RAM__+0x124>
        vect.bytes[1] = rstVect1_sav;
 eac:	f0 90 25 01 	lds	r15, 0x0125	; 0x800125 <__RAM__+0x125>
        // Save old values for Verify
        saveVect0_sav = buff.bptr[saveVect0 - SAVVEC_ADDRESS];
 eb0:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__RAM__+0x10c>
 eb4:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <__RAM__+0x126>
        saveVect1_sav = buff.bptr[saveVect1 - SAVVEC_ADDRESS];
 eb8:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <__RAM__+0x10d>
 ebc:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <__RAM__+0x127>

        vect.word = (vect.word-save_vect_num); //substract 'save' interrupt position
 ec0:	c7 01       	movw	r24, r14
 ec2:	0e 97       	sbiw	r24, 0x0e	; 14
        // Move RESET jmp target to 'save' vector
        buff.bptr[saveVect0 - SAVVEC_ADDRESS] = vect.bytes[0];
 ec4:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__RAM__+0x10c>
        buff.bptr[saveVect1 - SAVVEC_ADDRESS] = (vect.bytes[1] & 0x0F)| 0xC0;  // make an "rjmp"
 ec8:	89 2f       	mov	r24, r25
 eca:	8f 70       	andi	r24, 0x0F	; 15
 ecc:	80 6c       	ori	r24, 0xC0	; 192
 ece:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <__RAM__+0x10d>
 ed2:	e3 cf       	rjmp	.-58     	; 0xe9a <main+0x116>
       * used to be code to do this while receiving the data over
       * the serial link, but the performance improvement was slight,
       * and we needed the space back.
       */
#ifdef FOURPAGEERASE
      if ((address.bytes[0] & ((SPM_PAGESIZE<<2)-1))==0) {
 ed4:	8c 2f       	mov	r24, r28
 ed6:	8f 73       	andi	r24, 0x3F	; 63
#endif
        __boot_page_erase_short(address.word);
 ed8:	fe 01       	movw	r30, r28
       * used to be code to do this while receiving the data over
       * the serial link, but the performance improvement was slight,
       * and we needed the space back.
       */
#ifdef FOURPAGEERASE
      if ((address.bytes[0] & ((SPM_PAGESIZE<<2)-1))==0) {
 eda:	31 f4       	brne	.+12     	; 0xee8 <main+0x164>
#endif
        __boot_page_erase_short(address.word);
 edc:	77 be       	out	0x37, r7	; 55
 ede:	e8 95       	spm
        boot_spm_busy_wait();
 ee0:	07 b6       	in	r0, 0x37	; 55
 ee2:	00 fc       	sbrc	r0, 0
 ee4:	fd cf       	rjmp	.-6      	; 0xee0 <main+0x15c>
 ee6:	fe 01       	movw	r30, r28
       * used to be code to do this while receiving the data over
       * the serial link, but the performance improvement was slight,
       * and we needed the space back.
       */
#ifdef FOURPAGEERASE
      if ((address.bytes[0] & ((SPM_PAGESIZE<<2)-1))==0) {
 ee8:	a0 e0       	ldi	r26, 0x00	; 0
 eea:	b1 e0       	ldi	r27, 0x01	; 1

      /*
       * Copy data from the buffer into the flash write buffer.
       */
      do {
        __boot_page_fill_short((uint16_t)(void*)addrPtr, *(mybuff.wptr++));
 eec:	cd 01       	movw	r24, r26
 eee:	02 96       	adiw	r24, 0x02	; 2
 ef0:	2d 91       	ld	r18, X+
 ef2:	3c 91       	ld	r19, X
 ef4:	09 01       	movw	r0, r18
 ef6:	b7 be       	out	0x37, r11	; 55
 ef8:	e8 95       	spm
 efa:	11 24       	eor	r1, r1
        addrPtr += 2;
 efc:	32 96       	adiw	r30, 0x02	; 2

      /*
       * Copy data from the buffer into the flash write buffer.
       */
      do {
        __boot_page_fill_short((uint16_t)(void*)addrPtr, *(mybuff.wptr++));
 efe:	dc 01       	movw	r26, r24
        addrPtr += 2;
      } while (len -= 2);
 f00:	58 12       	cpse	r5, r24
 f02:	f4 cf       	rjmp	.-24     	; 0xeec <main+0x168>

      /*
       * Actually Write the buffer to flash (and wait for it to finish.)
       */
      __boot_page_write_short(address.word);
 f04:	fe 01       	movw	r30, r28
 f06:	a7 be       	out	0x37, r10	; 55
 f08:	e8 95       	spm
      boot_spm_busy_wait();
 f0a:	07 b6       	in	r0, 0x37	; 55
 f0c:	00 fc       	sbrc	r0, 0
 f0e:	fd cf       	rjmp	.-6      	; 0xf0a <main+0x186>
 f10:	85 cf       	rjmp	.-246    	; 0xe1c <main+0x98>
      writebuffer(desttype, buff, address, savelength);


    }
/* Read memory block mode, length is big endian.  */
    else if (ch == STK_READ_PAGE) {
 f12:	84 37       	cpi	r24, 0x74	; 116
 f14:	39 f5       	brne	.+78     	; 0xf64 <main+0x1e0>
      uint8_t desttype;
      GETLENGTH(length);
 f16:	3c d0       	rcall	.+120    	; 0xf90 <getch>
 f18:	3b d0       	rcall	.+118    	; 0xf90 <getch>
 f1a:	98 2e       	mov	r9, r24

      desttype = getch();
 f1c:	39 d0       	rcall	.+114    	; 0xf90 <getch>

      verifySpace();
 f1e:	49 d0       	rcall	.+146    	; 0xfb2 <verifySpace>
 f20:	8e 01       	movw	r16, r28
#endif
  default:
    do {
#ifdef VIRTUAL_BOOT_PARTITION
      // Undo vector patch in bottom page so verify passes
      if (address.word == rstVect0) ch = rstVect0_sav;
 f22:	01 15       	cp	r16, r1
 f24:	11 05       	cpc	r17, r1
 f26:	49 f4       	brne	.+18     	; 0xf3a <main+0x1b6>
 f28:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <__RAM__+0x124>
      __asm__ ("  elpm %0,Z+\n" : "=r" (ch), "=z" (address.bptr): "1" (address));
#else
      // read a Flash byte and increment the address
      __asm__ ("  lpm %0,Z+\n" : "=r" (ch), "=z" (address.bptr): "1" (address));
#endif
      putch(ch);
 f2c:	2a d0       	rcall	.+84     	; 0xf82 <putch>
    } while (--length);
 f2e:	9a 94       	dec	r9
 f30:	0f 5f       	subi	r16, 0xFF	; 255
 f32:	1f 4f       	sbci	r17, 0xFF	; 255
 f34:	91 10       	cpse	r9, r1
 f36:	f5 cf       	rjmp	.-22     	; 0xf22 <main+0x19e>
 f38:	71 cf       	rjmp	.-286    	; 0xe1c <main+0x98>
  default:
    do {
#ifdef VIRTUAL_BOOT_PARTITION
      // Undo vector patch in bottom page so verify passes
      if (address.word == rstVect0) ch = rstVect0_sav;
      else if (address.word == rstVect1) ch = rstVect1_sav;
 f3a:	01 30       	cpi	r16, 0x01	; 1
 f3c:	11 05       	cpc	r17, r1
 f3e:	19 f4       	brne	.+6      	; 0xf46 <main+0x1c2>
 f40:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <__RAM__+0x125>
 f44:	f3 cf       	rjmp	.-26     	; 0xf2c <main+0x1a8>
      else if (address.word == saveVect0) ch = saveVect0_sav;
 f46:	0c 31       	cpi	r16, 0x1C	; 28
 f48:	11 05       	cpc	r17, r1
 f4a:	19 f4       	brne	.+6      	; 0xf52 <main+0x1ce>
 f4c:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <__RAM__+0x126>
 f50:	ed cf       	rjmp	.-38     	; 0xf2c <main+0x1a8>
      else if (address.word == saveVect1) ch = saveVect1_sav;
 f52:	0d 31       	cpi	r16, 0x1D	; 29
 f54:	11 05       	cpc	r17, r1
 f56:	19 f4       	brne	.+6      	; 0xf5e <main+0x1da>
 f58:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <__RAM__+0x127>
 f5c:	e7 cf       	rjmp	.-50     	; 0xf2c <main+0x1a8>
      else ch = pgm_read_byte_near(address.bptr);
 f5e:	f8 01       	movw	r30, r16
 f60:	84 91       	lpm	r24, Z
 f62:	e4 cf       	rjmp	.-56     	; 0xf2c <main+0x1a8>

      read_mem(desttype, address, length);
    }

/* Get device signature bytes  */
    else if (ch == STK_READ_SIGN) {
 f64:	85 37       	cpi	r24, 0x75	; 117
 f66:	39 f4       	brne	.+14     	; 0xf76 <main+0x1f2>
      // READ SIGN - return what Avrdude wants to hear
      verifySpace();
 f68:	24 d0       	rcall	.+72     	; 0xfb2 <verifySpace>
      putch(SIGNATURE_0);
 f6a:	8e e1       	ldi	r24, 0x1E	; 30
 f6c:	0a d0       	rcall	.+20     	; 0xf82 <putch>
      putch(SIGNATURE_1);
 f6e:	82 e9       	ldi	r24, 0x92	; 146
 f70:	08 d0       	rcall	.+16     	; 0xf82 <putch>
      putch(SIGNATURE_2);
 f72:	85 e1       	ldi	r24, 0x15	; 21
 f74:	52 cf       	rjmp	.-348    	; 0xe1a <main+0x96>
    }
    else if (ch == STK_LEAVE_PROGMODE) { /* 'Q' */
 f76:	81 35       	cpi	r24, 0x51	; 81
 f78:	09 f0       	breq	.+2      	; 0xf7c <main+0x1f8>
 f7a:	64 cf       	rjmp	.-312    	; 0xe44 <main+0xc0>
      // Adaboot no-wait mod
      watchdogConfig(WATCHDOG_16MS);
 f7c:	88 e0       	ldi	r24, 0x08	; 8
 f7e:	14 d0       	rcall	.+40     	; 0xfa8 <watchdogConfig>
 f80:	61 cf       	rjmp	.-318    	; 0xe44 <main+0xc0>

00000f82 <putch>:
  RS485_PORT |= _BV(RS485_BIT);
# else
  RS485_PORT &= ~_BV(RS485_BIT);
# endif
#else //not RS485
  while (!(UART_SRA & _BV(UDRE0))) {  /* Spin */ }
 f82:	90 91 96 00 	lds	r25, 0x0096	; 0x800096 <__RAM__+0x96>
 f86:	95 ff       	sbrs	r25, 5
 f88:	fc cf       	rjmp	.-8      	; 0xf82 <putch>
  UART_UDR = ch;
 f8a:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__RAM__+0x90>
  #else
  RS485_PORT &= ~_BV(RS485_BIT);
  #endif
#endif
#endif // SOFT_UART
}
 f8e:	08 95       	ret

00000f90 <getch>:
    :
    "r25"
    );
#else
#ifndef LIN_UART
  while (!(UART_SRA & _BV(RXC0)))  {  /* Spin */ }
 f90:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <__RAM__+0x96>
 f94:	87 ff       	sbrs	r24, 7
 f96:	fc cf       	rjmp	.-8      	; 0xf90 <getch>
  if (!(UART_SRA & _BV(FE0))) {
 f98:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <__RAM__+0x96>
 f9c:	84 fd       	sbrc	r24, 4
 f9e:	01 c0       	rjmp	.+2      	; 0xfa2 <getch+0x12>
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
 fa0:	a8 95       	wdr
  while (!(LINSIR & _BV(LRXOK)))  {  /* Spin */ }
  if (!(LINSIR & _BV(LFERR))) {
    watchdogReset();  /* Eventually abort if wrong speed */
  }
#endif
  ch = UART_UDR;
 fa2:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__RAM__+0x90>
#if LED_DATA_FLASH
  toggle_led();
#endif

  return ch;
}
 fa6:	08 95       	ret

00000fa8 <watchdogConfig>:
  WDTCSR = _BV(WDCE) | _BV(WDE);
#else
  WDTCR= _BV(WDCE) | _BV(WDE);
#endif
#else //then it must be one of those newfangled ones that use CCP
  CCP=0xD8; //so write this magic number to CCP
 fa8:	98 ed       	ldi	r25, 0xD8	; 216
 faa:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <__RAM__+0x71>
#endif

#ifdef WDTCSR
  WDTCSR = x;
 fae:	81 bd       	out	0x21, r24	; 33
#else
  WDTCR= x;
#endif
}
 fb0:	08 95       	ret

00000fb2 <verifySpace>:
  do getch(); while (--count);
  verifySpace();
}

void verifySpace() {
  if (getch() != CRC_EOP) {
 fb2:	ee df       	rcall	.-36     	; 0xf90 <getch>
 fb4:	80 32       	cpi	r24, 0x20	; 32
 fb6:	19 f0       	breq	.+6      	; 0xfbe <verifySpace+0xc>
    watchdogConfig(WATCHDOG_16MS);    // shorten WD timeout
 fb8:	88 e0       	ldi	r24, 0x08	; 8
 fba:	f6 df       	rcall	.-20     	; 0xfa8 <watchdogConfig>
 fbc:	ff cf       	rjmp	.-2      	; 0xfbc <verifySpace+0xa>
    while (1)                         // and busy-loop so that WD causes
      ;                               //  a reset and app start.
  }
  putch(STK_INSYNC);
 fbe:	84 e1       	ldi	r24, 0x14	; 20
 fc0:	e0 cf       	rjmp	.-64     	; 0xf82 <putch>

00000fc2 <getNch>:
    ::[count] "M" (UART_B_VALUE)
    );
}
#endif

void getNch(uint8_t count) {
 fc2:	cf 93       	push	r28
 fc4:	c8 2f       	mov	r28, r24
  do getch(); while (--count);
 fc6:	e4 df       	rcall	.-56     	; 0xf90 <getch>
 fc8:	c1 50       	subi	r28, 0x01	; 1
 fca:	e9 f7       	brne	.-6      	; 0xfc6 <getNch+0x4>
  verifySpace();
}
 fcc:	cf 91       	pop	r28
}
#endif

void getNch(uint8_t count) {
  do getch(); while (--count);
  verifySpace();
 fce:	f1 cf       	rjmp	.-30     	; 0xfb2 <verifySpace>

00000fd0 <do_spm>:
 *   data=0 in WRITE
 */
static void do_spm(uint16_t address, uint8_t command, uint16_t data)  __attribute__ ((used));
static void do_spm(uint16_t address, uint8_t command, uint16_t data) {
  // Do spm stuff
  asm volatile (
 fd0:	fc 01       	movw	r30, r24
 fd2:	0a 01       	movw	r0, r20
 fd4:	67 bf       	out	0x37, r22	; 55
 fd6:	e8 95       	spm
 fd8:	11 24       	eor	r1, r1
    );

  // wait for spm to complete
  //   it doesn't have much sense for __BOOT_PAGE_FILL,
  //   but it doesn't hurt and saves some bytes on 'if'
  boot_spm_busy_wait();
 fda:	07 b6       	in	r0, 0x37	; 55
 fdc:	00 fc       	sbrc	r0, 0
 fde:	fd cf       	rjmp	.-6      	; 0xfda <do_spm+0xa>
  if ((command & (_BV(PGWRT)|_BV(PGERS))) && (data == 0) ) {
    // Reenable read access to flash
    __boot_rww_enable_short();
  }
#endif
}
 fe0:	08 95       	ret
