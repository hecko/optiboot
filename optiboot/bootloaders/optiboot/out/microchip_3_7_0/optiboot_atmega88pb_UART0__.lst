
optiboot_atmega88pb_UART0__.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001e8  00001e00  00001e00  00000074  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .trampolines  00000000  00001fe8  00001fe8  0000025c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .version      00000002  00001ffe  00001ffe  0000025c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .comment      00000030  00000000  00000000  0000025e  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  0000028e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000062c  00000000  00000000  000002be  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002ba  00000000  00000000  000008ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000389  00000000  00000000  00000ba4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000ac  00000000  00000000  00000f30  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001ff  00000000  00000000  00000fdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000307  00000000  00000000  000011db  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  000014e2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00001e00 <pre_main>:
/* everything that needs to run VERY early */
void pre_main(void) {
  // Allow convenient way of calling do_spm function - jump table, so
  //   entry to this function will always be here, independent of
  //   compilation, features etc
  asm volatile (
    1e00:	01 c0       	rjmp	.+2      	; 0x1e04 <main>
    1e02:	e2 c0       	rjmp	.+452    	; 0x1fc8 <do_spm>

00001e04 <main>:
  //  SP points to RAMEND
  //  r1 contains zero
  //
  // If not, uncomment the following instructions:
  // cli();
  asm volatile ("  clr __zero_reg__");
    1e04:	11 24       	eor	r1, r1
#  warning "START_APP_ON_EXTR is defined and NO_START_APP_ON_POR isn't"
#  define APP_START_REASONS 1 /* Always start rge App. */
#  define WDRF_CLR_REASONS 0  /* Never clear WDRF */
#endif

  ch = MCUSR;
    1e06:	84 b7       	in	r24, 0x34	; 52

  // Skip all logic and run bootloader if MCUSR is cleared (application request)
  if (ch != 0) {
    1e08:	88 23       	and	r24, r24
    1e0a:	61 f0       	breq	.+24     	; 0x1e24 <main+0x20>
     * One problematic scenario: broken application code sets watchdog timer
     * without clearing MCUSR before and triggers it quickly. But it's
     * recoverable by power-on with pushed reset button.
     */

    if (APP_START_REASONS) {
    1e0c:	98 2f       	mov	r25, r24
    1e0e:	9a 70       	andi	r25, 0x0A	; 10
    1e10:	92 30       	cpi	r25, 0x02	; 2
    1e12:	41 f0       	breq	.+16     	; 0x1e24 <main+0x20>
      if (WDRF_CLR_REASONS) {
    1e14:	81 ff       	sbrs	r24, 1
    1e16:	02 c0       	rjmp	.+4      	; 0x1e1c <main+0x18>
        /*
         * Clear WDRF if it was most probably set by wdr in bootloader.
         */
        if ((uint16_t)&MCUSR > 0x1F) {
          MCUSR = ~(_BV(WDRF));   // optimize to LDI/OUT
    1e18:	97 ef       	ldi	r25, 0xF7	; 247
    1e1a:	94 bf       	out	0x34, r25	; 52
      /*
       * save the reset flags in the designated register
       * This can be saved in a main program by putting code in .init0 (which
       * executes before normal c init code) to save R2 to a global variable.
       */
      __asm__ __volatile__ ("  mov r2, %0\n" :: "r" (ch));
    1e1c:	28 2e       	mov	r2, r24

      // switch off watchdog
      watchdogConfig(WATCHDOG_OFF);
    1e1e:	80 e0       	ldi	r24, 0x00	; 0
    1e20:	be d0       	rcall	.+380    	; 0x1f9e <watchdogConfig>
      // Note that appstart_vec is defined so that this works with either
      // real or virtual boot partitions.
      __asm__ __volatile__ (
    1e22:	ee c0       	rjmp	.+476    	; 0x2000 <__VERSION_START__+0x2>
#elif defined(__AVR_ATtiny25__)||defined(__AVR_ATtiny45__)||defined(__AVR_ATtiny85__)
  TCCR1 = 0x0E; //div 8196 - it's an 8-bit timer.
#elif defined(__AVR_ATtiny43__)
#error "LED flash for Tiny43 not yet supported"
#else
  TCCR1B = _BV(CS12) | _BV(CS10); // div 1024
    1e24:	85 e0       	ldi	r24, 0x05	; 5
    1e26:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__RAM__+0x81>
  LINBTR = (1 << LDISR) | (8 << LBT0); 
  LINCR = _BV(LENA) | _BV(LCMD2) | _BV(LCMD1) | _BV(LCMD0);
  LINDAT=0;
#else
#if (SINGLESPEED == 0)
  UART_SRA = _BV(U2X0); //Double speed mode USART0
    1e2a:	82 e0       	ldi	r24, 0x02	; 2
    1e2c:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__RAM__+0xc0>
#endif
  UART_SRB = _BV(RXEN0) | _BV(TXEN0);
    1e30:	88 e1       	ldi	r24, 0x18	; 24
    1e32:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__RAM__+0xc1>
  UART_SRC = _BV(UCSZ00) | _BV(UCSZ01);
    1e36:	86 e0       	ldi	r24, 0x06	; 6
    1e38:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__RAM__+0xc2>
  UART_SRL = (uint8_t)BAUD_SETTING;
    1e3c:	80 e1       	ldi	r24, 0x10	; 16
    1e3e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__RAM__+0xc4>
  RS485_PORT &= ~_BV(RS485_BIT);
  #endif
#endif

  // Set up watchdog to trigger after desired timeout
  watchdogConfig(WDTPERIOD);
    1e42:	8e e0       	ldi	r24, 0x0E	; 14
    1e44:	ac d0       	rcall	.+344    	; 0x1f9e <watchdogConfig>

#if (LED_START_FLASHES > 0) || LED_DATA_FLASH || LED_START_ON
  /* Set LED pin as output */
  LED_DDR |= _BV(LED);
    1e46:	25 9a       	sbi	0x04, 5	; 4
    1e48:	84 e0       	ldi	r24, 0x04	; 4
    TIFR = _BV(TOV1);
    while (!(TIFR & _BV(TOV1)));
#elif defined(__AVR_ATtiny43__)
#error "LED flash for Tiny43 not yet supported"
#else
    TCNT1 = -(F_CPU/(1024*16));
    1e4a:	20 e3       	ldi	r18, 0x30	; 48
    1e4c:	3c ef       	ldi	r19, 0xFC	; 252
    TIFR1 = _BV(TOV1);
    1e4e:	91 e0       	ldi	r25, 0x01	; 1
    TIFR = _BV(TOV1);
    while (!(TIFR & _BV(TOV1)));
#elif defined(__AVR_ATtiny43__)
#error "LED flash for Tiny43 not yet supported"
#else
    TCNT1 = -(F_CPU/(1024*16));
    1e50:	30 93 85 00 	sts	0x0085, r19	; 0x800085 <__RAM__+0x85>
    1e54:	20 93 84 00 	sts	0x0084, r18	; 0x800084 <__RAM__+0x84>
    TIFR1 = _BV(TOV1);
    1e58:	96 bb       	out	0x16, r25	; 22
    while (!(TIFR1 & _BV(TOV1)));
    1e5a:	b0 9b       	sbis	0x16, 0	; 22
    1e5c:	fe cf       	rjmp	.-4      	; 0x1e5a <main+0x56>
  defined(__AVR_ATmega64__)   || defined(__AVR_ATmega128__)
  LED_PORT ^= _BV(LED);
#else
  // Newer AVRs can toggle by writing PINx.
  if (&LED_PIN <= &_SFR_IO8(0x31)) {  // "if" code optimizes away.
    LED_PIN |= _BV(LED); // becomes SBI on low ports (in theory: incorrectly)
    1e5e:	1d 9a       	sbi	0x03, 5	; 3
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
    1e60:	a8 95       	wdr
     *  by the UART hardware, avrdude sends several attempts in rather
     *  quick succession, some of which will be lost and cause us to
     *  get out of sync.  So if we see any data; stop blinking.
     */
#ifndef LIN_UART
    if (UART_SRA & _BV(RXC0))
    1e62:	40 91 c0 00 	lds	r20, 0x00C0	; 0x8000c0 <__RAM__+0xc0>
    1e66:	47 fd       	sbrc	r20, 7
    1e68:	02 c0       	rjmp	.+4      	; 0x1e6e <main+0x6a>
    1e6a:	81 50       	subi	r24, 0x01	; 1
#else
// This doesn't seem to work?
//    if ((UART_PIN & (1<<UART_RX_BIT)) == 0)
//      break;  // detect start bit on soft uart too.
#endif
  } while (--count);
    1e6c:	89 f7       	brne	.-30     	; 0x1e50 <main+0x4c>
       * and we needed the space back.
       */
#ifdef FOURPAGEERASE
      if ((address.bytes[0] & ((SPM_PAGESIZE<<2)-1))==0) {
#endif
        __boot_page_erase_short(address.word);
    1e6e:	93 e0       	ldi	r25, 0x03	; 3
    1e70:	e9 2e       	mov	r14, r25

      /*
       * Copy data from the buffer into the flash write buffer.
       */
      do {
        __boot_page_fill_short((uint16_t)(void*)addrPtr, *(mybuff.wptr++));
    1e72:	dd 24       	eor	r13, r13
    1e74:	d3 94       	inc	r13
      } while (len -= 2);

      /*
       * Actually Write the buffer to flash (and wait for it to finish.)
       */
      __boot_page_write_short(address.word);
    1e76:	25 e0       	ldi	r18, 0x05	; 5
    1e78:	c2 2e       	mov	r12, r18
      boot_spm_busy_wait();
#if defined(RWWSRE)
      // Reenable read access to flash
      __boot_rww_enable_short();
    1e7a:	31 e1       	ldi	r19, 0x11	; 17
    1e7c:	b3 2e       	mov	r11, r19
#endif

  /* Forever loop: exits by causing WDT reset */
  for (;;) {
    /* get character from UART */
    ch = getch();
    1e7e:	83 d0       	rcall	.+262    	; 0x1f86 <getch>

    if (ch == STK_GET_PARAMETER) {
    1e80:	81 34       	cpi	r24, 0x41	; 65
    1e82:	59 f4       	brne	.+22     	; 0x1e9a <main+0x96>
      unsigned char which = getch();
    1e84:	80 d0       	rcall	.+256    	; 0x1f86 <getch>
    1e86:	18 2f       	mov	r17, r24
      verifySpace();
    1e88:	90 d0       	rcall	.+288    	; 0x1faa <verifySpace>
      /*
       * Send optiboot version as "SW version"
       * Note that the references to memory are optimized away.
       */
      if (which == STK_SW_MINOR) {
        putch(optiboot_version & 0xFF);
    1e8a:	83 e0       	ldi	r24, 0x03	; 3
      } else if (which == STK_SW_MAJOR) {
    1e8c:	11 38       	cpi	r17, 0x81	; 129
    1e8e:	09 f4       	brne	.+2      	; 0x1e92 <main+0x8e>
        putch(optiboot_version >> 8);
    1e90:	88 e0       	ldi	r24, 0x08	; 8
    1e92:	72 d0       	rcall	.+228    	; 0x1f78 <putch>
    }
    else {
      // This covers the response to commands like STK_ENTER_PROGMODE
      verifySpace();
    }
    putch(STK_OK);
    1e94:	80 e1       	ldi	r24, 0x10	; 16
    1e96:	70 d0       	rcall	.+224    	; 0x1f78 <putch>
#endif

  /* Forever loop: exits by causing WDT reset */
  for (;;) {
    /* get character from UART */
    ch = getch();
    1e98:	f2 cf       	rjmp	.-28     	; 0x1e7e <main+0x7a>
         * other parameters - enough to keep Avrdude happy
         */
        putch(0x03);
      }
    }
    else if (ch == STK_SET_DEVICE) {
    1e9a:	82 34       	cpi	r24, 0x42	; 66
    1e9c:	19 f4       	brne	.+6      	; 0x1ea4 <main+0xa0>
      // SET DEVICE is ignored
      getNch(20);
    1e9e:	84 e1       	ldi	r24, 0x14	; 20
    }
    else if (ch == STK_SET_DEVICE_EXT) {
      // SET DEVICE EXT is ignored
      getNch(5);
    1ea0:	8c d0       	rcall	.+280    	; 0x1fba <getNch>
    1ea2:	f8 cf       	rjmp	.-16     	; 0x1e94 <main+0x90>
    }
    else if (ch == STK_SET_DEVICE) {
      // SET DEVICE is ignored
      getNch(20);
    }
    else if (ch == STK_SET_DEVICE_EXT) {
    1ea4:	85 34       	cpi	r24, 0x45	; 69
    1ea6:	11 f4       	brne	.+4      	; 0x1eac <main+0xa8>
      // SET DEVICE EXT is ignored
      getNch(5);
    1ea8:	85 e0       	ldi	r24, 0x05	; 5
    1eaa:	fa cf       	rjmp	.-12     	; 0x1ea0 <main+0x9c>
    }
    else if (ch == STK_LOAD_ADDRESS) {
    1eac:	85 35       	cpi	r24, 0x55	; 85
    1eae:	41 f4       	brne	.+16     	; 0x1ec0 <main+0xbc>
      // LOAD ADDRESS
      address.bytes[0] = getch();
    1eb0:	6a d0       	rcall	.+212    	; 0x1f86 <getch>
    1eb2:	c8 2f       	mov	r28, r24
      address.bytes[1] = getch();
    1eb4:	68 d0       	rcall	.+208    	; 0x1f86 <getch>
    1eb6:	d8 2f       	mov	r29, r24
      }
      else {
        RAMPZ &= 0xFE;
      }
#endif
      address.word *= 2; // Convert from word address to byte address
    1eb8:	cc 0f       	add	r28, r28
    1eba:	dd 1f       	adc	r29, r29
      watchdogConfig(WATCHDOG_16MS);
      verifySpace();
    }
    else {
      // This covers the response to commands like STK_ENTER_PROGMODE
      verifySpace();
    1ebc:	76 d0       	rcall	.+236    	; 0x1faa <verifySpace>
    1ebe:	ea cf       	rjmp	.-44     	; 0x1e94 <main+0x90>
      }
#endif
      address.word *= 2; // Convert from word address to byte address
      verifySpace();
    }
    else if (ch == STK_UNIVERSAL) {
    1ec0:	86 35       	cpi	r24, 0x56	; 86
    1ec2:	21 f4       	brne	.+8      	; 0x1ecc <main+0xc8>
        getNch(3);
        putch(0x00);
      }
#else
      // UNIVERSAL command is ignored
      getNch(4);
    1ec4:	84 e0       	ldi	r24, 0x04	; 4
    1ec6:	79 d0       	rcall	.+242    	; 0x1fba <getNch>
      putch(0x00);
    1ec8:	80 e0       	ldi	r24, 0x00	; 0
    1eca:	e3 cf       	rjmp	.-58     	; 0x1e92 <main+0x8e>
#endif
    }
    /* Write memory, length is big endian and is in bytes */
    else if (ch == STK_PROG_PAGE) {
    1ecc:	84 36       	cpi	r24, 0x64	; 100
    1ece:	09 f0       	breq	.+2      	; 0x1ed2 <main+0xce>
    1ed0:	34 c0       	rjmp	.+104    	; 0x1f3a <main+0x136>
      // PROGRAM PAGE - we support flash programming only, not EEPROM
      uint8_t desttype;
      uint8_t *bufPtr;
      pagelen_t savelength;

      GETLENGTH(length);
    1ed2:	59 d0       	rcall	.+178    	; 0x1f86 <getch>
    1ed4:	58 d0       	rcall	.+176    	; 0x1f86 <getch>
    1ed6:	f8 2e       	mov	r15, r24
      savelength = length;
      desttype = getch();
    1ed8:	56 d0       	rcall	.+172    	; 0x1f86 <getch>
    1eda:	a8 2e       	mov	r10, r24

      // read a page worth of contents
      bufPtr = buff.bptr;
    1edc:	00 e0       	ldi	r16, 0x00	; 0
    1ede:	11 e0       	ldi	r17, 0x01	; 1
      do *bufPtr++ = getch();
    1ee0:	48 01       	movw	r8, r16
    1ee2:	8f ef       	ldi	r24, 0xFF	; 255
    1ee4:	88 1a       	sub	r8, r24
    1ee6:	98 0a       	sbc	r9, r24
    1ee8:	4e d0       	rcall	.+156    	; 0x1f86 <getch>
    1eea:	f8 01       	movw	r30, r16
    1eec:	80 83       	st	Z, r24
    1eee:	84 01       	movw	r16, r8
      while (--length);
    1ef0:	f8 10       	cpse	r15, r8
    1ef2:	f6 cf       	rjmp	.-20     	; 0x1ee0 <main+0xdc>

      // Read command terminator, start reply
      verifySpace();
    1ef4:	5a d0       	rcall	.+180    	; 0x1faa <verifySpace>
 * void writebuffer(memtype, buffer, address, length)
 */
static inline void writebuffer(int8_t memtype, addr16_t mybuff,
                               addr16_t address, pagelen_t len)
{
  switch (memtype) {
    1ef6:	f5 e4       	ldi	r31, 0x45	; 69
    1ef8:	af 12       	cpse	r10, r31
    1efa:	01 c0       	rjmp	.+2      	; 0x1efe <main+0xfa>
    1efc:	ff cf       	rjmp	.-2      	; 0x1efc <main+0xf8>
       * and we needed the space back.
       */
#ifdef FOURPAGEERASE
      if ((address.bytes[0] & ((SPM_PAGESIZE<<2)-1))==0) {
#endif
        __boot_page_erase_short(address.word);
    1efe:	fe 01       	movw	r30, r28
    1f00:	e7 be       	out	0x37, r14	; 55
    1f02:	e8 95       	spm
        boot_spm_busy_wait();
    1f04:	07 b6       	in	r0, 0x37	; 55
    1f06:	00 fc       	sbrc	r0, 0
    1f08:	fd cf       	rjmp	.-6      	; 0x1f04 <main+0x100>
     * the default rather than checking for the correct code, we save
     * space on chips that don't support any other memory types.
     */
    {
      // Copy buffer into programming buffer
      uint16_t addrPtr = address.word;
    1f0a:	fe 01       	movw	r30, r28
       */
#ifdef FOURPAGEERASE
      if ((address.bytes[0] & ((SPM_PAGESIZE<<2)-1))==0) {
#endif
        __boot_page_erase_short(address.word);
        boot_spm_busy_wait();
    1f0c:	a0 e0       	ldi	r26, 0x00	; 0
    1f0e:	b1 e0       	ldi	r27, 0x01	; 1

      /*
       * Copy data from the buffer into the flash write buffer.
       */
      do {
        __boot_page_fill_short((uint16_t)(void*)addrPtr, *(mybuff.wptr++));
    1f10:	cd 01       	movw	r24, r26
    1f12:	02 96       	adiw	r24, 0x02	; 2
    1f14:	2d 91       	ld	r18, X+
    1f16:	3c 91       	ld	r19, X
    1f18:	09 01       	movw	r0, r18
    1f1a:	d7 be       	out	0x37, r13	; 55
    1f1c:	e8 95       	spm
    1f1e:	11 24       	eor	r1, r1
        addrPtr += 2;
    1f20:	32 96       	adiw	r30, 0x02	; 2

      /*
       * Copy data from the buffer into the flash write buffer.
       */
      do {
        __boot_page_fill_short((uint16_t)(void*)addrPtr, *(mybuff.wptr++));
    1f22:	dc 01       	movw	r26, r24
        addrPtr += 2;
      } while (len -= 2);
    1f24:	f8 12       	cpse	r15, r24
    1f26:	f4 cf       	rjmp	.-24     	; 0x1f10 <main+0x10c>

      /*
       * Actually Write the buffer to flash (and wait for it to finish.)
       */
      __boot_page_write_short(address.word);
    1f28:	fe 01       	movw	r30, r28
    1f2a:	c7 be       	out	0x37, r12	; 55
    1f2c:	e8 95       	spm
      boot_spm_busy_wait();
    1f2e:	07 b6       	in	r0, 0x37	; 55
    1f30:	00 fc       	sbrc	r0, 0
    1f32:	fd cf       	rjmp	.-6      	; 0x1f2e <main+0x12a>
#if defined(RWWSRE)
      // Reenable read access to flash
      __boot_rww_enable_short();
    1f34:	b7 be       	out	0x37, r11	; 55
    1f36:	e8 95       	spm
    1f38:	ad cf       	rjmp	.-166    	; 0x1e94 <main+0x90>
      writebuffer(desttype, buff, address, savelength);


    }
/* Read memory block mode, length is big endian.  */
    else if (ch == STK_READ_PAGE) {
    1f3a:	84 37       	cpi	r24, 0x74	; 116
    1f3c:	71 f4       	brne	.+28     	; 0x1f5a <main+0x156>
      uint8_t desttype;
      GETLENGTH(length);
    1f3e:	23 d0       	rcall	.+70     	; 0x1f86 <getch>
    1f40:	22 d0       	rcall	.+68     	; 0x1f86 <getch>
    1f42:	f8 2e       	mov	r15, r24

      desttype = getch();
    1f44:	20 d0       	rcall	.+64     	; 0x1f86 <getch>

      verifySpace();
    1f46:	31 d0       	rcall	.+98     	; 0x1faa <verifySpace>
    1f48:	8e 01       	movw	r16, r28
      //      while (--length);
      // read a Flash and increment the address (may increment RAMPZ)
      __asm__ ("  elpm %0,Z+\n" : "=r" (ch), "=z" (address.bptr): "1" (address));
#else
      // read a Flash byte and increment the address
      __asm__ ("  lpm %0,Z+\n" : "=r" (ch), "=z" (address.bptr): "1" (address));
    1f4a:	f8 01       	movw	r30, r16
    1f4c:	85 91       	lpm	r24, Z+
    1f4e:	8f 01       	movw	r16, r30
#endif
      putch(ch);
    1f50:	13 d0       	rcall	.+38     	; 0x1f78 <putch>
    } while (--length);
    1f52:	fa 94       	dec	r15
    1f54:	f1 10       	cpse	r15, r1
    1f56:	f9 cf       	rjmp	.-14     	; 0x1f4a <main+0x146>
    1f58:	9d cf       	rjmp	.-198    	; 0x1e94 <main+0x90>

      read_mem(desttype, address, length);
    }

/* Get device signature bytes  */
    else if (ch == STK_READ_SIGN) {
    1f5a:	85 37       	cpi	r24, 0x75	; 117
    1f5c:	39 f4       	brne	.+14     	; 0x1f6c <main+0x168>
      // READ SIGN - return what Avrdude wants to hear
      verifySpace();
    1f5e:	25 d0       	rcall	.+74     	; 0x1faa <verifySpace>
      putch(SIGNATURE_0);
    1f60:	8e e1       	ldi	r24, 0x1E	; 30
    1f62:	0a d0       	rcall	.+20     	; 0x1f78 <putch>
      putch(SIGNATURE_1);
    1f64:	83 e9       	ldi	r24, 0x93	; 147
    1f66:	08 d0       	rcall	.+16     	; 0x1f78 <putch>
      putch(SIGNATURE_2);
    1f68:	86 e1       	ldi	r24, 0x16	; 22
    1f6a:	93 cf       	rjmp	.-218    	; 0x1e92 <main+0x8e>
    }
    else if (ch == STK_LEAVE_PROGMODE) { /* 'Q' */
    1f6c:	81 35       	cpi	r24, 0x51	; 81
    1f6e:	09 f0       	breq	.+2      	; 0x1f72 <main+0x16e>
    1f70:	a5 cf       	rjmp	.-182    	; 0x1ebc <main+0xb8>
      // Adaboot no-wait mod
      watchdogConfig(WATCHDOG_16MS);
    1f72:	88 e0       	ldi	r24, 0x08	; 8
    1f74:	14 d0       	rcall	.+40     	; 0x1f9e <watchdogConfig>
    1f76:	a2 cf       	rjmp	.-188    	; 0x1ebc <main+0xb8>

00001f78 <putch>:
  RS485_PORT |= _BV(RS485_BIT);
# else
  RS485_PORT &= ~_BV(RS485_BIT);
# endif
#else //not RS485
  while (!(UART_SRA & _BV(UDRE0))) {  /* Spin */ }
    1f78:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__RAM__+0xc0>
    1f7c:	95 ff       	sbrs	r25, 5
    1f7e:	fc cf       	rjmp	.-8      	; 0x1f78 <putch>
  UART_UDR = ch;
    1f80:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__RAM__+0xc6>
  #else
  RS485_PORT &= ~_BV(RS485_BIT);
  #endif
#endif
#endif // SOFT_UART
}
    1f84:	08 95       	ret

00001f86 <getch>:
    :
    "r25"
    );
#else
#ifndef LIN_UART
  while (!(UART_SRA & _BV(RXC0)))  {  /* Spin */ }
    1f86:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__RAM__+0xc0>
    1f8a:	87 ff       	sbrs	r24, 7
    1f8c:	fc cf       	rjmp	.-8      	; 0x1f86 <getch>
  if (!(UART_SRA & _BV(FE0))) {
    1f8e:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__RAM__+0xc0>
    1f92:	84 fd       	sbrc	r24, 4
    1f94:	01 c0       	rjmp	.+2      	; 0x1f98 <getch+0x12>
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
    1f96:	a8 95       	wdr
  while (!(LINSIR & _BV(LRXOK)))  {  /* Spin */ }
  if (!(LINSIR & _BV(LFERR))) {
    watchdogReset();  /* Eventually abort if wrong speed */
  }
#endif
  ch = UART_UDR;
    1f98:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__RAM__+0xc6>
#if LED_DATA_FLASH
  toggle_led();
#endif

  return ch;
}
    1f9c:	08 95       	ret

00001f9e <watchdogConfig>:
}

void watchdogConfig(uint8_t x) {
#ifdef WDCE //does it have a Watchdog Change Enable?
#ifdef WDTCSR
  WDTCSR = _BV(WDCE) | _BV(WDE);
    1f9e:	e0 e6       	ldi	r30, 0x60	; 96
    1fa0:	f0 e0       	ldi	r31, 0x00	; 0
    1fa2:	98 e1       	ldi	r25, 0x18	; 24
    1fa4:	90 83       	st	Z, r25
#else //then it must be one of those newfangled ones that use CCP
  CCP=0xD8; //so write this magic number to CCP
#endif

#ifdef WDTCSR
  WDTCSR = x;
    1fa6:	80 83       	st	Z, r24
#else
  WDTCR= x;
#endif
}
    1fa8:	08 95       	ret

00001faa <verifySpace>:
  do getch(); while (--count);
  verifySpace();
}

void verifySpace() {
  if (getch() != CRC_EOP) {
    1faa:	ed df       	rcall	.-38     	; 0x1f86 <getch>
    1fac:	80 32       	cpi	r24, 0x20	; 32
    1fae:	19 f0       	breq	.+6      	; 0x1fb6 <verifySpace+0xc>
    watchdogConfig(WATCHDOG_16MS);    // shorten WD timeout
    1fb0:	88 e0       	ldi	r24, 0x08	; 8
    1fb2:	f5 df       	rcall	.-22     	; 0x1f9e <watchdogConfig>
    1fb4:	ff cf       	rjmp	.-2      	; 0x1fb4 <verifySpace+0xa>
    while (1)                         // and busy-loop so that WD causes
      ;                               //  a reset and app start.
  }
  putch(STK_INSYNC);
    1fb6:	84 e1       	ldi	r24, 0x14	; 20
    1fb8:	df cf       	rjmp	.-66     	; 0x1f78 <putch>

00001fba <getNch>:
    ::[count] "M" (UART_B_VALUE)
    );
}
#endif

void getNch(uint8_t count) {
    1fba:	cf 93       	push	r28
    1fbc:	c8 2f       	mov	r28, r24
  do getch(); while (--count);
    1fbe:	e3 df       	rcall	.-58     	; 0x1f86 <getch>
    1fc0:	c1 50       	subi	r28, 0x01	; 1
    1fc2:	e9 f7       	brne	.-6      	; 0x1fbe <getNch+0x4>
  verifySpace();
}
    1fc4:	cf 91       	pop	r28
}
#endif

void getNch(uint8_t count) {
  do getch(); while (--count);
  verifySpace();
    1fc6:	f1 cf       	rjmp	.-30     	; 0x1faa <verifySpace>

00001fc8 <do_spm>:
 *   data=0 in WRITE
 */
static void do_spm(uint16_t address, uint8_t command, uint16_t data)  __attribute__ ((used));
static void do_spm(uint16_t address, uint8_t command, uint16_t data) {
  // Do spm stuff
  asm volatile (
    1fc8:	fc 01       	movw	r30, r24
    1fca:	0a 01       	movw	r0, r20
    1fcc:	67 bf       	out	0x37, r22	; 55
    1fce:	e8 95       	spm
    1fd0:	11 24       	eor	r1, r1
    );

  // wait for spm to complete
  //   it doesn't have much sense for __BOOT_PAGE_FILL,
  //   but it doesn't hurt and saves some bytes on 'if'
  boot_spm_busy_wait();
    1fd2:	07 b6       	in	r0, 0x37	; 55
    1fd4:	00 fc       	sbrc	r0, 0
    1fd6:	fd cf       	rjmp	.-6      	; 0x1fd2 <do_spm+0xa>
#if defined(RWWSRE)
  // this 'if' condition should be: (command == __BOOT_PAGE_WRITE || command == __BOOT_PAGE_ERASE)...
  // but it's tweaked a little assuming that in every command we are interested in here, there
  // must be also SELFPRGEN set. If we skip checking this bit, we save here 4B
  if ((command & (_BV(PGWRT)|_BV(PGERS))) && (data == 0) ) {
    1fd8:	66 70       	andi	r22, 0x06	; 6
    1fda:	29 f0       	breq	.+10     	; 0x1fe6 <do_spm+0x1e>
    1fdc:	45 2b       	or	r20, r21
    1fde:	19 f4       	brne	.+6      	; 0x1fe6 <do_spm+0x1e>
    // Reenable read access to flash
    __boot_rww_enable_short();
    1fe0:	81 e1       	ldi	r24, 0x11	; 17
    1fe2:	87 bf       	out	0x37, r24	; 55
    1fe4:	e8 95       	spm
  }
#endif
}
    1fe6:	08 95       	ret
