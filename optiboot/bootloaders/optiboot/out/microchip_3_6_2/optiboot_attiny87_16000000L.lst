
optiboot_attiny87.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000024a  00001d80  00001d80  00000074  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .trampolines  00000000  00001fca  00001fca  000002be  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .version      00000002  00001ffe  00001ffe  000002be  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .comment      00000030  00000000  00000000  000002c0  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000002f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000689  00000000  00000000  00000320  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002ed  00000000  00000000  000009a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000039f  00000000  00000000  00000c96  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000ac  00000000  00000000  00001038  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000220  00000000  00000000  000010e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003d8  00000000  00000000  00001304  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000080  00000000  00000000  000016dc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00001d80 <pre_main>:
/* everything that needs to run VERY early */
void pre_main(void) {
  // Allow convenient way of calling do_spm function - jump table, so
  //   entry to this function will always be here, independent of
  //   compilation, features etc
  asm volatile (
    1d80:	01 c0       	rjmp	.+2      	; 0x1d84 <main>
    1d82:	1a c1       	rjmp	.+564    	; 0x1fb8 <do_spm>

00001d84 <main>:
  //  SP points to RAMEND
  //  r1 contains zero
  //
  // If not, uncomment the following instructions:
  // cli();
  asm volatile ("  clr __zero_reg__");
    1d84:	11 24       	eor	r1, r1
#  warning "START_APP_ON_EXTR is defined and NO_START_APP_ON_POR isn't"
#  define APP_START_REASONS 1 /* Always start rge App. */
#  define WDRF_CLR_REASONS 0  /* Never clear WDRF */
#endif

  ch = MCUSR;
    1d86:	84 b7       	in	r24, 0x34	; 52

  // Skip all logic and run bootloader if MCUSR is cleared (application request)
  if (ch != 0) {
    1d88:	88 23       	and	r24, r24
    1d8a:	71 f0       	breq	.+28     	; 0x1da8 <main+0x24>
     * One problematic scenario: broken application code sets watchdog timer
     * without clearing MCUSR before and triggers it quickly. But it's
     * recoverable by power-on with pushed reset button.
     */

    if (APP_START_REASONS) {
    1d8c:	98 2f       	mov	r25, r24
    1d8e:	9a 70       	andi	r25, 0x0A	; 10
    1d90:	92 30       	cpi	r25, 0x02	; 2
    1d92:	51 f0       	breq	.+20     	; 0x1da8 <main+0x24>
      if (WDRF_CLR_REASONS) {
    1d94:	81 ff       	sbrs	r24, 1
    1d96:	02 c0       	rjmp	.+4      	; 0x1d9c <main+0x18>
        /*
         * Clear WDRF if it was most probably set by wdr in bootloader.
         */
        if ((uint16_t)&MCUSR > 0x1F) {
          MCUSR = ~(_BV(WDRF));   // optimize to LDI/OUT
    1d98:	97 ef       	ldi	r25, 0xF7	; 247
    1d9a:	94 bf       	out	0x34, r25	; 52
      /*
       * save the reset flags in the designated register
       * This can be saved in a main program by putting code in .init0 (which
       * executes before normal c init code) to save R2 to a global variable.
       */
      __asm__ __volatile__ ("  mov r2, %0\n" :: "r" (ch));
    1d9c:	28 2e       	mov	r2, r24

      // switch off watchdog
      watchdogConfig(WATCHDOG_OFF);
    1d9e:	80 e0       	ldi	r24, 0x00	; 0
    1da0:	f6 d0       	rcall	.+492    	; 0x1f8e <watchdogConfig>
      // Note that appstart_vec is defined so that this works with either
      // real or virtual boot partitions.
      __asm__ __volatile__ (
    1da2:	e0 e1       	ldi	r30, 0x10	; 16
    1da4:	ff 27       	eor	r31, r31
    1da6:	09 94       	ijmp
#elif defined(__AVR_ATtiny25__)||defined(__AVR_ATtiny45__)||defined(__AVR_ATtiny85__)
  TCCR1 = 0x0E; //div 8196 - it's an 8-bit timer.
#elif defined(__AVR_ATtiny43__)
#error "LED flash for Tiny43 not yet supported"
#else
  TCCR1B = _BV(CS12) | _BV(CS10); // div 1024
    1da8:	85 e0       	ldi	r24, 0x05	; 5
    1daa:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__RAM__+0x81>
  UCSRC = _BV(URSEL) | _BV(UCSZ1) | _BV(UCSZ0);  // config USART; 8N1
  UBRRL = (uint8_t)BAUD_SETTING;
#else // mega8/etc
#ifdef LIN_UART
  //DDRB|=3;
  LINCR = (1 << LSWRES);
    1dae:	80 e8       	ldi	r24, 0x80	; 128
    1db0:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <__RAM__+0xc8>
  //LINBRRL = (((F_CPU * 10L / 32L / BAUD_RATE) + 5L) / 10L) - 1;
  LINBRRL=(uint8_t)BAUD_SETTING;
    1db4:	80 e1       	ldi	r24, 0x10	; 16
    1db6:	80 93 cd 00 	sts	0x00CD, r24	; 0x8000cd <__RAM__+0xcd>
  LINBTR = (1 << LDISR) | (8 << LBT0); 
    1dba:	88 e8       	ldi	r24, 0x88	; 136
    1dbc:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__RAM__+0xcc>
  LINCR = _BV(LENA) | _BV(LCMD2) | _BV(LCMD1) | _BV(LCMD0);
    1dc0:	8f e0       	ldi	r24, 0x0F	; 15
    1dc2:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <__RAM__+0xc8>
  LINDAT=0;
    1dc6:	10 92 d2 00 	sts	0x00D2, r1	; 0x8000d2 <__RAM__+0xd2>
  RS485_PORT &= ~_BV(RS485_BIT);
  #endif
#endif

  // Set up watchdog to trigger after desired timeout
  watchdogConfig(WDTPERIOD);
    1dca:	8e e0       	ldi	r24, 0x0E	; 14
    1dcc:	e0 d0       	rcall	.+448    	; 0x1f8e <watchdogConfig>

#if (LED_START_FLASHES > 0) || LED_DATA_FLASH || LED_START_ON
  /* Set LED pin as output */
  LED_DDR |= _BV(LED);
    1dce:	0b 9a       	sbi	0x01, 3	; 1
    1dd0:	86 e0       	ldi	r24, 0x06	; 6
    TIFR = _BV(TOV1);
    while (!(TIFR & _BV(TOV1)));
#elif defined(__AVR_ATtiny43__)
#error "LED flash for Tiny43 not yet supported"
#else
    TCNT1 = -(F_CPU/(1024*16));
    1dd2:	20 e3       	ldi	r18, 0x30	; 48
    1dd4:	3c ef       	ldi	r19, 0xFC	; 252
    TIFR1 = _BV(TOV1);
    1dd6:	91 e0       	ldi	r25, 0x01	; 1
    TIFR = _BV(TOV1);
    while (!(TIFR & _BV(TOV1)));
#elif defined(__AVR_ATtiny43__)
#error "LED flash for Tiny43 not yet supported"
#else
    TCNT1 = -(F_CPU/(1024*16));
    1dd8:	30 93 85 00 	sts	0x0085, r19	; 0x800085 <__RAM__+0x85>
    1ddc:	20 93 84 00 	sts	0x0084, r18	; 0x800084 <__RAM__+0x84>
    TIFR1 = _BV(TOV1);
    1de0:	96 bb       	out	0x16, r25	; 22
    while (!(TIFR1 & _BV(TOV1)));
    1de2:	b0 9b       	sbis	0x16, 0	; 22
    1de4:	fe cf       	rjmp	.-4      	; 0x1de2 <main+0x5e>
  defined(__AVR_ATmega64__)   || defined(__AVR_ATmega128__)
  LED_PORT ^= _BV(LED);
#else
  // Newer AVRs can toggle by writing PINx.
  if (&LED_PIN <= &_SFR_IO8(0x31)) {  // "if" code optimizes away.
    LED_PIN |= _BV(LED); // becomes SBI on low ports (in theory: incorrectly)
    1de6:	03 9a       	sbi	0x00, 3	; 0
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
    1de8:	a8 95       	wdr
     *  get out of sync.  So if we see any data; stop blinking.
     */
#ifndef LIN_UART
    if (UART_SRA & _BV(RXC0))
#else
      if (LINSIR & _BV(LRXOK))
    1dea:	40 91 c9 00 	lds	r20, 0x00C9	; 0x8000c9 <__RAM__+0xc9>
    1dee:	40 fd       	sbrc	r20, 0
    1df0:	02 c0       	rjmp	.+4      	; 0x1df6 <main+0x72>
    1df2:	81 50       	subi	r24, 0x01	; 1
#else
// This doesn't seem to work?
//    if ((UART_PIN & (1<<UART_RX_BIT)) == 0)
//      break;  // detect start bit on soft uart too.
#endif
  } while (--count);
    1df4:	89 f7       	brne	.-30     	; 0x1dd8 <main+0x54>

      /*
       * Copy data from the buffer into the flash write buffer.
       */
      do {
        __boot_page_fill_short((uint16_t)(void*)addrPtr, *(mybuff.wptr++));
    1df6:	cc 24       	eor	r12, r12
    1df8:	c3 94       	inc	r12
      } while (len -= 2);

      /*
       * Actually Write the buffer to flash (and wait for it to finish.)
       */
      __boot_page_write_short(address.word);
    1dfa:	25 e0       	ldi	r18, 0x05	; 5
    1dfc:	b2 2e       	mov	r11, r18
        // Move RESET vector to 'save' vector
        // Save jmp targets (for "Verify")
        rstVect0_sav = buff.bptr[rstVect0];
        rstVect1_sav = buff.bptr[rstVect1];
        addr16_t vect;
        vect.word = ((uint16_t)pre_main-1);
    1dfe:	3f eb       	ldi	r19, 0xBF	; 191
    1e00:	e3 2e       	mov	r14, r19
    1e02:	3e e0       	ldi	r19, 0x0E	; 14
    1e04:	f3 2e       	mov	r15, r19
        // an RJMP instruction is 0b1100xxxx xxxxxxxx, so we should be able to
        // do math on the offsets without masking it off first.
        // Note that rjmp is relative to the already incremented PC, so the
        //  offset is one less than you might expect.
        buff.bptr[0] = vect.bytes[0]; // rjmp to start of bootloader
        buff.bptr[1] = vect.bytes[1] | 0xC0;  // make an "rjmp"
    1e06:	8f 2d       	mov	r24, r15
    1e08:	80 6c       	ori	r24, 0xC0	; 192
    1e0a:	a8 2e       	mov	r10, r24
#endif

  /* Forever loop: exits by causing WDT reset */
  for (;;) {
    /* get character from UART */
    ch = getch();
    1e0c:	b4 d0       	rcall	.+360    	; 0x1f76 <getch>

    if (ch == STK_GET_PARAMETER) {
    1e0e:	81 34       	cpi	r24, 0x41	; 65
    1e10:	51 f4       	brne	.+20     	; 0x1e26 <main+0xa2>
      unsigned char which = getch();
    1e12:	b1 d0       	rcall	.+354    	; 0x1f76 <getch>
    1e14:	18 2f       	mov	r17, r24
      verifySpace();
    1e16:	c1 d0       	rcall	.+386    	; 0x1f9a <verifySpace>
       * Send optiboot version as "SW version"
       * Note that the references to memory are optimized away.
       */
      if (which == STK_SW_MINOR) {
        putch(optiboot_version & 0xFF);
      } else if (which == STK_SW_MAJOR) {
    1e18:	11 38       	cpi	r17, 0x81	; 129
    1e1a:	11 f0       	breq	.+4      	; 0x1e20 <main+0x9c>
      /*
       * Send optiboot version as "SW version"
       * Note that the references to memory are optimized away.
       */
      if (which == STK_SW_MINOR) {
        putch(optiboot_version & 0xFF);
    1e1c:	83 e0       	ldi	r24, 0x03	; 3
    1e1e:	01 c0       	rjmp	.+2      	; 0x1e22 <main+0x9e>
      } else if (which == STK_SW_MAJOR) {
        putch(optiboot_version >> 8);
    1e20:	88 e0       	ldi	r24, 0x08	; 8
    1e22:	a2 d0       	rcall	.+324    	; 0x1f68 <putch>
    1e24:	9e c0       	rjmp	.+316    	; 0x1f62 <main+0x1de>
         * other parameters - enough to keep Avrdude happy
         */
        putch(0x03);
      }
    }
    else if (ch == STK_SET_DEVICE) {
    1e26:	82 34       	cpi	r24, 0x42	; 66
    1e28:	11 f4       	brne	.+4      	; 0x1e2e <main+0xaa>
      // SET DEVICE is ignored
      getNch(20);
    1e2a:	84 e1       	ldi	r24, 0x14	; 20
    1e2c:	03 c0       	rjmp	.+6      	; 0x1e34 <main+0xb0>
    }
    else if (ch == STK_SET_DEVICE_EXT) {
    1e2e:	85 34       	cpi	r24, 0x45	; 69
    1e30:	19 f4       	brne	.+6      	; 0x1e38 <main+0xb4>
      // SET DEVICE EXT is ignored
      getNch(5);
    1e32:	85 e0       	ldi	r24, 0x05	; 5
    1e34:	ba d0       	rcall	.+372    	; 0x1faa <getNch>
    1e36:	95 c0       	rjmp	.+298    	; 0x1f62 <main+0x1de>
    }
    else if (ch == STK_LOAD_ADDRESS) {
    1e38:	85 35       	cpi	r24, 0x55	; 85
    1e3a:	39 f4       	brne	.+14     	; 0x1e4a <main+0xc6>
      // LOAD ADDRESS
      address.bytes[0] = getch();
    1e3c:	9c d0       	rcall	.+312    	; 0x1f76 <getch>
    1e3e:	c8 2f       	mov	r28, r24
      address.bytes[1] = getch();
    1e40:	9a d0       	rcall	.+308    	; 0x1f76 <getch>
    1e42:	d8 2f       	mov	r29, r24
      }
      else {
        RAMPZ &= 0xFE;
      }
#endif
      address.word *= 2; // Convert from word address to byte address
    1e44:	cc 0f       	add	r28, r28
    1e46:	dd 1f       	adc	r29, r29
    1e48:	8b c0       	rjmp	.+278    	; 0x1f60 <main+0x1dc>
      verifySpace();
    }
    else if (ch == STK_UNIVERSAL) {
    1e4a:	86 35       	cpi	r24, 0x56	; 86
    1e4c:	21 f4       	brne	.+8      	; 0x1e56 <main+0xd2>
        getNch(3);
        putch(0x00);
      }
#else
      // UNIVERSAL command is ignored
      getNch(4);
    1e4e:	84 e0       	ldi	r24, 0x04	; 4
    1e50:	ac d0       	rcall	.+344    	; 0x1faa <getNch>
      putch(0x00);
    1e52:	80 e0       	ldi	r24, 0x00	; 0
    1e54:	e6 cf       	rjmp	.-52     	; 0x1e22 <main+0x9e>
#endif
    }
    /* Write memory, length is big endian and is in bytes */
    else if (ch == STK_PROG_PAGE) {
    1e56:	84 36       	cpi	r24, 0x64	; 100
    1e58:	09 f0       	breq	.+2      	; 0x1e5c <main+0xd8>
    1e5a:	4c c0       	rjmp	.+152    	; 0x1ef4 <main+0x170>
      // PROGRAM PAGE - we support flash programming only, not EEPROM
      uint8_t desttype;
      uint8_t *bufPtr;
      pagelen_t savelength;

      GETLENGTH(length);
    1e5c:	8c d0       	rcall	.+280    	; 0x1f76 <getch>
    1e5e:	8b d0       	rcall	.+278    	; 0x1f76 <getch>
    1e60:	18 2f       	mov	r17, r24
      savelength = length;
      desttype = getch();
    1e62:	89 d0       	rcall	.+274    	; 0x1f76 <getch>
    1e64:	08 2f       	mov	r16, r24
    1e66:	81 2c       	mov	r8, r1
    1e68:	99 24       	eor	r9, r9
    1e6a:	93 94       	inc	r9

      // read a page worth of contents
      bufPtr = buff.bptr;
      do *bufPtr++ = getch();
    1e6c:	84 d0       	rcall	.+264    	; 0x1f76 <getch>
    1e6e:	f4 01       	movw	r30, r8
    1e70:	81 93       	st	Z+, r24
    1e72:	4f 01       	movw	r8, r30
      while (--length);
    1e74:	1e 13       	cpse	r17, r30
    1e76:	fa cf       	rjmp	.-12     	; 0x1e6c <main+0xe8>

      // Read command terminator, start reply
      verifySpace();
    1e78:	90 d0       	rcall	.+288    	; 0x1f9a <verifySpace>
    {
#endif
/*
 * AVR with 2-byte ISR Vectors and rjmp
 */
      if (address.word == rstVect0) {
    1e7a:	20 97       	sbiw	r28, 0x00	; 0
    1e7c:	f1 f4       	brne	.+60     	; 0x1eba <main+0x136>
        // This is the reset vector page. We need to live-patch
        // the code so the bootloader runs first.
        //
        // Move RESET vector to 'save' vector
        // Save jmp targets (for "Verify")
        rstVect0_sav = buff.bptr[rstVect0];
    1e7e:	30 91 00 01 	lds	r19, 0x0100	; 0x800100 <__RAM__+0x100>
    1e82:	30 93 04 02 	sts	0x0204, r19	; 0x800204 <__RAM__+0x204>
        rstVect1_sav = buff.bptr[rstVect1];
    1e86:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <__RAM__+0x101>
    1e8a:	20 93 05 02 	sts	0x0205, r18	; 0x800205 <__RAM__+0x205>
        // an RJMP instruction is 0b1100xxxx xxxxxxxx, so we should be able to
        // do math on the offsets without masking it off first.
        // Note that rjmp is relative to the already incremented PC, so the
        //  offset is one less than you might expect.
        buff.bptr[0] = vect.bytes[0]; // rjmp to start of bootloader
        buff.bptr[1] = vect.bytes[1] | 0xC0;  // make an "rjmp"
    1e8e:	a0 92 01 01 	sts	0x0101, r10	; 0x800101 <__RAM__+0x101>
#ifdef KeepBracesMatched
      {
#endif

        // Save old values for Verify
        saveVect0_sav = buff.bptr[saveVect0];
    1e92:	40 91 20 01 	lds	r20, 0x0120	; 0x800120 <__RAM__+0x120>
    1e96:	40 93 06 02 	sts	0x0206, r20	; 0x800206 <__RAM__+0x206>
        saveVect1_sav = buff.bptr[saveVect1];
    1e9a:	40 91 21 01 	lds	r20, 0x0121	; 0x800121 <__RAM__+0x121>
    1e9e:	40 93 07 02 	sts	0x0207, r20	; 0x800207 <__RAM__+0x207>

        vect.bytes[0] = rstVect0_sav;
    1ea2:	83 2f       	mov	r24, r19
        vect.bytes[1] = rstVect1_sav;
    1ea4:	92 2f       	mov	r25, r18
        vect.word = (vect.word-save_vect_num); //substract 'save' interrupt position
    1ea6:	40 97       	sbiw	r24, 0x10	; 16
        // Move RESET jmp target to 'save' vector
        buff.bptr[saveVect0] = vect.bytes[0];
    1ea8:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__RAM__+0x120>
        buff.bptr[saveVect1] = (vect.bytes[1] & 0x0F)| 0xC0;  // make an "rjmp"
    1eac:	89 2f       	mov	r24, r25
    1eae:	8f 70       	andi	r24, 0x0F	; 15
    1eb0:	80 6c       	ori	r24, 0xC0	; 192
    1eb2:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <__RAM__+0x121>
        // Add rjmp to bootloader at RESET vector
        vect.word = ((uint16_t)pre_main-1); // (main) is always <= 0x0FFF; no masking needed.
        buff.bptr[0] = vect.bytes[0]; // rjmp 0x1c00 instruction
    1eb6:	e0 92 00 01 	sts	0x0100, r14	; 0x800100 <__RAM__+0x100>
 * void writebuffer(memtype, buffer, address, length)
 */
static inline void writebuffer(int8_t memtype, addr16_t mybuff,
                               addr16_t address, pagelen_t len)
{
  switch (memtype) {
    1eba:	05 34       	cpi	r16, 0x45	; 69
    1ebc:	09 f4       	brne	.+2      	; 0x1ec0 <main+0x13c>
    1ebe:	ff cf       	rjmp	.-2      	; 0x1ebe <main+0x13a>
       * and we needed the space back.
       */
#ifdef FOURPAGEERASE
      if ((address.bytes[0] & ((SPM_PAGESIZE<<2)-1))==0) {
#endif
        __boot_page_erase_short(address.word);
    1ec0:	83 e0       	ldi	r24, 0x03	; 3
    1ec2:	fe 01       	movw	r30, r28
    1ec4:	87 bf       	out	0x37, r24	; 55
    1ec6:	e8 95       	spm
        boot_spm_busy_wait();
    1ec8:	07 b6       	in	r0, 0x37	; 55
    1eca:	00 fc       	sbrc	r0, 0
    1ecc:	fd cf       	rjmp	.-6      	; 0x1ec8 <main+0x144>
    1ece:	a0 e0       	ldi	r26, 0x00	; 0
    1ed0:	b1 e0       	ldi	r27, 0x01	; 1
    1ed2:	fe 01       	movw	r30, r28

      /*
       * Copy data from the buffer into the flash write buffer.
       */
      do {
        __boot_page_fill_short((uint16_t)(void*)addrPtr, *(mybuff.wptr++));
    1ed4:	8d 91       	ld	r24, X+
    1ed6:	9d 91       	ld	r25, X+
    1ed8:	0c 01       	movw	r0, r24
    1eda:	c7 be       	out	0x37, r12	; 55
    1edc:	e8 95       	spm
    1ede:	11 24       	eor	r1, r1
    1ee0:	32 96       	adiw	r30, 0x02	; 2
        addrPtr += 2;
      } while (len -= 2);
    1ee2:	1a 13       	cpse	r17, r26
    1ee4:	f7 cf       	rjmp	.-18     	; 0x1ed4 <main+0x150>

      /*
       * Actually Write the buffer to flash (and wait for it to finish.)
       */
      __boot_page_write_short(address.word);
    1ee6:	fe 01       	movw	r30, r28
    1ee8:	b7 be       	out	0x37, r11	; 55
    1eea:	e8 95       	spm
      boot_spm_busy_wait();
    1eec:	07 b6       	in	r0, 0x37	; 55
    1eee:	00 fc       	sbrc	r0, 0
    1ef0:	fd cf       	rjmp	.-6      	; 0x1eec <main+0x168>
    1ef2:	37 c0       	rjmp	.+110    	; 0x1f62 <main+0x1de>
      writebuffer(desttype, buff, address, savelength);


    }
/* Read memory block mode, length is big endian.  */
    else if (ch == STK_READ_PAGE) {
    1ef4:	84 37       	cpi	r24, 0x74	; 116
    1ef6:	39 f5       	brne	.+78     	; 0x1f46 <main+0x1c2>
      uint8_t desttype;
      GETLENGTH(length);
    1ef8:	3e d0       	rcall	.+124    	; 0x1f76 <getch>
    1efa:	3d d0       	rcall	.+122    	; 0x1f76 <getch>
    1efc:	d8 2e       	mov	r13, r24

      desttype = getch();
    1efe:	3b d0       	rcall	.+118    	; 0x1f76 <getch>

      verifySpace();
    1f00:	4c d0       	rcall	.+152    	; 0x1f9a <verifySpace>
    1f02:	8e 01       	movw	r16, r28
#endif
  default:
    do {
#ifdef VIRTUAL_BOOT_PARTITION
      // Undo vector patch in bottom page so verify passes
      if (address.word == rstVect0) ch = rstVect0_sav;
    1f04:	01 15       	cp	r16, r1
    1f06:	11 05       	cpc	r17, r1
    1f08:	19 f4       	brne	.+6      	; 0x1f10 <main+0x18c>
    1f0a:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <__RAM__+0x204>
    1f0e:	14 c0       	rjmp	.+40     	; 0x1f38 <main+0x1b4>
      else if (address.word == rstVect1) ch = rstVect1_sav;
    1f10:	01 30       	cpi	r16, 0x01	; 1
    1f12:	11 05       	cpc	r17, r1
    1f14:	19 f4       	brne	.+6      	; 0x1f1c <main+0x198>
    1f16:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <__RAM__+0x205>
    1f1a:	0e c0       	rjmp	.+28     	; 0x1f38 <main+0x1b4>
      else if (address.word == saveVect0) ch = saveVect0_sav;
    1f1c:	00 32       	cpi	r16, 0x20	; 32
    1f1e:	11 05       	cpc	r17, r1
    1f20:	19 f4       	brne	.+6      	; 0x1f28 <main+0x1a4>
    1f22:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <__RAM__+0x206>
    1f26:	08 c0       	rjmp	.+16     	; 0x1f38 <main+0x1b4>
      else if (address.word == saveVect1) ch = saveVect1_sav;
    1f28:	01 32       	cpi	r16, 0x21	; 33
    1f2a:	11 05       	cpc	r17, r1
    1f2c:	19 f4       	brne	.+6      	; 0x1f34 <main+0x1b0>
    1f2e:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <__RAM__+0x207>
    1f32:	02 c0       	rjmp	.+4      	; 0x1f38 <main+0x1b4>
      else ch = pgm_read_byte_near(address.bptr);
    1f34:	f8 01       	movw	r30, r16
    1f36:	84 91       	lpm	r24, Z
      __asm__ ("  elpm %0,Z+\n" : "=r" (ch), "=z" (address.bptr): "1" (address));
#else
      // read a Flash byte and increment the address
      __asm__ ("  lpm %0,Z+\n" : "=r" (ch), "=z" (address.bptr): "1" (address));
#endif
      putch(ch);
    1f38:	17 d0       	rcall	.+46     	; 0x1f68 <putch>
    } while (--length);
    1f3a:	da 94       	dec	r13
    1f3c:	0f 5f       	subi	r16, 0xFF	; 255
    1f3e:	1f 4f       	sbci	r17, 0xFF	; 255
    1f40:	d1 10       	cpse	r13, r1
    1f42:	e0 cf       	rjmp	.-64     	; 0x1f04 <main+0x180>
    1f44:	0e c0       	rjmp	.+28     	; 0x1f62 <main+0x1de>

      read_mem(desttype, address, length);
    }

/* Get device signature bytes  */
    else if (ch == STK_READ_SIGN) {
    1f46:	85 37       	cpi	r24, 0x75	; 117
    1f48:	39 f4       	brne	.+14     	; 0x1f58 <main+0x1d4>
      // READ SIGN - return what Avrdude wants to hear
      verifySpace();
    1f4a:	27 d0       	rcall	.+78     	; 0x1f9a <verifySpace>
      putch(SIGNATURE_0);
    1f4c:	8e e1       	ldi	r24, 0x1E	; 30
    1f4e:	0c d0       	rcall	.+24     	; 0x1f68 <putch>
      putch(SIGNATURE_1);
    1f50:	83 e9       	ldi	r24, 0x93	; 147
    1f52:	0a d0       	rcall	.+20     	; 0x1f68 <putch>
      putch(SIGNATURE_2);
    1f54:	87 e8       	ldi	r24, 0x87	; 135
    1f56:	65 cf       	rjmp	.-310    	; 0x1e22 <main+0x9e>
    }
    else if (ch == STK_LEAVE_PROGMODE) { /* 'Q' */
    1f58:	81 35       	cpi	r24, 0x51	; 81
    1f5a:	11 f4       	brne	.+4      	; 0x1f60 <main+0x1dc>
      // Adaboot no-wait mod
      watchdogConfig(WATCHDOG_16MS);
    1f5c:	88 e0       	ldi	r24, 0x08	; 8
    1f5e:	17 d0       	rcall	.+46     	; 0x1f8e <watchdogConfig>
      verifySpace();
    }
    else {
      // This covers the response to commands like STK_ENTER_PROGMODE
      verifySpace();
    1f60:	1c d0       	rcall	.+56     	; 0x1f9a <verifySpace>
    }
    putch(STK_OK);
    1f62:	80 e1       	ldi	r24, 0x10	; 16
    1f64:	01 d0       	rcall	.+2      	; 0x1f68 <putch>
  }
    1f66:	52 cf       	rjmp	.-348    	; 0x1e0c <main+0x88>

00001f68 <putch>:
#else //not RS485
  while (!(UART_SRA & _BV(UDRE0))) {  /* Spin */ }
  UART_UDR = ch;
#endif
#else //is LIN UART
  while (!(LINSIR & _BV(LTXOK)))   {  /* Spin */ }
    1f68:	90 91 c9 00 	lds	r25, 0x00C9	; 0x8000c9 <__RAM__+0xc9>
    1f6c:	91 ff       	sbrs	r25, 1
    1f6e:	fc cf       	rjmp	.-8      	; 0x1f68 <putch>
  UART_UDR = ch;
    1f70:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <__RAM__+0xd2>
    1f74:	08 95       	ret

00001f76 <getch>:
     * don't care that an invalid char is returned...)
     */
    watchdogReset();
  }
#else
  while (!(LINSIR & _BV(LRXOK)))  {  /* Spin */ }
    1f76:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <__RAM__+0xc9>
    1f7a:	80 ff       	sbrs	r24, 0
    1f7c:	fc cf       	rjmp	.-8      	; 0x1f76 <getch>
  if (!(LINSIR & _BV(LFERR))) {
    1f7e:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <__RAM__+0xc9>
    1f82:	84 fd       	sbrc	r24, 4
    1f84:	01 c0       	rjmp	.+2      	; 0x1f88 <getch+0x12>
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
    1f86:	a8 95       	wdr
  while (!(LINSIR & _BV(LRXOK)))  {  /* Spin */ }
  if (!(LINSIR & _BV(LFERR))) {
    watchdogReset();  /* Eventually abort if wrong speed */
  }
#endif
  ch = UART_UDR;
    1f88:	80 91 d2 00 	lds	r24, 0x00D2	; 0x8000d2 <__RAM__+0xd2>
#if LED_DATA_FLASH
  toggle_led();
#endif

  return ch;
}
    1f8c:	08 95       	ret

00001f8e <watchdogConfig>:
void watchdogConfig(uint8_t x) {
#ifdef WDCE //does it have a Watchdog Change Enable?
#ifdef WDTCSR
  WDTCSR = _BV(WDCE) | _BV(WDE);
#else
  WDTCR= _BV(WDCE) | _BV(WDE);
    1f8e:	e0 e6       	ldi	r30, 0x60	; 96
    1f90:	f0 e0       	ldi	r31, 0x00	; 0
    1f92:	98 e1       	ldi	r25, 0x18	; 24
    1f94:	90 83       	st	Z, r25
#endif

#ifdef WDTCSR
  WDTCSR = x;
#else
  WDTCR= x;
    1f96:	80 83       	st	Z, r24
    1f98:	08 95       	ret

00001f9a <verifySpace>:
  do getch(); while (--count);
  verifySpace();
}

void verifySpace() {
  if (getch() != CRC_EOP) {
    1f9a:	ed df       	rcall	.-38     	; 0x1f76 <getch>
    1f9c:	80 32       	cpi	r24, 0x20	; 32
    1f9e:	19 f0       	breq	.+6      	; 0x1fa6 <verifySpace+0xc>
    watchdogConfig(WATCHDOG_16MS);    // shorten WD timeout
    1fa0:	88 e0       	ldi	r24, 0x08	; 8
    1fa2:	f5 df       	rcall	.-22     	; 0x1f8e <watchdogConfig>
    1fa4:	ff cf       	rjmp	.-2      	; 0x1fa4 <verifySpace+0xa>
    while (1)                         // and busy-loop so that WD causes
      ;                               //  a reset and app start.
  }
  putch(STK_INSYNC);
    1fa6:	84 e1       	ldi	r24, 0x14	; 20
    1fa8:	df cf       	rjmp	.-66     	; 0x1f68 <putch>

00001faa <getNch>:
    ::[count] "M" (UART_B_VALUE)
    );
}
#endif

void getNch(uint8_t count) {
    1faa:	cf 93       	push	r28
    1fac:	c8 2f       	mov	r28, r24
  do getch(); while (--count);
    1fae:	e3 df       	rcall	.-58     	; 0x1f76 <getch>
    1fb0:	c1 50       	subi	r28, 0x01	; 1
    1fb2:	e9 f7       	brne	.-6      	; 0x1fae <getNch+0x4>
  verifySpace();
}
    1fb4:	cf 91       	pop	r28
}
#endif

void getNch(uint8_t count) {
  do getch(); while (--count);
  verifySpace();
    1fb6:	f1 cf       	rjmp	.-30     	; 0x1f9a <verifySpace>

00001fb8 <do_spm>:
 *   data=0 in WRITE
 */
static void do_spm(uint16_t address, uint8_t command, uint16_t data)  __attribute__ ((used));
static void do_spm(uint16_t address, uint8_t command, uint16_t data) {
  // Do spm stuff
  asm volatile (
    1fb8:	fc 01       	movw	r30, r24
    1fba:	0a 01       	movw	r0, r20
    1fbc:	67 bf       	out	0x37, r22	; 55
    1fbe:	e8 95       	spm
    1fc0:	11 24       	eor	r1, r1
    );

  // wait for spm to complete
  //   it doesn't have much sense for __BOOT_PAGE_FILL,
  //   but it doesn't hurt and saves some bytes on 'if'
  boot_spm_busy_wait();
    1fc2:	07 b6       	in	r0, 0x37	; 55
    1fc4:	00 fc       	sbrc	r0, 0
    1fc6:	fd cf       	rjmp	.-6      	; 0x1fc2 <do_spm+0xa>
  if ((command & (_BV(PGWRT)|_BV(PGERS))) && (data == 0) ) {
    // Reenable read access to flash
    __boot_rww_enable_short();
  }
#endif
}
    1fc8:	08 95       	ret
