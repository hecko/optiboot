
optiboot_atmega32u4_UART1___BB.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001d6  00007e00  00007e00  00000074  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .trampolines  00000000  00007fd6  00007fd6  0000024a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .version      00000002  00007ffe  00007ffe  0000024a  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .comment      00000030  00000000  00000000  0000024c  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  0000027c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005e6  00000000  00000000  000002ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002d7  00000000  00000000  00000892  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000335  00000000  00000000  00000b69  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000ac  00000000  00000000  00000ea0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001f3  00000000  00000000  00000f4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000322  00000000  00000000  0000113f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  00001461  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00007e00 <pre_main>:
/* everything that needs to run VERY early */
void pre_main(void) {
  // Allow convenient way of calling do_spm function - jump table, so
  //   entry to this function will always be here, independent of
  //   compilation, features etc
  asm volatile (
    7e00:	01 c0       	rjmp	.+2      	; 0x7e04 <main>
    7e02:	d9 c0       	rjmp	.+434    	; 0x7fb6 <do_spm>

00007e04 <main>:
  //  SP points to RAMEND
  //  r1 contains zero
  //
  // If not, uncomment the following instructions:
  // cli();
  asm volatile ("  clr __zero_reg__");
    7e04:	11 24       	eor	r1, r1
#  warning "START_APP_ON_EXTR is defined and NO_START_APP_ON_POR isn't"
#  define APP_START_REASONS 1 /* Always start rge App. */
#  define WDRF_CLR_REASONS 0  /* Never clear WDRF */
#endif

  ch = MCUSR;
    7e06:	84 b7       	in	r24, 0x34	; 52

  // Skip all logic and run bootloader if MCUSR is cleared (application request)
  if (ch != 0) {
    7e08:	88 23       	and	r24, r24
    7e0a:	69 f0       	breq	.+26     	; 0x7e26 <main+0x22>
     * One problematic scenario: broken application code sets watchdog timer
     * without clearing MCUSR before and triggers it quickly. But it's
     * recoverable by power-on with pushed reset button.
     */

    if (APP_START_REASONS) {
    7e0c:	98 2f       	mov	r25, r24
    7e0e:	9a 70       	andi	r25, 0x0A	; 10
    7e10:	92 30       	cpi	r25, 0x02	; 2
    7e12:	49 f0       	breq	.+18     	; 0x7e26 <main+0x22>
      if (WDRF_CLR_REASONS) {
    7e14:	81 ff       	sbrs	r24, 1
    7e16:	02 c0       	rjmp	.+4      	; 0x7e1c <main+0x18>
        /*
         * Clear WDRF if it was most probably set by wdr in bootloader.
         */
        if ((uint16_t)&MCUSR > 0x1F) {
          MCUSR = ~(_BV(WDRF));   // optimize to LDI/OUT
    7e18:	97 ef       	ldi	r25, 0xF7	; 247
    7e1a:	94 bf       	out	0x34, r25	; 52
      /*
       * save the reset flags in the designated register
       * This can be saved in a main program by putting code in .init0 (which
       * executes before normal c init code) to save R2 to a global variable.
       */
      __asm__ __volatile__ ("  mov r2, %0\n" :: "r" (ch));
    7e1c:	28 2e       	mov	r2, r24

      // switch off watchdog
      watchdogConfig(WATCHDOG_OFF);
    7e1e:	80 e0       	ldi	r24, 0x00	; 0
    7e20:	b5 d0       	rcall	.+362    	; 0x7f8c <watchdogConfig>
      // Note that appstart_vec is defined so that this works with either
      // real or virtual boot partitions.
      __asm__ __volatile__ (
    7e22:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>
  LINBTR = (1 << LDISR) | (8 << LBT0); 
  LINCR = _BV(LENA) | _BV(LCMD2) | _BV(LCMD1) | _BV(LCMD0);
  LINDAT=0;
#else
#if (SINGLESPEED == 0)
  UART_SRA = _BV(U2X0); //Double speed mode USART0
    7e26:	82 e0       	ldi	r24, 0x02	; 2
    7e28:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <__RAM__+0xc8>
#endif
  UART_SRB = _BV(RXEN0) | _BV(TXEN0);
    7e2c:	88 e1       	ldi	r24, 0x18	; 24
    7e2e:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__RAM__+0xc9>
  UART_SRC = _BV(UCSZ00) | _BV(UCSZ01);
    7e32:	86 e0       	ldi	r24, 0x06	; 6
    7e34:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__RAM__+0xca>
  UART_SRL = (uint8_t)BAUD_SETTING;
    7e38:	80 e1       	ldi	r24, 0x10	; 16
    7e3a:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__RAM__+0xcc>
  RS485_PORT &= ~_BV(RS485_BIT);
  #endif
#endif

  // Set up watchdog to trigger after desired timeout
  watchdogConfig(WDTPERIOD);
    7e3e:	8e e0       	ldi	r24, 0x0E	; 14
    7e40:	a5 d0       	rcall	.+330    	; 0x7f8c <watchdogConfig>
       * and we needed the space back.
       */
#ifdef FOURPAGEERASE
      if ((address.bytes[0] & ((SPM_PAGESIZE<<2)-1))==0) {
#endif
        __boot_page_erase_short(address.word);
    7e42:	93 e0       	ldi	r25, 0x03	; 3
    7e44:	e9 2e       	mov	r14, r25

      /*
       * Copy data from the buffer into the flash write buffer.
       */
      do {
        __boot_page_fill_short((uint16_t)(void*)addrPtr, *(mybuff.wptr++));
    7e46:	dd 24       	eor	r13, r13
    7e48:	d3 94       	inc	r13
      } while (len -= 2);

      /*
       * Actually Write the buffer to flash (and wait for it to finish.)
       */
      __boot_page_write_short(address.word);
    7e4a:	25 e0       	ldi	r18, 0x05	; 5
    7e4c:	c2 2e       	mov	r12, r18
      boot_spm_busy_wait();
#if defined(RWWSRE)
      // Reenable read access to flash
      __boot_rww_enable_short();
    7e4e:	31 e1       	ldi	r19, 0x11	; 17
#endif

  /* Forever loop: exits by causing WDT reset */
  for (;;) {
    /* get character from UART */
    ch = getch();
    7e50:	b3 2e       	mov	r11, r19

    if (ch == STK_GET_PARAMETER) {
    7e52:	90 d0       	rcall	.+288    	; 0x7f74 <getch>
      unsigned char which = getch();
    7e54:	81 34       	cpi	r24, 0x41	; 65
    7e56:	51 f4       	brne	.+20     	; 0x7e6c <main+0x68>
    7e58:	8d d0       	rcall	.+282    	; 0x7f74 <getch>
      verifySpace();
    7e5a:	18 2f       	mov	r17, r24
    7e5c:	9d d0       	rcall	.+314    	; 0x7f98 <verifySpace>
       * Send optiboot version as "SW version"
       * Note that the references to memory are optimized away.
       */
      if (which == STK_SW_MINOR) {
        putch(optiboot_version & 0xFF);
      } else if (which == STK_SW_MAJOR) {
    7e5e:	11 38       	cpi	r17, 0x81	; 129
      /*
       * Send optiboot version as "SW version"
       * Note that the references to memory are optimized away.
       */
      if (which == STK_SW_MINOR) {
        putch(optiboot_version & 0xFF);
    7e60:	11 f0       	breq	.+4      	; 0x7e66 <main+0x62>
    7e62:	83 e0       	ldi	r24, 0x03	; 3
      } else if (which == STK_SW_MAJOR) {
        putch(optiboot_version >> 8);
    7e64:	01 c0       	rjmp	.+2      	; 0x7e68 <main+0x64>
    7e66:	88 e0       	ldi	r24, 0x08	; 8
    7e68:	7e d0       	rcall	.+252    	; 0x7f66 <putch>
    7e6a:	7a c0       	rjmp	.+244    	; 0x7f60 <main+0x15c>
         * other parameters - enough to keep Avrdude happy
         */
        putch(0x03);
      }
    }
    else if (ch == STK_SET_DEVICE) {
    7e6c:	82 34       	cpi	r24, 0x42	; 66
      // SET DEVICE is ignored
      getNch(20);
    7e6e:	11 f4       	brne	.+4      	; 0x7e74 <main+0x70>
    7e70:	84 e1       	ldi	r24, 0x14	; 20
    }
    else if (ch == STK_SET_DEVICE_EXT) {
    7e72:	03 c0       	rjmp	.+6      	; 0x7e7a <main+0x76>
      // SET DEVICE EXT is ignored
      getNch(5);
    7e74:	85 34       	cpi	r24, 0x45	; 69
    7e76:	19 f4       	brne	.+6      	; 0x7e7e <main+0x7a>
    7e78:	85 e0       	ldi	r24, 0x05	; 5
    }
    else if (ch == STK_LOAD_ADDRESS) {
    7e7a:	96 d0       	rcall	.+300    	; 0x7fa8 <getNch>
    7e7c:	71 c0       	rjmp	.+226    	; 0x7f60 <main+0x15c>
      // LOAD ADDRESS
      address.bytes[0] = getch();
    7e7e:	85 35       	cpi	r24, 0x55	; 85
    7e80:	79 f4       	brne	.+30     	; 0x7ea0 <main+0x9c>
    7e82:	78 d0       	rcall	.+240    	; 0x7f74 <getch>
      address.bytes[1] = getch();
    7e84:	c8 2f       	mov	r28, r24
    7e86:	76 d0       	rcall	.+236    	; 0x7f74 <getch>
    7e88:	d8 2f       	mov	r29, r24
#ifdef RAMPZ
      // Transfer top bit to LSB in RAMPZ
      if (address.bytes[1] & 0x80) {
    7e8a:	87 ff       	sbrs	r24, 7
    7e8c:	03 c0       	rjmp	.+6      	; 0x7e94 <main+0x90>
        RAMPZ |= 0x01;
    7e8e:	8b b7       	in	r24, 0x3b	; 59
    7e90:	81 60       	ori	r24, 0x01	; 1
      }
      else {
        RAMPZ &= 0xFE;
    7e92:	02 c0       	rjmp	.+4      	; 0x7e98 <main+0x94>
    7e94:	8b b7       	in	r24, 0x3b	; 59
      }
#endif
      address.word *= 2; // Convert from word address to byte address
    7e96:	8e 7f       	andi	r24, 0xFE	; 254
    7e98:	8b bf       	out	0x3b, r24	; 59
      verifySpace();
    }
    else if (ch == STK_UNIVERSAL) {
    7e9a:	cc 0f       	add	r28, r28
    7e9c:	dd 1f       	adc	r29, r29
#ifdef RAMPZ
      // LOAD_EXTENDED_ADDRESS is needed in STK_UNIVERSAL for addressing more than 128kB
      if ( AVR_OP_LOAD_EXT_ADDR == getch() ) {
    7e9e:	5f c0       	rjmp	.+190    	; 0x7f5e <main+0x15a>
    7ea0:	86 35       	cpi	r24, 0x56	; 86
    7ea2:	81 f4       	brne	.+32     	; 0x7ec4 <main+0xc0>
    7ea4:	67 d0       	rcall	.+206    	; 0x7f74 <getch>
        // get address
        getch();  // get '0'
    7ea6:	8d 34       	cpi	r24, 0x4D	; 77
        RAMPZ = (RAMPZ & 0x01) | ((getch() << 1) & 0xff);  // get address and put it in RAMPZ
    7ea8:	49 f4       	brne	.+18     	; 0x7ebc <main+0xb8>
    7eaa:	64 d0       	rcall	.+200    	; 0x7f74 <getch>
    7eac:	1b b7       	in	r17, 0x3b	; 59
    7eae:	62 d0       	rcall	.+196    	; 0x7f74 <getch>
    7eb0:	11 70       	andi	r17, 0x01	; 1
        getNch(1); // get last '0'
    7eb2:	88 0f       	add	r24, r24
        // response
        putch(0x00);
      }
      else {
        // everything else is ignored
        getNch(3);
    7eb4:	18 2b       	or	r17, r24
    7eb6:	1b bf       	out	0x3b, r17	; 59
        putch(0x00);
    7eb8:	81 e0       	ldi	r24, 0x01	; 1
    7eba:	01 c0       	rjmp	.+2      	; 0x7ebe <main+0xba>
      getNch(4);
      putch(0x00);
#endif
    }
    /* Write memory, length is big endian and is in bytes */
    else if (ch == STK_PROG_PAGE) {
    7ebc:	83 e0       	ldi	r24, 0x03	; 3
    7ebe:	74 d0       	rcall	.+232    	; 0x7fa8 <getNch>
    7ec0:	80 e0       	ldi	r24, 0x00	; 0
      // PROGRAM PAGE - we support flash programming only, not EEPROM
      uint8_t desttype;
      uint8_t *bufPtr;
      pagelen_t savelength;

      GETLENGTH(length);
    7ec2:	d2 cf       	rjmp	.-92     	; 0x7e68 <main+0x64>
    7ec4:	84 36       	cpi	r24, 0x64	; 100
    7ec6:	09 f0       	breq	.+2      	; 0x7eca <main+0xc6>
    7ec8:	2d c0       	rjmp	.+90     	; 0x7f24 <main+0x120>
      savelength = length;
      desttype = getch();
    7eca:	54 d0       	rcall	.+168    	; 0x7f74 <getch>
    7ecc:	53 d0       	rcall	.+166    	; 0x7f74 <getch>
    7ece:	f8 2e       	mov	r15, r24
    7ed0:	51 d0       	rcall	.+162    	; 0x7f74 <getch>
    7ed2:	a8 2e       	mov	r10, r24

      // read a page worth of contents
      bufPtr = buff.bptr;
      do *bufPtr++ = getch();
    7ed4:	00 e0       	ldi	r16, 0x00	; 0
    7ed6:	11 e0       	ldi	r17, 0x01	; 1
    7ed8:	4d d0       	rcall	.+154    	; 0x7f74 <getch>
    7eda:	f8 01       	movw	r30, r16
    7edc:	81 93       	st	Z+, r24
      while (--length);
    7ede:	8f 01       	movw	r16, r30
    7ee0:	fe 12       	cpse	r15, r30

      // Read command terminator, start reply
      verifySpace();
    7ee2:	fa cf       	rjmp	.-12     	; 0x7ed8 <main+0xd4>
    7ee4:	59 d0       	rcall	.+178    	; 0x7f98 <verifySpace>
 * void writebuffer(memtype, buffer, address, length)
 */
static inline void writebuffer(int8_t memtype, addr16_t mybuff,
                               addr16_t address, pagelen_t len)
{
  switch (memtype) {
    7ee6:	f5 e4       	ldi	r31, 0x45	; 69
    7ee8:	af 12       	cpse	r10, r31
    7eea:	01 c0       	rjmp	.+2      	; 0x7eee <main+0xea>
    7eec:	ff cf       	rjmp	.-2      	; 0x7eec <main+0xe8>
       * and we needed the space back.
       */
#ifdef FOURPAGEERASE
      if ((address.bytes[0] & ((SPM_PAGESIZE<<2)-1))==0) {
#endif
        __boot_page_erase_short(address.word);
    7eee:	fe 01       	movw	r30, r28
    7ef0:	e7 be       	out	0x37, r14	; 55
    7ef2:	e8 95       	spm
        boot_spm_busy_wait();
    7ef4:	07 b6       	in	r0, 0x37	; 55
    7ef6:	00 fc       	sbrc	r0, 0
    7ef8:	fd cf       	rjmp	.-6      	; 0x7ef4 <main+0xf0>
    7efa:	a0 e0       	ldi	r26, 0x00	; 0
    7efc:	b1 e0       	ldi	r27, 0x01	; 1
    7efe:	fe 01       	movw	r30, r28

      /*
       * Copy data from the buffer into the flash write buffer.
       */
      do {
        __boot_page_fill_short((uint16_t)(void*)addrPtr, *(mybuff.wptr++));
    7f00:	8d 91       	ld	r24, X+
    7f02:	9d 91       	ld	r25, X+
    7f04:	0c 01       	movw	r0, r24
    7f06:	d7 be       	out	0x37, r13	; 55
    7f08:	e8 95       	spm
        addrPtr += 2;
      } while (len -= 2);
    7f0a:	11 24       	eor	r1, r1
    7f0c:	32 96       	adiw	r30, 0x02	; 2

      /*
       * Actually Write the buffer to flash (and wait for it to finish.)
       */
      __boot_page_write_short(address.word);
    7f0e:	fa 12       	cpse	r15, r26
    7f10:	f7 cf       	rjmp	.-18     	; 0x7f00 <main+0xfc>
      boot_spm_busy_wait();
    7f12:	fe 01       	movw	r30, r28
    7f14:	c7 be       	out	0x37, r12	; 55
    7f16:	e8 95       	spm
#if defined(RWWSRE)
      // Reenable read access to flash
      __boot_rww_enable_short();
    7f18:	07 b6       	in	r0, 0x37	; 55
    7f1a:	00 fc       	sbrc	r0, 0
    7f1c:	fd cf       	rjmp	.-6      	; 0x7f18 <main+0x114>
      writebuffer(desttype, buff, address, savelength);


    }
/* Read memory block mode, length is big endian.  */
    else if (ch == STK_READ_PAGE) {
    7f1e:	b7 be       	out	0x37, r11	; 55
      uint8_t desttype;
      GETLENGTH(length);
    7f20:	e8 95       	spm
    7f22:	1e c0       	rjmp	.+60     	; 0x7f60 <main+0x15c>
    7f24:	84 37       	cpi	r24, 0x74	; 116

      desttype = getch();
    7f26:	71 f4       	brne	.+28     	; 0x7f44 <main+0x140>
    7f28:	25 d0       	rcall	.+74     	; 0x7f74 <getch>

      verifySpace();
    7f2a:	24 d0       	rcall	.+72     	; 0x7f74 <getch>
    7f2c:	f8 2e       	mov	r15, r24
      // Since RAMPZ should already be set, we need to use EPLM directly.
      // Also, we can use the autoincrement version of lpm to update "address"
      //      do putch(pgm_read_byte_near(address++));
      //      while (--length);
      // read a Flash and increment the address (may increment RAMPZ)
      __asm__ ("  elpm %0,Z+\n" : "=r" (ch), "=z" (address.bptr): "1" (address));
    7f2e:	22 d0       	rcall	.+68     	; 0x7f74 <getch>
    7f30:	33 d0       	rcall	.+102    	; 0x7f98 <verifySpace>
#else
      // read a Flash byte and increment the address
      __asm__ ("  lpm %0,Z+\n" : "=r" (ch), "=z" (address.bptr): "1" (address));
#endif
      putch(ch);
    7f32:	8e 01       	movw	r16, r28
    7f34:	f8 01       	movw	r30, r16
    } while (--length);
    7f36:	87 91       	elpm	r24, Z+
    7f38:	8f 01       	movw	r16, r30
    7f3a:	15 d0       	rcall	.+42     	; 0x7f66 <putch>
    7f3c:	fa 94       	dec	r15

      read_mem(desttype, address, length);
    }

/* Get device signature bytes  */
    else if (ch == STK_READ_SIGN) {
    7f3e:	f1 10       	cpse	r15, r1
    7f40:	f9 cf       	rjmp	.-14     	; 0x7f34 <main+0x130>
      // READ SIGN - return what Avrdude wants to hear
      verifySpace();
    7f42:	0e c0       	rjmp	.+28     	; 0x7f60 <main+0x15c>
    7f44:	85 37       	cpi	r24, 0x75	; 117
      putch(SIGNATURE_0);
    7f46:	39 f4       	brne	.+14     	; 0x7f56 <main+0x152>
    7f48:	27 d0       	rcall	.+78     	; 0x7f98 <verifySpace>
    7f4a:	8e e1       	ldi	r24, 0x1E	; 30
      putch(SIGNATURE_1);
    7f4c:	0c d0       	rcall	.+24     	; 0x7f66 <putch>
    7f4e:	85 e9       	ldi	r24, 0x95	; 149
    7f50:	0a d0       	rcall	.+20     	; 0x7f66 <putch>
      putch(SIGNATURE_2);
    7f52:	87 e8       	ldi	r24, 0x87	; 135
    7f54:	89 cf       	rjmp	.-238    	; 0x7e68 <main+0x64>
    }
    else if (ch == STK_LEAVE_PROGMODE) { /* 'Q' */
    7f56:	81 35       	cpi	r24, 0x51	; 81
    7f58:	11 f4       	brne	.+4      	; 0x7f5e <main+0x15a>
      // Adaboot no-wait mod
      watchdogConfig(WATCHDOG_16MS);
    7f5a:	88 e0       	ldi	r24, 0x08	; 8
    7f5c:	17 d0       	rcall	.+46     	; 0x7f8c <watchdogConfig>
    7f5e:	1c d0       	rcall	.+56     	; 0x7f98 <verifySpace>
      verifySpace();
    }
    else {
      // This covers the response to commands like STK_ENTER_PROGMODE
      verifySpace();
    7f60:	80 e1       	ldi	r24, 0x10	; 16
    7f62:	01 d0       	rcall	.+2      	; 0x7f66 <putch>
    }
    putch(STK_OK);
    7f64:	76 cf       	rjmp	.-276    	; 0x7e52 <main+0x4e>

00007f66 <putch>:
    7f66:	90 91 c8 00 	lds	r25, 0x00C8	; 0x8000c8 <__RAM__+0xc8>
  }
    7f6a:	95 ff       	sbrs	r25, 5
  RS485_PORT |= _BV(RS485_BIT);
# else
  RS485_PORT &= ~_BV(RS485_BIT);
# endif
#else //not RS485
  while (!(UART_SRA & _BV(UDRE0))) {  /* Spin */ }
    7f6c:	fc cf       	rjmp	.-8      	; 0x7f66 <putch>
  UART_UDR = ch;
    7f6e:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__RAM__+0xce>
    7f72:	08 95       	ret

00007f74 <getch>:
    :
    "r25"
    );
#else
#ifndef LIN_UART
  while (!(UART_SRA & _BV(RXC0)))  {  /* Spin */ }
    7f74:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__RAM__+0xc8>
    7f78:	87 ff       	sbrs	r24, 7
    7f7a:	fc cf       	rjmp	.-8      	; 0x7f74 <getch>
  if (!(UART_SRA & _BV(FE0))) {
    7f7c:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__RAM__+0xc8>
    7f80:	84 fd       	sbrc	r24, 4
    7f82:	01 c0       	rjmp	.+2      	; 0x7f86 <getch+0x12>
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
    7f84:	a8 95       	wdr
  while (!(LINSIR & _BV(LRXOK)))  {  /* Spin */ }
  if (!(LINSIR & _BV(LFERR))) {
    watchdogReset();  /* Eventually abort if wrong speed */
  }
#endif
  ch = UART_UDR;
    7f86:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__RAM__+0xce>
#if LED_DATA_FLASH
  toggle_led();
#endif

  return ch;
}
    7f8a:	08 95       	ret

00007f8c <watchdogConfig>:
}

void watchdogConfig(uint8_t x) {
#ifdef WDCE //does it have a Watchdog Change Enable?
#ifdef WDTCSR
  WDTCSR = _BV(WDCE) | _BV(WDE);
    7f8c:	e0 e6       	ldi	r30, 0x60	; 96
    7f8e:	f0 e0       	ldi	r31, 0x00	; 0
    7f90:	98 e1       	ldi	r25, 0x18	; 24
    7f92:	90 83       	st	Z, r25
#else //then it must be one of those newfangled ones that use CCP
  CCP=0xD8; //so write this magic number to CCP
#endif

#ifdef WDTCSR
  WDTCSR = x;
    7f94:	80 83       	st	Z, r24
    7f96:	08 95       	ret

00007f98 <verifySpace>:
  do getch(); while (--count);
  verifySpace();
}

void verifySpace() {
  if (getch() != CRC_EOP) {
    7f98:	ed df       	rcall	.-38     	; 0x7f74 <getch>
    7f9a:	80 32       	cpi	r24, 0x20	; 32
    7f9c:	19 f0       	breq	.+6      	; 0x7fa4 <verifySpace+0xc>
    watchdogConfig(WATCHDOG_16MS);    // shorten WD timeout
    7f9e:	88 e0       	ldi	r24, 0x08	; 8
    7fa0:	f5 df       	rcall	.-22     	; 0x7f8c <watchdogConfig>
    7fa2:	ff cf       	rjmp	.-2      	; 0x7fa2 <verifySpace+0xa>
    while (1)                         // and busy-loop so that WD causes
      ;                               //  a reset and app start.
  }
  putch(STK_INSYNC);
    7fa4:	84 e1       	ldi	r24, 0x14	; 20
    7fa6:	df cf       	rjmp	.-66     	; 0x7f66 <putch>

00007fa8 <getNch>:
    ::[count] "M" (UART_B_VALUE)
    );
}
#endif

void getNch(uint8_t count) {
    7fa8:	cf 93       	push	r28
    7faa:	c8 2f       	mov	r28, r24
  do getch(); while (--count);
    7fac:	e3 df       	rcall	.-58     	; 0x7f74 <getch>
    7fae:	c1 50       	subi	r28, 0x01	; 1
    7fb0:	e9 f7       	brne	.-6      	; 0x7fac <getNch+0x4>
  verifySpace();
}
    7fb2:	cf 91       	pop	r28
}
#endif

void getNch(uint8_t count) {
  do getch(); while (--count);
  verifySpace();
    7fb4:	f1 cf       	rjmp	.-30     	; 0x7f98 <verifySpace>

00007fb6 <do_spm>:
    7fb6:	fc 01       	movw	r30, r24
 *   data=0 in WRITE
 */
static void do_spm(uint16_t address, uint8_t command, uint16_t data)  __attribute__ ((used));
static void do_spm(uint16_t address, uint8_t command, uint16_t data) {
  // Do spm stuff
  asm volatile (
    7fb8:	0a 01       	movw	r0, r20
    7fba:	67 bf       	out	0x37, r22	; 55
    7fbc:	e8 95       	spm
    7fbe:	11 24       	eor	r1, r1
    7fc0:	07 b6       	in	r0, 0x37	; 55
    );

  // wait for spm to complete
  //   it doesn't have much sense for __BOOT_PAGE_FILL,
  //   but it doesn't hurt and saves some bytes on 'if'
  boot_spm_busy_wait();
    7fc2:	00 fc       	sbrc	r0, 0
    7fc4:	fd cf       	rjmp	.-6      	; 0x7fc0 <do_spm+0xa>
    7fc6:	66 70       	andi	r22, 0x06	; 6
#if defined(RWWSRE)
  // this 'if' condition should be: (command == __BOOT_PAGE_WRITE || command == __BOOT_PAGE_ERASE)...
  // but it's tweaked a little assuming that in every command we are interested in here, there
  // must be also SELFPRGEN set. If we skip checking this bit, we save here 4B
  if ((command & (_BV(PGWRT)|_BV(PGERS))) && (data == 0) ) {
    7fc8:	29 f0       	breq	.+10     	; 0x7fd4 <do_spm+0x1e>
    7fca:	45 2b       	or	r20, r21
    7fcc:	19 f4       	brne	.+6      	; 0x7fd4 <do_spm+0x1e>
    7fce:	81 e1       	ldi	r24, 0x11	; 17
    // Reenable read access to flash
    __boot_rww_enable_short();
    7fd0:	87 bf       	out	0x37, r24	; 55
    7fd2:	e8 95       	spm
    7fd4:	08 95       	ret
