
optiboot_atmega1284p.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000030e  0001fc00  0001fc00  00000074  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .trampolines  00000000  0001ff0e  0001ff0e  00000382  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .version      00000002  0001fffe  0001fffe  00000382  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .comment      00000030  00000000  00000000  00000384  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000003b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000816  00000000  00000000  000003e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002ea  00000000  00000000  00000bfa  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003d8  00000000  00000000  00000ee4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000ac  00000000  00000000  000012bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000028a  00000000  00000000  00001368  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000439  00000000  00000000  000015f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  00001a2b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0001fc00 <pre_main>:
/* everything that needs to run VERY early */
void pre_main(void) {
  // Allow convenient way of calling do_spm function - jump table, so
  //   entry to this function will always be here, independent of
  //   compilation, features etc
  asm volatile (
   1fc00:	01 c0       	rjmp	.+2      	; 0x1fc04 <main>
   1fc02:	1b c1       	rjmp	.+566    	; 0x1fe3a <do_spm>

0001fc04 <main>:
  //  SP points to RAMEND
  //  r1 contains zero
  //
  // If not, uncomment the following instructions:
  // cli();
  asm volatile ("  clr __zero_reg__");
   1fc04:	11 24       	eor	r1, r1
#  warning "START_APP_ON_EXTR is defined and NO_START_APP_ON_POR isn't"
#  define APP_START_REASONS 1 /* Always start rge App. */
#  define WDRF_CLR_REASONS 0  /* Never clear WDRF */
#endif

  ch = MCUSR;
   1fc06:	84 b7       	in	r24, 0x34	; 52

  // Skip all logic and run bootloader if MCUSR is cleared (application request)
  if (ch != 0) {
   1fc08:	88 23       	and	r24, r24
   1fc0a:	69 f0       	breq	.+26     	; 0x1fc26 <main+0x22>
     * One problematic scenario: broken application code sets watchdog timer
     * without clearing MCUSR before and triggers it quickly. But it's
     * recoverable by power-on with pushed reset button.
     */

    if (APP_START_REASONS) {
   1fc0c:	98 2f       	mov	r25, r24
   1fc0e:	9a 70       	andi	r25, 0x0A	; 10
   1fc10:	92 30       	cpi	r25, 0x02	; 2
   1fc12:	49 f0       	breq	.+18     	; 0x1fc26 <main+0x22>
      if (WDRF_CLR_REASONS) {
   1fc14:	81 ff       	sbrs	r24, 1
   1fc16:	02 c0       	rjmp	.+4      	; 0x1fc1c <main+0x18>
        /*
         * Clear WDRF if it was most probably set by wdr in bootloader.
         */
        if ((uint16_t)&MCUSR > 0x1F) {
          MCUSR = ~(_BV(WDRF));   // optimize to LDI/OUT
   1fc18:	97 ef       	ldi	r25, 0xF7	; 247
   1fc1a:	94 bf       	out	0x34, r25	; 52
      /*
       * save the reset flags in the designated register
       * This can be saved in a main program by putting code in .init0 (which
       * executes before normal c init code) to save R2 to a global variable.
       */
      __asm__ __volatile__ ("  mov r2, %0\n" :: "r" (ch));
   1fc1c:	28 2e       	mov	r2, r24

      // switch off watchdog
      watchdogConfig(WATCHDOG_OFF);
   1fc1e:	80 e0       	ldi	r24, 0x00	; 0
   1fc20:	f7 d0       	rcall	.+494    	; 0x1fe10 <watchdogConfig>
      // Note that appstart_vec is defined so that this works with either
      // real or virtual boot partitions.
      __asm__ __volatile__ (
   1fc22:	0c 94 00 00 	jmp	0	; 0x0 <__tmp_reg__>
#elif defined(__AVR_ATtiny25__)||defined(__AVR_ATtiny45__)||defined(__AVR_ATtiny85__)
  TCCR1 = 0x0E; //div 8196 - it's an 8-bit timer.
#elif defined(__AVR_ATtiny43__)
#error "LED flash for Tiny43 not yet supported"
#else
  TCCR1B = _BV(CS12) | _BV(CS10); // div 1024
   1fc26:	85 e0       	ldi	r24, 0x05	; 5
   1fc28:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__RAM__+0x81>
  LINBTR = (1 << LDISR) | (8 << LBT0); 
  LINCR = _BV(LENA) | _BV(LCMD2) | _BV(LCMD1) | _BV(LCMD0);
  LINDAT=0;
#else
#if (SINGLESPEED == 0)
  UART_SRA = _BV(U2X0); //Double speed mode USART0
   1fc2c:	82 e0       	ldi	r24, 0x02	; 2
   1fc2e:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__RAM__+0xc0>
#endif
  UART_SRB = _BV(RXEN0) | _BV(TXEN0);
   1fc32:	88 e1       	ldi	r24, 0x18	; 24
   1fc34:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__RAM__+0xc1>
  UART_SRC = _BV(UCSZ00) | _BV(UCSZ01);
   1fc38:	86 e0       	ldi	r24, 0x06	; 6
   1fc3a:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__RAM__+0xc2>
  UART_SRL = (uint8_t)BAUD_SETTING;
   1fc3e:	80 e1       	ldi	r24, 0x10	; 16
   1fc40:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__RAM__+0xc4>
  RS485_PORT &= ~_BV(RS485_BIT);
  #endif
#endif

  // Set up watchdog to trigger after desired timeout
  watchdogConfig(WDTPERIOD);
   1fc44:	8e e0       	ldi	r24, 0x0E	; 14
   1fc46:	e4 d0       	rcall	.+456    	; 0x1fe10 <watchdogConfig>

#if (LED_START_FLASHES > 0) || LED_DATA_FLASH || LED_START_ON
  /* Set LED pin as output */
  LED_DDR |= _BV(LED);
   1fc48:	20 9a       	sbi	0x04, 0	; 4
   1fc4a:	84 e0       	ldi	r24, 0x04	; 4
    TIFR = _BV(TOV1);
    while (!(TIFR & _BV(TOV1)));
#elif defined(__AVR_ATtiny43__)
#error "LED flash for Tiny43 not yet supported"
#else
    TCNT1 = -(F_CPU/(1024*16));
   1fc4c:	20 e3       	ldi	r18, 0x30	; 48
   1fc4e:	3c ef       	ldi	r19, 0xFC	; 252
    TIFR1 = _BV(TOV1);
   1fc50:	91 e0       	ldi	r25, 0x01	; 1
    TIFR = _BV(TOV1);
    while (!(TIFR & _BV(TOV1)));
#elif defined(__AVR_ATtiny43__)
#error "LED flash for Tiny43 not yet supported"
#else
    TCNT1 = -(F_CPU/(1024*16));
   1fc52:	30 93 85 00 	sts	0x0085, r19	; 0x800085 <__RAM__+0x85>
   1fc56:	20 93 84 00 	sts	0x0084, r18	; 0x800084 <__RAM__+0x84>
    TIFR1 = _BV(TOV1);
   1fc5a:	96 bb       	out	0x16, r25	; 22
    while (!(TIFR1 & _BV(TOV1)));
   1fc5c:	b0 9b       	sbis	0x16, 0	; 22
   1fc5e:	fe cf       	rjmp	.-4      	; 0x1fc5c <main+0x58>
  defined(__AVR_ATmega64__)   || defined(__AVR_ATmega128__)
  LED_PORT ^= _BV(LED);
#else
  // Newer AVRs can toggle by writing PINx.
  if (&LED_PIN <= &_SFR_IO8(0x31)) {  // "if" code optimizes away.
    LED_PIN |= _BV(LED); // becomes SBI on low ports (in theory: incorrectly)
   1fc60:	18 9a       	sbi	0x03, 0	; 3
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
   1fc62:	a8 95       	wdr
     *  by the UART hardware, avrdude sends several attempts in rather
     *  quick succession, some of which will be lost and cause us to
     *  get out of sync.  So if we see any data; stop blinking.
     */
#ifndef LIN_UART
    if (UART_SRA & _BV(RXC0))
   1fc64:	40 91 c0 00 	lds	r20, 0x00C0	; 0x8000c0 <__RAM__+0xc0>
   1fc68:	47 fd       	sbrc	r20, 7
   1fc6a:	02 c0       	rjmp	.+4      	; 0x1fc70 <main+0x6c>
   1fc6c:	81 50       	subi	r24, 0x01	; 1
#else
// This doesn't seem to work?
//    if ((UART_PIN & (1<<UART_RX_BIT)) == 0)
//      break;  // detect start bit on soft uart too.
#endif
  } while (--count);
   1fc6e:	89 f7       	brne	.-30     	; 0x1fc52 <main+0x4e>

      /*
       * Copy data from the buffer into the flash write buffer.
       */
      do {
        __boot_page_fill_short((uint16_t)(void*)addrPtr, *(mybuff.wptr++));
   1fc70:	ff 24       	eor	r15, r15
   1fc72:	f3 94       	inc	r15
       */
      __boot_page_write_short(address.word);
      boot_spm_busy_wait();
#if defined(RWWSRE)
      // Reenable read access to flash
      __boot_rww_enable_short();
   1fc74:	41 e1       	ldi	r20, 0x11	; 17
#endif

  /* Forever loop: exits by causing WDT reset */
  for (;;) {
    /* get character from UART */
    ch = getch();
   1fc76:	e4 2e       	mov	r14, r20

    if (ch == STK_GET_PARAMETER) {
   1fc78:	bf d0       	rcall	.+382    	; 0x1fdf8 <getch>
      unsigned char which = getch();
   1fc7a:	81 34       	cpi	r24, 0x41	; 65
   1fc7c:	51 f4       	brne	.+20     	; 0x1fc92 <main+0x8e>
   1fc7e:	bc d0       	rcall	.+376    	; 0x1fdf8 <getch>
      verifySpace();
   1fc80:	c8 2f       	mov	r28, r24
   1fc82:	cc d0       	rcall	.+408    	; 0x1fe1c <verifySpace>
       * Send optiboot version as "SW version"
       * Note that the references to memory are optimized away.
       */
      if (which == STK_SW_MINOR) {
        putch(optiboot_version & 0xFF);
      } else if (which == STK_SW_MAJOR) {
   1fc84:	c1 38       	cpi	r28, 0x81	; 129
      /*
       * Send optiboot version as "SW version"
       * Note that the references to memory are optimized away.
       */
      if (which == STK_SW_MINOR) {
        putch(optiboot_version & 0xFF);
   1fc86:	11 f0       	breq	.+4      	; 0x1fc8c <main+0x88>
   1fc88:	83 e0       	ldi	r24, 0x03	; 3
      } else if (which == STK_SW_MAJOR) {
        putch(optiboot_version >> 8);
   1fc8a:	01 c0       	rjmp	.+2      	; 0x1fc8e <main+0x8a>
   1fc8c:	88 e0       	ldi	r24, 0x08	; 8
   1fc8e:	ad d0       	rcall	.+346    	; 0x1fdea <putch>
   1fc90:	a9 c0       	rjmp	.+338    	; 0x1fde4 <main+0x1e0>
         * other parameters - enough to keep Avrdude happy
         */
        putch(0x03);
      }
    }
    else if (ch == STK_SET_DEVICE) {
   1fc92:	82 34       	cpi	r24, 0x42	; 66
      // SET DEVICE is ignored
      getNch(20);
   1fc94:	11 f4       	brne	.+4      	; 0x1fc9a <main+0x96>
   1fc96:	84 e1       	ldi	r24, 0x14	; 20
    }
    else if (ch == STK_SET_DEVICE_EXT) {
   1fc98:	03 c0       	rjmp	.+6      	; 0x1fca0 <main+0x9c>
      // SET DEVICE EXT is ignored
      getNch(5);
   1fc9a:	85 34       	cpi	r24, 0x45	; 69
   1fc9c:	19 f4       	brne	.+6      	; 0x1fca4 <main+0xa0>
   1fc9e:	85 e0       	ldi	r24, 0x05	; 5
    }
    else if (ch == STK_LOAD_ADDRESS) {
   1fca0:	c5 d0       	rcall	.+394    	; 0x1fe2c <getNch>
   1fca2:	a0 c0       	rjmp	.+320    	; 0x1fde4 <main+0x1e0>
      // LOAD ADDRESS
      address.bytes[0] = getch();
   1fca4:	85 35       	cpi	r24, 0x55	; 85
   1fca6:	79 f4       	brne	.+30     	; 0x1fcc6 <main+0xc2>
   1fca8:	a7 d0       	rcall	.+334    	; 0x1fdf8 <getch>
      address.bytes[1] = getch();
   1fcaa:	08 2f       	mov	r16, r24
   1fcac:	a5 d0       	rcall	.+330    	; 0x1fdf8 <getch>
   1fcae:	18 2f       	mov	r17, r24
#ifdef RAMPZ
      // Transfer top bit to LSB in RAMPZ
      if (address.bytes[1] & 0x80) {
   1fcb0:	87 ff       	sbrs	r24, 7
   1fcb2:	03 c0       	rjmp	.+6      	; 0x1fcba <main+0xb6>
        RAMPZ |= 0x01;
   1fcb4:	8b b7       	in	r24, 0x3b	; 59
   1fcb6:	81 60       	ori	r24, 0x01	; 1
      }
      else {
        RAMPZ &= 0xFE;
   1fcb8:	02 c0       	rjmp	.+4      	; 0x1fcbe <main+0xba>
   1fcba:	8b b7       	in	r24, 0x3b	; 59
      }
#endif
      address.word *= 2; // Convert from word address to byte address
   1fcbc:	8e 7f       	andi	r24, 0xFE	; 254
   1fcbe:	8b bf       	out	0x3b, r24	; 59
      verifySpace();
    }
    else if (ch == STK_UNIVERSAL) {
   1fcc0:	00 0f       	add	r16, r16
   1fcc2:	11 1f       	adc	r17, r17
#ifdef RAMPZ
      // LOAD_EXTENDED_ADDRESS is needed in STK_UNIVERSAL for addressing more than 128kB
      if ( AVR_OP_LOAD_EXT_ADDR == getch() ) {
   1fcc4:	8e c0       	rjmp	.+284    	; 0x1fde2 <main+0x1de>
   1fcc6:	86 35       	cpi	r24, 0x56	; 86
   1fcc8:	81 f4       	brne	.+32     	; 0x1fcea <main+0xe6>
   1fcca:	96 d0       	rcall	.+300    	; 0x1fdf8 <getch>
        // get address
        getch();  // get '0'
   1fccc:	8d 34       	cpi	r24, 0x4D	; 77
        RAMPZ = (RAMPZ & 0x01) | ((getch() << 1) & 0xff);  // get address and put it in RAMPZ
   1fcce:	49 f4       	brne	.+18     	; 0x1fce2 <main+0xde>
   1fcd0:	93 d0       	rcall	.+294    	; 0x1fdf8 <getch>
   1fcd2:	cb b7       	in	r28, 0x3b	; 59
   1fcd4:	91 d0       	rcall	.+290    	; 0x1fdf8 <getch>
   1fcd6:	c1 70       	andi	r28, 0x01	; 1
   1fcd8:	88 0f       	add	r24, r24
        getNch(1); // get last '0'
   1fcda:	c8 2b       	or	r28, r24
   1fcdc:	cb bf       	out	0x3b, r28	; 59
        // response
        putch(0x00);
      }
      else {
        // everything else is ignored
        getNch(3);
   1fcde:	81 e0       	ldi	r24, 0x01	; 1
   1fce0:	01 c0       	rjmp	.+2      	; 0x1fce4 <main+0xe0>
        putch(0x00);
   1fce2:	83 e0       	ldi	r24, 0x03	; 3
   1fce4:	a3 d0       	rcall	.+326    	; 0x1fe2c <getNch>
      getNch(4);
      putch(0x00);
#endif
    }
    /* Write memory, length is big endian and is in bytes */
    else if (ch == STK_PROG_PAGE) {
   1fce6:	80 e0       	ldi	r24, 0x00	; 0
   1fce8:	d2 cf       	rjmp	.-92     	; 0x1fc8e <main+0x8a>
   1fcea:	84 36       	cpi	r24, 0x64	; 100
      // PROGRAM PAGE - we support flash programming only, not EEPROM
      uint8_t desttype;
      uint8_t *bufPtr;
      pagelen_t savelength;

      GETLENGTH(length);
   1fcec:	09 f0       	breq	.+2      	; 0x1fcf0 <main+0xec>
   1fcee:	47 c0       	rjmp	.+142    	; 0x1fd7e <main+0x17a>
   1fcf0:	83 d0       	rcall	.+262    	; 0x1fdf8 <getch>
   1fcf2:	c8 2f       	mov	r28, r24
   1fcf4:	d0 e0       	ldi	r29, 0x00	; 0
   1fcf6:	dc 2f       	mov	r29, r28
   1fcf8:	cc 27       	eor	r28, r28
   1fcfa:	7e d0       	rcall	.+252    	; 0x1fdf8 <getch>
      savelength = length;
      desttype = getch();
   1fcfc:	c8 2b       	or	r28, r24
   1fcfe:	7c d0       	rcall	.+248    	; 0x1fdf8 <getch>
   1fd00:	98 2e       	mov	r9, r24
      // PROGRAM PAGE - we support flash programming only, not EEPROM
      uint8_t desttype;
      uint8_t *bufPtr;
      pagelen_t savelength;

      GETLENGTH(length);
   1fd02:	6e 01       	movw	r12, r28
      savelength = length;
      desttype = getch();
   1fd04:	a1 2c       	mov	r10, r1
   1fd06:	bb 24       	eor	r11, r11
   1fd08:	b3 94       	inc	r11

      // read a page worth of contents
      bufPtr = buff.bptr;
      do *bufPtr++ = getch();
   1fd0a:	76 d0       	rcall	.+236    	; 0x1fdf8 <getch>
   1fd0c:	f5 01       	movw	r30, r10
   1fd0e:	81 93       	st	Z+, r24
   1fd10:	5f 01       	movw	r10, r30
   1fd12:	f1 e0       	ldi	r31, 0x01	; 1
      while (--length);
   1fd14:	cf 1a       	sub	r12, r31
   1fd16:	d1 08       	sbc	r13, r1
   1fd18:	c1 f7       	brne	.-16     	; 0x1fd0a <main+0x106>

      // Read command terminator, start reply
      verifySpace();
   1fd1a:	80 d0       	rcall	.+256    	; 0x1fe1c <verifySpace>
   1fd1c:	85 e4       	ldi	r24, 0x45	; 69
 * void writebuffer(memtype, buffer, address, length)
 */
static inline void writebuffer(int8_t memtype, addr16_t mybuff,
                               addr16_t address, pagelen_t len)
{
  switch (memtype) {
   1fd1e:	98 12       	cpse	r9, r24
   1fd20:	10 c0       	rjmp	.+32     	; 0x1fd42 <main+0x13e>
   1fd22:	5e 01       	movw	r10, r28
   1fd24:	b3 94       	inc	r11
   1fd26:	68 01       	movw	r12, r16
   1fd28:	c0 e0       	ldi	r28, 0x00	; 0
   1fd2a:	d1 e0       	ldi	r29, 0x01	; 1
   1fd2c:	ca 15       	cp	r28, r10
  case 'E': // EEPROM
#if SUPPORT_EEPROM || BIGBOOT
    while (len--) {
   1fd2e:	db 05       	cpc	r29, r11
   1fd30:	09 f4       	brne	.+2      	; 0x1fd34 <main+0x130>
   1fd32:	58 c0       	rjmp	.+176    	; 0x1fde4 <main+0x1e0>
   1fd34:	69 91       	ld	r22, Y+
      eeprom_write_byte((address.bptr++), *(mybuff.bptr++));
   1fd36:	c6 01       	movw	r24, r12
   1fd38:	98 d0       	rcall	.+304    	; 0x1fe6a <eeprom_write_byte>
   1fd3a:	ff ef       	ldi	r31, 0xFF	; 255
   1fd3c:	cf 1a       	sub	r12, r31
   1fd3e:	df 0a       	sbc	r13, r31
   1fd40:	f5 cf       	rjmp	.-22     	; 0x1fd2c <main+0x128>
   1fd42:	83 e0       	ldi	r24, 0x03	; 3
   1fd44:	f8 01       	movw	r30, r16
       * and we needed the space back.
       */
#ifdef FOURPAGEERASE
      if ((address.bytes[0] & ((SPM_PAGESIZE<<2)-1))==0) {
#endif
        __boot_page_erase_short(address.word);
   1fd46:	87 bf       	out	0x37, r24	; 55
   1fd48:	e8 95       	spm
   1fd4a:	07 b6       	in	r0, 0x37	; 55
   1fd4c:	00 fc       	sbrc	r0, 0
        boot_spm_busy_wait();
   1fd4e:	fd cf       	rjmp	.-6      	; 0x1fd4a <main+0x146>
   1fd50:	a0 e0       	ldi	r26, 0x00	; 0
   1fd52:	b1 e0       	ldi	r27, 0x01	; 1
   1fd54:	f8 01       	movw	r30, r16
   1fd56:	8d 91       	ld	r24, X+
   1fd58:	9d 91       	ld	r25, X+

      /*
       * Copy data from the buffer into the flash write buffer.
       */
      do {
        __boot_page_fill_short((uint16_t)(void*)addrPtr, *(mybuff.wptr++));
   1fd5a:	0c 01       	movw	r0, r24
   1fd5c:	f7 be       	out	0x37, r15	; 55
   1fd5e:	e8 95       	spm
   1fd60:	11 24       	eor	r1, r1
   1fd62:	22 97       	sbiw	r28, 0x02	; 2
        addrPtr += 2;
      } while (len -= 2);
   1fd64:	32 96       	adiw	r30, 0x02	; 2
   1fd66:	20 97       	sbiw	r28, 0x00	; 0
   1fd68:	b1 f7       	brne	.-20     	; 0x1fd56 <main+0x152>

      /*
       * Actually Write the buffer to flash (and wait for it to finish.)
       */
      __boot_page_write_short(address.word);
   1fd6a:	85 e0       	ldi	r24, 0x05	; 5
   1fd6c:	f8 01       	movw	r30, r16
   1fd6e:	87 bf       	out	0x37, r24	; 55
      boot_spm_busy_wait();
   1fd70:	e8 95       	spm
   1fd72:	07 b6       	in	r0, 0x37	; 55
   1fd74:	00 fc       	sbrc	r0, 0
#if defined(RWWSRE)
      // Reenable read access to flash
      __boot_rww_enable_short();
   1fd76:	fd cf       	rjmp	.-6      	; 0x1fd72 <main+0x16e>
   1fd78:	e7 be       	out	0x37, r14	; 55
      writebuffer(desttype, buff, address, savelength);


    }
/* Read memory block mode, length is big endian.  */
    else if (ch == STK_READ_PAGE) {
   1fd7a:	e8 95       	spm
      uint8_t desttype;
      GETLENGTH(length);
   1fd7c:	33 c0       	rjmp	.+102    	; 0x1fde4 <main+0x1e0>
   1fd7e:	84 37       	cpi	r24, 0x74	; 116
   1fd80:	19 f5       	brne	.+70     	; 0x1fdc8 <main+0x1c4>
   1fd82:	3a d0       	rcall	.+116    	; 0x1fdf8 <getch>
   1fd84:	c8 2f       	mov	r28, r24
   1fd86:	d0 e0       	ldi	r29, 0x00	; 0
   1fd88:	dc 2f       	mov	r29, r28
   1fd8a:	cc 27       	eor	r28, r28
   1fd8c:	35 d0       	rcall	.+106    	; 0x1fdf8 <getch>
   1fd8e:	6e 01       	movw	r12, r28

      desttype = getch();
   1fd90:	c8 2a       	or	r12, r24
   1fd92:	32 d0       	rcall	.+100    	; 0x1fdf8 <getch>

      verifySpace();
   1fd94:	b8 2e       	mov	r11, r24
   1fd96:	42 d0       	rcall	.+132    	; 0x1fe1c <verifySpace>
   1fd98:	e8 01       	movw	r28, r16

static inline void read_mem(uint8_t memtype, addr16_t address, pagelen_t length)
{
  uint8_t ch;

  switch (memtype) {
   1fd9a:	f5 e4       	ldi	r31, 0x45	; 69
   1fd9c:	bf 12       	cpse	r11, r31

#if SUPPORT_EEPROM || BIGBOOT
  case 'E': // EEPROM
    do {
      putch(eeprom_read_byte((address.bptr++)));
   1fd9e:	0b c0       	rjmp	.+22     	; 0x1fdb6 <main+0x1b2>
   1fda0:	ce 01       	movw	r24, r28
   1fda2:	5b d0       	rcall	.+182    	; 0x1fe5a <eeprom_read_byte>
    } while (--length);
   1fda4:	22 d0       	rcall	.+68     	; 0x1fdea <putch>
   1fda6:	81 e0       	ldi	r24, 0x01	; 1
   1fda8:	c8 1a       	sub	r12, r24
   1fdaa:	d1 08       	sbc	r13, r1
   1fdac:	21 96       	adiw	r28, 0x01	; 1
   1fdae:	c1 14       	cp	r12, r1
      // Since RAMPZ should already be set, we need to use EPLM directly.
      // Also, we can use the autoincrement version of lpm to update "address"
      //      do putch(pgm_read_byte_near(address++));
      //      while (--length);
      // read a Flash and increment the address (may increment RAMPZ)
      __asm__ ("  elpm %0,Z+\n" : "=r" (ch), "=z" (address.bptr): "1" (address));
   1fdb0:	d1 04       	cpc	r13, r1
   1fdb2:	b1 f7       	brne	.-20     	; 0x1fda0 <main+0x19c>
   1fdb4:	17 c0       	rjmp	.+46     	; 0x1fde4 <main+0x1e0>
#else
      // read a Flash byte and increment the address
      __asm__ ("  lpm %0,Z+\n" : "=r" (ch), "=z" (address.bptr): "1" (address));
#endif
      putch(ch);
   1fdb6:	fe 01       	movw	r30, r28
   1fdb8:	87 91       	elpm	r24, Z+
    } while (--length);
   1fdba:	ef 01       	movw	r28, r30
   1fdbc:	16 d0       	rcall	.+44     	; 0x1fdea <putch>
   1fdbe:	e1 e0       	ldi	r30, 0x01	; 1
   1fdc0:	ce 1a       	sub	r12, r30
   1fdc2:	d1 08       	sbc	r13, r1

      read_mem(desttype, address, length);
    }

/* Get device signature bytes  */
    else if (ch == STK_READ_SIGN) {
   1fdc4:	c1 f7       	brne	.-16     	; 0x1fdb6 <main+0x1b2>
   1fdc6:	0e c0       	rjmp	.+28     	; 0x1fde4 <main+0x1e0>
      // READ SIGN - return what Avrdude wants to hear
      verifySpace();
   1fdc8:	85 37       	cpi	r24, 0x75	; 117
   1fdca:	39 f4       	brne	.+14     	; 0x1fdda <main+0x1d6>
      putch(SIGNATURE_0);
   1fdcc:	27 d0       	rcall	.+78     	; 0x1fe1c <verifySpace>
   1fdce:	8e e1       	ldi	r24, 0x1E	; 30
   1fdd0:	0c d0       	rcall	.+24     	; 0x1fdea <putch>
      putch(SIGNATURE_1);
   1fdd2:	87 e9       	ldi	r24, 0x97	; 151
   1fdd4:	0a d0       	rcall	.+20     	; 0x1fdea <putch>
   1fdd6:	85 e0       	ldi	r24, 0x05	; 5
      putch(SIGNATURE_2);
   1fdd8:	5a cf       	rjmp	.-332    	; 0x1fc8e <main+0x8a>
   1fdda:	81 35       	cpi	r24, 0x51	; 81
    }
    else if (ch == STK_LEAVE_PROGMODE) { /* 'Q' */
   1fddc:	11 f4       	brne	.+4      	; 0x1fde2 <main+0x1de>
   1fdde:	88 e0       	ldi	r24, 0x08	; 8
      // Adaboot no-wait mod
      watchdogConfig(WATCHDOG_16MS);
   1fde0:	17 d0       	rcall	.+46     	; 0x1fe10 <watchdogConfig>
   1fde2:	1c d0       	rcall	.+56     	; 0x1fe1c <verifySpace>
   1fde4:	80 e1       	ldi	r24, 0x10	; 16
      verifySpace();
    }
    else {
      // This covers the response to commands like STK_ENTER_PROGMODE
      verifySpace();
   1fde6:	01 d0       	rcall	.+2      	; 0x1fdea <putch>
   1fde8:	47 cf       	rjmp	.-370    	; 0x1fc78 <main+0x74>

0001fdea <putch>:
    }
    putch(STK_OK);
   1fdea:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__RAM__+0xc0>
   1fdee:	95 ff       	sbrs	r25, 5
  }
   1fdf0:	fc cf       	rjmp	.-8      	; 0x1fdea <putch>
# else
  RS485_PORT &= ~_BV(RS485_BIT);
# endif
#else //not RS485
  while (!(UART_SRA & _BV(UDRE0))) {  /* Spin */ }
  UART_UDR = ch;
   1fdf2:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__RAM__+0xc6>
   1fdf6:	08 95       	ret

0001fdf8 <getch>:
    :
    "r25"
    );
#else
#ifndef LIN_UART
  while (!(UART_SRA & _BV(RXC0)))  {  /* Spin */ }
   1fdf8:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__RAM__+0xc0>
   1fdfc:	87 ff       	sbrs	r24, 7
   1fdfe:	fc cf       	rjmp	.-8      	; 0x1fdf8 <getch>
  if (!(UART_SRA & _BV(FE0))) {
   1fe00:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__RAM__+0xc0>
   1fe04:	84 fd       	sbrc	r24, 4
   1fe06:	01 c0       	rjmp	.+2      	; 0x1fe0a <getch+0x12>
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
   1fe08:	a8 95       	wdr
  while (!(LINSIR & _BV(LRXOK)))  {  /* Spin */ }
  if (!(LINSIR & _BV(LFERR))) {
    watchdogReset();  /* Eventually abort if wrong speed */
  }
#endif
  ch = UART_UDR;
   1fe0a:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__RAM__+0xc6>
#if LED_DATA_FLASH
  toggle_led();
#endif

  return ch;
}
   1fe0e:	08 95       	ret

0001fe10 <watchdogConfig>:
}

void watchdogConfig(uint8_t x) {
#ifdef WDCE //does it have a Watchdog Change Enable?
#ifdef WDTCSR
  WDTCSR = _BV(WDCE) | _BV(WDE);
   1fe10:	e0 e6       	ldi	r30, 0x60	; 96
   1fe12:	f0 e0       	ldi	r31, 0x00	; 0
   1fe14:	98 e1       	ldi	r25, 0x18	; 24
   1fe16:	90 83       	st	Z, r25
#else //then it must be one of those newfangled ones that use CCP
  CCP=0xD8; //so write this magic number to CCP
#endif

#ifdef WDTCSR
  WDTCSR = x;
   1fe18:	80 83       	st	Z, r24
   1fe1a:	08 95       	ret

0001fe1c <verifySpace>:
  do getch(); while (--count);
  verifySpace();
}

void verifySpace() {
  if (getch() != CRC_EOP) {
   1fe1c:	ed df       	rcall	.-38     	; 0x1fdf8 <getch>
   1fe1e:	80 32       	cpi	r24, 0x20	; 32
   1fe20:	19 f0       	breq	.+6      	; 0x1fe28 <verifySpace+0xc>
    watchdogConfig(WATCHDOG_16MS);    // shorten WD timeout
   1fe22:	88 e0       	ldi	r24, 0x08	; 8
   1fe24:	f5 df       	rcall	.-22     	; 0x1fe10 <watchdogConfig>
   1fe26:	ff cf       	rjmp	.-2      	; 0x1fe26 <verifySpace+0xa>
    while (1)                         // and busy-loop so that WD causes
      ;                               //  a reset and app start.
  }
  putch(STK_INSYNC);
   1fe28:	84 e1       	ldi	r24, 0x14	; 20
   1fe2a:	df cf       	rjmp	.-66     	; 0x1fdea <putch>

0001fe2c <getNch>:
    ::[count] "M" (UART_B_VALUE)
    );
}
#endif

void getNch(uint8_t count) {
   1fe2c:	cf 93       	push	r28
   1fe2e:	c8 2f       	mov	r28, r24
  do getch(); while (--count);
   1fe30:	e3 df       	rcall	.-58     	; 0x1fdf8 <getch>
   1fe32:	c1 50       	subi	r28, 0x01	; 1
   1fe34:	e9 f7       	brne	.-6      	; 0x1fe30 <getNch+0x4>
  verifySpace();
}
   1fe36:	cf 91       	pop	r28
}
#endif

void getNch(uint8_t count) {
  do getch(); while (--count);
  verifySpace();
   1fe38:	f1 cf       	rjmp	.-30     	; 0x1fe1c <verifySpace>

0001fe3a <do_spm>:
   1fe3a:	fc 01       	movw	r30, r24
 *   data=0 in WRITE
 */
static void do_spm(uint16_t address, uint8_t command, uint16_t data)  __attribute__ ((used));
static void do_spm(uint16_t address, uint8_t command, uint16_t data) {
  // Do spm stuff
  asm volatile (
   1fe3c:	0a 01       	movw	r0, r20
   1fe3e:	67 bf       	out	0x37, r22	; 55
   1fe40:	e8 95       	spm
   1fe42:	11 24       	eor	r1, r1
   1fe44:	07 b6       	in	r0, 0x37	; 55
    );

  // wait for spm to complete
  //   it doesn't have much sense for __BOOT_PAGE_FILL,
  //   but it doesn't hurt and saves some bytes on 'if'
  boot_spm_busy_wait();
   1fe46:	00 fc       	sbrc	r0, 0
   1fe48:	fd cf       	rjmp	.-6      	; 0x1fe44 <do_spm+0xa>
   1fe4a:	66 70       	andi	r22, 0x06	; 6
#if defined(RWWSRE)
  // this 'if' condition should be: (command == __BOOT_PAGE_WRITE || command == __BOOT_PAGE_ERASE)...
  // but it's tweaked a little assuming that in every command we are interested in here, there
  // must be also SELFPRGEN set. If we skip checking this bit, we save here 4B
  if ((command & (_BV(PGWRT)|_BV(PGERS))) && (data == 0) ) {
   1fe4c:	29 f0       	breq	.+10     	; 0x1fe58 <do_spm+0x1e>
   1fe4e:	45 2b       	or	r20, r21
   1fe50:	19 f4       	brne	.+6      	; 0x1fe58 <do_spm+0x1e>
   1fe52:	81 e1       	ldi	r24, 0x11	; 17
    // Reenable read access to flash
    __boot_rww_enable_short();
   1fe54:	87 bf       	out	0x37, r24	; 55
   1fe56:	e8 95       	spm
   1fe58:	08 95       	ret

0001fe5a <eeprom_read_byte>:
   1fe5a:	f9 99       	sbic	0x1f, 1	; 31
   1fe5c:	fe cf       	rjmp	.-4      	; 0x1fe5a <eeprom_read_byte>
   1fe5e:	92 bd       	out	0x22, r25	; 34
   1fe60:	81 bd       	out	0x21, r24	; 33
   1fe62:	f8 9a       	sbi	0x1f, 0	; 31
   1fe64:	99 27       	eor	r25, r25
   1fe66:	80 b5       	in	r24, 0x20	; 32
   1fe68:	08 95       	ret

0001fe6a <eeprom_write_byte>:
   1fe6a:	26 2f       	mov	r18, r22

0001fe6c <eeprom_write_r18>:
   1fe6c:	f9 99       	sbic	0x1f, 1	; 31
   1fe6e:	fe cf       	rjmp	.-4      	; 0x1fe6c <eeprom_write_r18>
   1fe70:	1f ba       	out	0x1f, r1	; 31
   1fe72:	92 bd       	out	0x22, r25	; 34
   1fe74:	81 bd       	out	0x21, r24	; 33
   1fe76:	20 bd       	out	0x20, r18	; 32
   1fe78:	0f b6       	in	r0, 0x3f	; 63
   1fe7a:	f8 94       	cli
   1fe7c:	fa 9a       	sbi	0x1f, 2	; 31
   1fe7e:	f9 9a       	sbi	0x1f, 1	; 31
   1fe80:	0f be       	out	0x3f, r0	; 63
   1fe82:	01 96       	adiw	r24, 0x01	; 1
   1fe84:	08 95       	ret

0001fe86 <f_delimit>:
   1fe86:	ff                                                  .

0001fe87 <f_version>:
   1fe87:	56 65 72 73 69 6f 6e 3d 38 2e 33 00                 Version=8.3.

0001fe93 <f_device>:
   1fe93:	44 65 76 69 63 65 3d 61 74 6d 65 67 61 31 32 38     Device=atmega128
   1fea3:	34 70 00                                            4p.

0001fea6 <fF_CPU>:
   1fea6:	46 5f 43 50 55 3d 31 36 30 30 30 30 30 30 4c 00     F_CPU=16000000L.

0001feb6 <fBIGBOOT>:
   1feb6:	42 49 47 42 4f 4f 54 3d 31 00                       BIGBOOT=1.

0001fec0 <f_date>:
   1fec0:	42 75 69 6c 74 3a 4a 61 6e 20 20 33 20 32 30 32     Built:Jan  3 202
   1fed0:	33 3a 30 34 3a 30 33 3a 30 36 00                    3:04:03:06.

0001fedb <fUART>:
   1fedb:	55 41 52 54 3d 30 00                                UART=0.

0001fee2 <fBAUD_RATE>:
   1fee2:	42 41 55 44 5f 52 41 54 45 3d 31 31 35 32 30 30     BAUD_RATE=115200
	...

0001fef3 <f_LED>:
   1fef3:	4c 45 44 3d 42 30 00                                LED=B0.

0001fefa <fLED_START_FLASHES>:
   1fefa:	4c 45 44 5f 53 54 41 52 54 5f 46 4c 41 53 48 45     LED_START_FLASHE
   1ff0a:	53 3d 32 00                                         S=2.
