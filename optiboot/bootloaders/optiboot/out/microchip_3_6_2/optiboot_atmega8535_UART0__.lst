
optiboot_atmega8535_UART0__.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001c8  00001e00  00001e00  00000074  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .trampolines  00000000  00001fc8  00001fc8  0000023c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .version      00000002  00001ffe  00001ffe  0000023c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .comment      00000030  00000000  00000000  0000023e  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  0000026e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000634  00000000  00000000  0000029e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002f5  00000000  00000000  000008d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000360  00000000  00000000  00000bc7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000ac  00000000  00000000  00000f28  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000208  00000000  00000000  00000fd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002ff  00000000  00000000  000011dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000098  00000000  00000000  000014db  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00001e00 <pre_main>:
/* everything that needs to run VERY early */
void pre_main(void) {
  // Allow convenient way of calling do_spm function - jump table, so
  //   entry to this function will always be here, independent of
  //   compilation, features etc
  asm volatile (
    1e00:	01 c0       	rjmp	.+2      	; 0x1e04 <main>
    1e02:	d2 c0       	rjmp	.+420    	; 0x1fa8 <do_spm>

00001e04 <main>:
  //  SP points to RAMEND
  //  r1 contains zero
  //
  // If not, uncomment the following instructions:
  // cli();
  asm volatile ("  clr __zero_reg__");
    1e04:	11 24       	eor	r1, r1

#if defined(__AVR_ATmega8__) || defined(__AVR_ATmega8515__) ||  \
  defined(__AVR_ATmega8535__) || defined (__AVR_ATmega16__) ||  \
  defined (__AVR_ATmega32__) || defined (__AVR_ATmega64__)  ||  \
  defined (__AVR_ATmega128__) || defined (__AVR_ATmega162__)
  SP=RAMEND;  // This is done by hardware reset on newer chips
    1e06:	8f e5       	ldi	r24, 0x5F	; 95
    1e08:	92 e0       	ldi	r25, 0x02	; 2
    1e0a:	9e bf       	out	0x3e, r25	; 62
    1e0c:	8d bf       	out	0x3d, r24	; 61
#  warning "START_APP_ON_EXTR is defined and NO_START_APP_ON_POR isn't"
#  define APP_START_REASONS 1 /* Always start rge App. */
#  define WDRF_CLR_REASONS 0  /* Never clear WDRF */
#endif

  ch = MCUSR;
    1e0e:	84 b7       	in	r24, 0x34	; 52

  // Skip all logic and run bootloader if MCUSR is cleared (application request)
  if (ch != 0) {
    1e10:	88 23       	and	r24, r24
    1e12:	61 f0       	breq	.+24     	; 0x1e2c <main+0x28>
     * One problematic scenario: broken application code sets watchdog timer
     * without clearing MCUSR before and triggers it quickly. But it's
     * recoverable by power-on with pushed reset button.
     */

    if (APP_START_REASONS) {
    1e14:	98 2f       	mov	r25, r24
    1e16:	9a 70       	andi	r25, 0x0A	; 10
    1e18:	92 30       	cpi	r25, 0x02	; 2
    1e1a:	41 f0       	breq	.+16     	; 0x1e2c <main+0x28>
      if (WDRF_CLR_REASONS) {
    1e1c:	81 ff       	sbrs	r24, 1
    1e1e:	02 c0       	rjmp	.+4      	; 0x1e24 <main+0x20>
        /*
         * Clear WDRF if it was most probably set by wdr in bootloader.
         */
        if ((uint16_t)&MCUSR > 0x1F) {
          MCUSR = ~(_BV(WDRF));   // optimize to LDI/OUT
    1e20:	97 ef       	ldi	r25, 0xF7	; 247
    1e22:	94 bf       	out	0x34, r25	; 52
      /*
       * save the reset flags in the designated register
       * This can be saved in a main program by putting code in .init0 (which
       * executes before normal c init code) to save R2 to a global variable.
       */
      __asm__ __volatile__ ("  mov r2, %0\n" :: "r" (ch));
    1e24:	28 2e       	mov	r2, r24

      // switch off watchdog
      watchdogConfig(WATCHDOG_OFF);
    1e26:	80 e0       	ldi	r24, 0x00	; 0
    1e28:	ac d0       	rcall	.+344    	; 0x1f82 <watchdogConfig>
      // Note that appstart_vec is defined so that this works with either
      // real or virtual boot partitions.
      __asm__ __volatile__ (
    1e2a:	ea c0       	rjmp	.+468    	; 0x2000 <__VERSION_START__+0x2>
#elif defined(__AVR_ATtiny25__)||defined(__AVR_ATtiny45__)||defined(__AVR_ATtiny85__)
  TCCR1 = 0x0E; //div 8196 - it's an 8-bit timer.
#elif defined(__AVR_ATtiny43__)
#error "LED flash for Tiny43 not yet supported"
#else
  TCCR1B = _BV(CS12) | _BV(CS10); // div 1024
    1e2c:	85 e0       	ldi	r24, 0x05	; 5
    1e2e:	8e bd       	out	0x2e, r24	; 46
#if (SOFT_UART == 0)
#if defined(__AVR_ATmega8__) || defined (__AVR_ATmega8515__) || \
  defined (__AVR_ATmega8535__) || defined (__AVR_ATmega16__) || \
  defined (__AVR_ATmega32__)
#if (SINGLESPEED == 0)
  UCSRA = _BV(U2X); //Double speed mode USART
    1e30:	82 e0       	ldi	r24, 0x02	; 2
    1e32:	8b b9       	out	0x0b, r24	; 11
#endif //singlespeed
  UCSRB = _BV(RXEN) | _BV(TXEN);  // enable Rx & Tx
    1e34:	88 e1       	ldi	r24, 0x18	; 24
    1e36:	8a b9       	out	0x0a, r24	; 10
  UCSRC = _BV(URSEL) | _BV(UCSZ1) | _BV(UCSZ0);  // config USART; 8N1
    1e38:	86 e8       	ldi	r24, 0x86	; 134
    1e3a:	80 bd       	out	0x20, r24	; 32
  UBRRL = (uint8_t)BAUD_SETTING;
    1e3c:	80 e1       	ldi	r24, 0x10	; 16
    1e3e:	89 b9       	out	0x09, r24	; 9
  RS485_PORT &= ~_BV(RS485_BIT);
  #endif
#endif

  // Set up watchdog to trigger after desired timeout
  watchdogConfig(WDTPERIOD);
    1e40:	8e e0       	ldi	r24, 0x0E	; 14
    1e42:	9f d0       	rcall	.+318    	; 0x1f82 <watchdogConfig>

#if (LED_START_FLASHES > 0) || LED_DATA_FLASH || LED_START_ON
  /* Set LED pin as output */
  LED_DDR |= _BV(LED);
    1e44:	b8 9a       	sbi	0x17, 0	; 23
    1e46:	84 e0       	ldi	r24, 0x04	; 4
    TIFR = _BV(TOV1);
    while (!(TIFR & _BV(TOV1)));
#elif defined(__AVR_ATtiny43__)
#error "LED flash for Tiny43 not yet supported"
#else
    TCNT1 = -(F_CPU/(1024*16));
    1e48:	20 e3       	ldi	r18, 0x30	; 48
    1e4a:	3c ef       	ldi	r19, 0xFC	; 252
    TIFR1 = _BV(TOV1);
    1e4c:	44 e0       	ldi	r20, 0x04	; 4
static void inline toggle_led(void) {
#if defined(__AVR_ATmega8__)    || defined(__AVR_ATmega8515__) ||       \
  defined(__AVR_ATmega8535__) || defined(__AVR_ATmega16__)   ||         \
  defined(__AVR_ATmega162__)  || defined(__AVR_ATmega32__)   ||         \
  defined(__AVR_ATmega64__)   || defined(__AVR_ATmega128__)
  LED_PORT ^= _BV(LED);
    1e4e:	51 e0       	ldi	r21, 0x01	; 1
    TIFR = _BV(TOV1);
    while (!(TIFR & _BV(TOV1)));
#elif defined(__AVR_ATtiny43__)
#error "LED flash for Tiny43 not yet supported"
#else
    TCNT1 = -(F_CPU/(1024*16));
    1e50:	3d bd       	out	0x2d, r19	; 45
    1e52:	2c bd       	out	0x2c, r18	; 44
    TIFR1 = _BV(TOV1);
    1e54:	48 bf       	out	0x38, r20	; 56
    while (!(TIFR1 & _BV(TOV1)));
    1e56:	08 b6       	in	r0, 0x38	; 56
    1e58:	02 fe       	sbrs	r0, 2
    1e5a:	fd cf       	rjmp	.-6      	; 0x1e56 <main+0x52>
static void inline toggle_led(void) {
#if defined(__AVR_ATmega8__)    || defined(__AVR_ATmega8515__) ||       \
  defined(__AVR_ATmega8535__) || defined(__AVR_ATmega16__)   ||         \
  defined(__AVR_ATmega162__)  || defined(__AVR_ATmega32__)   ||         \
  defined(__AVR_ATmega64__)   || defined(__AVR_ATmega128__)
  LED_PORT ^= _BV(LED);
    1e5c:	98 b3       	in	r25, 0x18	; 24
    1e5e:	95 27       	eor	r25, r21
    1e60:	98 bb       	out	0x18, r25	; 24
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
    1e62:	a8 95       	wdr
     *  by the UART hardware, avrdude sends several attempts in rather
     *  quick succession, some of which will be lost and cause us to
     *  get out of sync.  So if we see any data; stop blinking.
     */
#ifndef LIN_UART
    if (UART_SRA & _BV(RXC0))
    1e64:	5f 99       	sbic	0x0b, 7	; 11
    1e66:	02 c0       	rjmp	.+4      	; 0x1e6c <main+0x68>
    1e68:	81 50       	subi	r24, 0x01	; 1
#else
// This doesn't seem to work?
//    if ((UART_PIN & (1<<UART_RX_BIT)) == 0)
//      break;  // detect start bit on soft uart too.
#endif
  } while (--count);
    1e6a:	91 f7       	brne	.-28     	; 0x1e50 <main+0x4c>

      /*
       * Copy data from the buffer into the flash write buffer.
       */
      do {
        __boot_page_fill_short((uint16_t)(void*)addrPtr, *(mybuff.wptr++));
    1e6c:	ee 24       	eor	r14, r14
    1e6e:	e3 94       	inc	r14
      } while (len -= 2);

      /*
       * Actually Write the buffer to flash (and wait for it to finish.)
       */
      __boot_page_write_short(address.word);
    1e70:	25 e0       	ldi	r18, 0x05	; 5
    1e72:	d2 2e       	mov	r13, r18
      boot_spm_busy_wait();
#if defined(RWWSRE)
      // Reenable read access to flash
      __boot_rww_enable_short();
    1e74:	31 e1       	ldi	r19, 0x11	; 17
    1e76:	c3 2e       	mov	r12, r19
#endif

  /* Forever loop: exits by causing WDT reset */
  for (;;) {
    /* get character from UART */
    ch = getch();
    1e78:	7d d0       	rcall	.+250    	; 0x1f74 <getch>

    if (ch == STK_GET_PARAMETER) {
    1e7a:	81 34       	cpi	r24, 0x41	; 65
    1e7c:	91 f4       	brne	.+36     	; 0x1ea2 <main+0x9e>
      unsigned char which = getch();
    1e7e:	7a d0       	rcall	.+244    	; 0x1f74 <getch>
    1e80:	18 2f       	mov	r17, r24
      verifySpace();
    1e82:	83 d0       	rcall	.+262    	; 0x1f8a <verifySpace>
       * Send optiboot version as "SW version"
       * Note that the references to memory are optimized away.
       */
      if (which == STK_SW_MINOR) {
        putch(optiboot_version & 0xFF);
      } else if (which == STK_SW_MAJOR) {
    1e84:	11 38       	cpi	r17, 0x81	; 129
    1e86:	51 f0       	breq	.+20     	; 0x1e9c <main+0x98>
      /*
       * Send optiboot version as "SW version"
       * Note that the references to memory are optimized away.
       */
      if (which == STK_SW_MINOR) {
        putch(optiboot_version & 0xFF);
    1e88:	83 e0       	ldi	r24, 0x03	; 3
    1e8a:	09 c0       	rjmp	.+18     	; 0x1e9e <main+0x9a>

      read_mem(desttype, address, length);
    }

/* Get device signature bytes  */
    else if (ch == STK_READ_SIGN) {
    1e8c:	85 37       	cpi	r24, 0x75	; 117
    1e8e:	09 f0       	breq	.+2      	; 0x1e92 <main+0x8e>
    1e90:	65 c0       	rjmp	.+202    	; 0x1f5c <main+0x158>
      // READ SIGN - return what Avrdude wants to hear
      verifySpace();
    1e92:	7b d0       	rcall	.+246    	; 0x1f8a <verifySpace>
      putch(SIGNATURE_0);
    1e94:	8e e1       	ldi	r24, 0x1E	; 30
    1e96:	6a d0       	rcall	.+212    	; 0x1f6c <putch>
      putch(SIGNATURE_1);
    1e98:	83 e9       	ldi	r24, 0x93	; 147
    1e9a:	68 d0       	rcall	.+208    	; 0x1f6c <putch>
       * Note that the references to memory are optimized away.
       */
      if (which == STK_SW_MINOR) {
        putch(optiboot_version & 0xFF);
      } else if (which == STK_SW_MAJOR) {
        putch(optiboot_version >> 8);
    1e9c:	88 e0       	ldi	r24, 0x08	; 8
    1e9e:	66 d0       	rcall	.+204    	; 0x1f6c <putch>
    1ea0:	62 c0       	rjmp	.+196    	; 0x1f66 <main+0x162>
         * other parameters - enough to keep Avrdude happy
         */
        putch(0x03);
      }
    }
    else if (ch == STK_SET_DEVICE) {
    1ea2:	82 34       	cpi	r24, 0x42	; 66
    1ea4:	11 f4       	brne	.+4      	; 0x1eaa <main+0xa6>
      // SET DEVICE is ignored
      getNch(20);
    1ea6:	84 e1       	ldi	r24, 0x14	; 20
    1ea8:	03 c0       	rjmp	.+6      	; 0x1eb0 <main+0xac>
    }
    else if (ch == STK_SET_DEVICE_EXT) {
    1eaa:	85 34       	cpi	r24, 0x45	; 69
    1eac:	19 f4       	brne	.+6      	; 0x1eb4 <main+0xb0>
      // SET DEVICE EXT is ignored
      getNch(5);
    1eae:	85 e0       	ldi	r24, 0x05	; 5
    1eb0:	74 d0       	rcall	.+232    	; 0x1f9a <getNch>
    1eb2:	59 c0       	rjmp	.+178    	; 0x1f66 <main+0x162>
    }
    else if (ch == STK_LOAD_ADDRESS) {
    1eb4:	85 35       	cpi	r24, 0x55	; 85
    1eb6:	39 f4       	brne	.+14     	; 0x1ec6 <main+0xc2>
      // LOAD ADDRESS
      address.bytes[0] = getch();
    1eb8:	5d d0       	rcall	.+186    	; 0x1f74 <getch>
    1eba:	c8 2f       	mov	r28, r24
      address.bytes[1] = getch();
    1ebc:	5b d0       	rcall	.+182    	; 0x1f74 <getch>
    1ebe:	d8 2f       	mov	r29, r24
      }
      else {
        RAMPZ &= 0xFE;
      }
#endif
      address.word *= 2; // Convert from word address to byte address
    1ec0:	cc 0f       	add	r28, r28
    1ec2:	dd 1f       	adc	r29, r29
    1ec4:	4f c0       	rjmp	.+158    	; 0x1f64 <main+0x160>
      verifySpace();
    }
    else if (ch == STK_UNIVERSAL) {
    1ec6:	86 35       	cpi	r24, 0x56	; 86
    1ec8:	21 f4       	brne	.+8      	; 0x1ed2 <main+0xce>
        getNch(3);
        putch(0x00);
      }
#else
      // UNIVERSAL command is ignored
      getNch(4);
    1eca:	84 e0       	ldi	r24, 0x04	; 4
    1ecc:	66 d0       	rcall	.+204    	; 0x1f9a <getNch>
      putch(0x00);
    1ece:	80 e0       	ldi	r24, 0x00	; 0
    1ed0:	e6 cf       	rjmp	.-52     	; 0x1e9e <main+0x9a>
#endif
    }
    /* Write memory, length is big endian and is in bytes */
    else if (ch == STK_PROG_PAGE) {
    1ed2:	84 36       	cpi	r24, 0x64	; 100
    1ed4:	09 f0       	breq	.+2      	; 0x1ed8 <main+0xd4>
    1ed6:	31 c0       	rjmp	.+98     	; 0x1f3a <main+0x136>
      // PROGRAM PAGE - we support flash programming only, not EEPROM
      uint8_t desttype;
      uint8_t *bufPtr;
      pagelen_t savelength;

      GETLENGTH(length);
    1ed8:	4d d0       	rcall	.+154    	; 0x1f74 <getch>
    1eda:	4c d0       	rcall	.+152    	; 0x1f74 <getch>
    1edc:	18 2f       	mov	r17, r24
      savelength = length;
      desttype = getch();
    1ede:	4a d0       	rcall	.+148    	; 0x1f74 <getch>
    1ee0:	f8 2e       	mov	r15, r24
      // PROGRAM PAGE - we support flash programming only, not EEPROM
      uint8_t desttype;
      uint8_t *bufPtr;
      pagelen_t savelength;

      GETLENGTH(length);
    1ee2:	01 2f       	mov	r16, r17
      savelength = length;
      desttype = getch();
    1ee4:	80 e6       	ldi	r24, 0x60	; 96
    1ee6:	a8 2e       	mov	r10, r24
    1ee8:	b1 2c       	mov	r11, r1

      // read a page worth of contents
      bufPtr = buff.bptr;
      do *bufPtr++ = getch();
    1eea:	44 d0       	rcall	.+136    	; 0x1f74 <getch>
    1eec:	f5 01       	movw	r30, r10
    1eee:	81 93       	st	Z+, r24
    1ef0:	5f 01       	movw	r10, r30
      while (--length);
    1ef2:	01 50       	subi	r16, 0x01	; 1
    1ef4:	d1 f7       	brne	.-12     	; 0x1eea <main+0xe6>

      // Read command terminator, start reply
      verifySpace();
    1ef6:	49 d0       	rcall	.+146    	; 0x1f8a <verifySpace>
 * void writebuffer(memtype, buffer, address, length)
 */
static inline void writebuffer(int8_t memtype, addr16_t mybuff,
                               addr16_t address, pagelen_t len)
{
  switch (memtype) {
    1ef8:	f5 e4       	ldi	r31, 0x45	; 69
    1efa:	ff 12       	cpse	r15, r31
    1efc:	01 c0       	rjmp	.+2      	; 0x1f00 <main+0xfc>
    1efe:	ff cf       	rjmp	.-2      	; 0x1efe <main+0xfa>
       * and we needed the space back.
       */
#ifdef FOURPAGEERASE
      if ((address.bytes[0] & ((SPM_PAGESIZE<<2)-1))==0) {
#endif
        __boot_page_erase_short(address.word);
    1f00:	83 e0       	ldi	r24, 0x03	; 3
    1f02:	fe 01       	movw	r30, r28
    1f04:	87 bf       	out	0x37, r24	; 55
    1f06:	e8 95       	spm
        boot_spm_busy_wait();
    1f08:	07 b6       	in	r0, 0x37	; 55
    1f0a:	00 fc       	sbrc	r0, 0
    1f0c:	fd cf       	rjmp	.-6      	; 0x1f08 <main+0x104>
    1f0e:	a0 e6       	ldi	r26, 0x60	; 96
    1f10:	b0 e0       	ldi	r27, 0x00	; 0
    1f12:	fe 01       	movw	r30, r28

      /*
       * Copy data from the buffer into the flash write buffer.
       */
      do {
        __boot_page_fill_short((uint16_t)(void*)addrPtr, *(mybuff.wptr++));
    1f14:	8d 91       	ld	r24, X+
    1f16:	9d 91       	ld	r25, X+
    1f18:	0c 01       	movw	r0, r24
    1f1a:	e7 be       	out	0x37, r14	; 55
    1f1c:	e8 95       	spm
    1f1e:	11 24       	eor	r1, r1
        addrPtr += 2;
      } while (len -= 2);
    1f20:	12 50       	subi	r17, 0x02	; 2
    1f22:	32 96       	adiw	r30, 0x02	; 2
    1f24:	11 11       	cpse	r17, r1
    1f26:	f6 cf       	rjmp	.-20     	; 0x1f14 <main+0x110>

      /*
       * Actually Write the buffer to flash (and wait for it to finish.)
       */
      __boot_page_write_short(address.word);
    1f28:	fe 01       	movw	r30, r28
    1f2a:	d7 be       	out	0x37, r13	; 55
    1f2c:	e8 95       	spm
      boot_spm_busy_wait();
    1f2e:	07 b6       	in	r0, 0x37	; 55
    1f30:	00 fc       	sbrc	r0, 0
    1f32:	fd cf       	rjmp	.-6      	; 0x1f2e <main+0x12a>
#if defined(RWWSRE)
      // Reenable read access to flash
      __boot_rww_enable_short();
    1f34:	c7 be       	out	0x37, r12	; 55
    1f36:	e8 95       	spm
    1f38:	16 c0       	rjmp	.+44     	; 0x1f66 <main+0x162>
      writebuffer(desttype, buff, address, savelength);


    }
/* Read memory block mode, length is big endian.  */
    else if (ch == STK_READ_PAGE) {
    1f3a:	84 37       	cpi	r24, 0x74	; 116
    1f3c:	09 f0       	breq	.+2      	; 0x1f40 <main+0x13c>
    1f3e:	a6 cf       	rjmp	.-180    	; 0x1e8c <main+0x88>
      uint8_t desttype;
      GETLENGTH(length);
    1f40:	19 d0       	rcall	.+50     	; 0x1f74 <getch>
    1f42:	18 d0       	rcall	.+48     	; 0x1f74 <getch>
    1f44:	f8 2e       	mov	r15, r24

      desttype = getch();
    1f46:	16 d0       	rcall	.+44     	; 0x1f74 <getch>

      verifySpace();
    1f48:	20 d0       	rcall	.+64     	; 0x1f8a <verifySpace>
    1f4a:	8e 01       	movw	r16, r28
      //      while (--length);
      // read a Flash and increment the address (may increment RAMPZ)
      __asm__ ("  elpm %0,Z+\n" : "=r" (ch), "=z" (address.bptr): "1" (address));
#else
      // read a Flash byte and increment the address
      __asm__ ("  lpm %0,Z+\n" : "=r" (ch), "=z" (address.bptr): "1" (address));
    1f4c:	f8 01       	movw	r30, r16
    1f4e:	85 91       	lpm	r24, Z+
    1f50:	8f 01       	movw	r16, r30
#endif
      putch(ch);
    1f52:	0c d0       	rcall	.+24     	; 0x1f6c <putch>
    } while (--length);
    1f54:	fa 94       	dec	r15
    1f56:	f1 10       	cpse	r15, r1
    1f58:	f9 cf       	rjmp	.-14     	; 0x1f4c <main+0x148>
    1f5a:	05 c0       	rjmp	.+10     	; 0x1f66 <main+0x162>
      verifySpace();
      putch(SIGNATURE_0);
      putch(SIGNATURE_1);
      putch(SIGNATURE_2);
    }
    else if (ch == STK_LEAVE_PROGMODE) { /* 'Q' */
    1f5c:	81 35       	cpi	r24, 0x51	; 81
    1f5e:	11 f4       	brne	.+4      	; 0x1f64 <main+0x160>
      // Adaboot no-wait mod
      watchdogConfig(WATCHDOG_16MS);
    1f60:	88 e0       	ldi	r24, 0x08	; 8
    1f62:	0f d0       	rcall	.+30     	; 0x1f82 <watchdogConfig>
      verifySpace();
    }
    else {
      // This covers the response to commands like STK_ENTER_PROGMODE
      verifySpace();
    1f64:	12 d0       	rcall	.+36     	; 0x1f8a <verifySpace>
    }
    putch(STK_OK);
    1f66:	80 e1       	ldi	r24, 0x10	; 16
    1f68:	01 d0       	rcall	.+2      	; 0x1f6c <putch>
  }
    1f6a:	86 cf       	rjmp	.-244    	; 0x1e78 <main+0x74>

00001f6c <putch>:
  RS485_PORT |= _BV(RS485_BIT);
# else
  RS485_PORT &= ~_BV(RS485_BIT);
# endif
#else //not RS485
  while (!(UART_SRA & _BV(UDRE0))) {  /* Spin */ }
    1f6c:	5d 9b       	sbis	0x0b, 5	; 11
    1f6e:	fe cf       	rjmp	.-4      	; 0x1f6c <putch>
  UART_UDR = ch;
    1f70:	8c b9       	out	0x0c, r24	; 12
    1f72:	08 95       	ret

00001f74 <getch>:
    :
    "r25"
    );
#else
#ifndef LIN_UART
  while (!(UART_SRA & _BV(RXC0)))  {  /* Spin */ }
    1f74:	5f 9b       	sbis	0x0b, 7	; 11
    1f76:	fe cf       	rjmp	.-4      	; 0x1f74 <getch>
  if (!(UART_SRA & _BV(FE0))) {
    1f78:	5c 99       	sbic	0x0b, 4	; 11
    1f7a:	01 c0       	rjmp	.+2      	; 0x1f7e <getch+0xa>
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
    1f7c:	a8 95       	wdr
  while (!(LINSIR & _BV(LRXOK)))  {  /* Spin */ }
  if (!(LINSIR & _BV(LFERR))) {
    watchdogReset();  /* Eventually abort if wrong speed */
  }
#endif
  ch = UART_UDR;
    1f7e:	8c b1       	in	r24, 0x0c	; 12
#if LED_DATA_FLASH
  toggle_led();
#endif

  return ch;
}
    1f80:	08 95       	ret

00001f82 <watchdogConfig>:
}

void watchdogConfig(uint8_t x) {
#ifdef WDCE //does it have a Watchdog Change Enable?
#ifdef WDTCSR
  WDTCSR = _BV(WDCE) | _BV(WDE);
    1f82:	98 e1       	ldi	r25, 0x18	; 24
    1f84:	91 bd       	out	0x21, r25	; 33
#else //then it must be one of those newfangled ones that use CCP
  CCP=0xD8; //so write this magic number to CCP
#endif

#ifdef WDTCSR
  WDTCSR = x;
    1f86:	81 bd       	out	0x21, r24	; 33
    1f88:	08 95       	ret

00001f8a <verifySpace>:
  do getch(); while (--count);
  verifySpace();
}

void verifySpace() {
  if (getch() != CRC_EOP) {
    1f8a:	f4 df       	rcall	.-24     	; 0x1f74 <getch>
    1f8c:	80 32       	cpi	r24, 0x20	; 32
    1f8e:	19 f0       	breq	.+6      	; 0x1f96 <verifySpace+0xc>
    watchdogConfig(WATCHDOG_16MS);    // shorten WD timeout
    1f90:	88 e0       	ldi	r24, 0x08	; 8
    1f92:	f7 df       	rcall	.-18     	; 0x1f82 <watchdogConfig>
    1f94:	ff cf       	rjmp	.-2      	; 0x1f94 <verifySpace+0xa>
    while (1)                         // and busy-loop so that WD causes
      ;                               //  a reset and app start.
  }
  putch(STK_INSYNC);
    1f96:	84 e1       	ldi	r24, 0x14	; 20
    1f98:	e9 cf       	rjmp	.-46     	; 0x1f6c <putch>

00001f9a <getNch>:
    ::[count] "M" (UART_B_VALUE)
    );
}
#endif

void getNch(uint8_t count) {
    1f9a:	cf 93       	push	r28
    1f9c:	c8 2f       	mov	r28, r24
  do getch(); while (--count);
    1f9e:	ea df       	rcall	.-44     	; 0x1f74 <getch>
    1fa0:	c1 50       	subi	r28, 0x01	; 1
    1fa2:	e9 f7       	brne	.-6      	; 0x1f9e <getNch+0x4>
  verifySpace();
}
    1fa4:	cf 91       	pop	r28
}
#endif

void getNch(uint8_t count) {
  do getch(); while (--count);
  verifySpace();
    1fa6:	f1 cf       	rjmp	.-30     	; 0x1f8a <verifySpace>

00001fa8 <do_spm>:
 *   data=0 in WRITE
 */
static void do_spm(uint16_t address, uint8_t command, uint16_t data)  __attribute__ ((used));
static void do_spm(uint16_t address, uint8_t command, uint16_t data) {
  // Do spm stuff
  asm volatile (
    1fa8:	fc 01       	movw	r30, r24
    1faa:	0a 01       	movw	r0, r20
    1fac:	67 bf       	out	0x37, r22	; 55
    1fae:	e8 95       	spm
    1fb0:	11 24       	eor	r1, r1
    );

  // wait for spm to complete
  //   it doesn't have much sense for __BOOT_PAGE_FILL,
  //   but it doesn't hurt and saves some bytes on 'if'
  boot_spm_busy_wait();
    1fb2:	07 b6       	in	r0, 0x37	; 55
    1fb4:	00 fc       	sbrc	r0, 0
    1fb6:	fd cf       	rjmp	.-6      	; 0x1fb2 <do_spm+0xa>
#if defined(RWWSRE)
  // this 'if' condition should be: (command == __BOOT_PAGE_WRITE || command == __BOOT_PAGE_ERASE)...
  // but it's tweaked a little assuming that in every command we are interested in here, there
  // must be also SELFPRGEN set. If we skip checking this bit, we save here 4B
  if ((command & (_BV(PGWRT)|_BV(PGERS))) && (data == 0) ) {
    1fb8:	66 70       	andi	r22, 0x06	; 6
    1fba:	29 f0       	breq	.+10     	; 0x1fc6 <do_spm+0x1e>
    1fbc:	45 2b       	or	r20, r21
    1fbe:	19 f4       	brne	.+6      	; 0x1fc6 <do_spm+0x1e>
    // Reenable read access to flash
    __boot_rww_enable_short();
    1fc0:	81 e1       	ldi	r24, 0x11	; 17
    1fc2:	87 bf       	out	0x37, r24	; 55
    1fc4:	e8 95       	spm
    1fc6:	08 95       	ret
