
optiboot_atmega32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001c8  00007e00  00007e00  00000074  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .trampolines  00000000  00007fc8  00007fc8  0000023c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .version      00000002  00007ffe  00007ffe  0000023c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .comment      00000030  00000000  00000000  0000023e  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  0000026e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000638  00000000  00000000  0000029e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002f5  00000000  00000000  000008d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000364  00000000  00000000  00000bcb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000ac  00000000  00000000  00000f30  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000208  00000000  00000000  00000fdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002ff  00000000  00000000  000011e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000080  00000000  00000000  000014e3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00007e00 <pre_main>:
/* everything that needs to run VERY early */
void pre_main(void) {
  // Allow convenient way of calling do_spm function - jump table, so
  //   entry to this function will always be here, independent of
  //   compilation, features etc
  asm volatile (
    7e00:	01 c0       	rjmp	.+2      	; 0x7e04 <main>
    7e02:	d2 c0       	rjmp	.+420    	; 0x7fa8 <do_spm>

00007e04 <main>:
  //  SP points to RAMEND
  //  r1 contains zero
  //
  // If not, uncomment the following instructions:
  // cli();
  asm volatile ("  clr __zero_reg__");
    7e04:	11 24       	eor	r1, r1

#if defined(__AVR_ATmega8__) || defined(__AVR_ATmega8515__) ||  \
  defined(__AVR_ATmega8535__) || defined (__AVR_ATmega16__) ||  \
  defined (__AVR_ATmega32__) || defined (__AVR_ATmega64__)  ||  \
  defined (__AVR_ATmega128__) || defined (__AVR_ATmega162__)
  SP=RAMEND;  // This is done by hardware reset on newer chips
    7e06:	8f e5       	ldi	r24, 0x5F	; 95
    7e08:	98 e0       	ldi	r25, 0x08	; 8
    7e0a:	9e bf       	out	0x3e, r25	; 62
    7e0c:	8d bf       	out	0x3d, r24	; 61
#  warning "START_APP_ON_EXTR is defined and NO_START_APP_ON_POR isn't"
#  define APP_START_REASONS 1 /* Always start rge App. */
#  define WDRF_CLR_REASONS 0  /* Never clear WDRF */
#endif

  ch = MCUSR;
    7e0e:	84 b7       	in	r24, 0x34	; 52

  // Skip all logic and run bootloader if MCUSR is cleared (application request)
  if (ch != 0) {
    7e10:	88 23       	and	r24, r24
    7e12:	61 f0       	breq	.+24     	; 0x7e2c <main+0x28>
     * One problematic scenario: broken application code sets watchdog timer
     * without clearing MCUSR before and triggers it quickly. But it's
     * recoverable by power-on with pushed reset button.
     */

    if (APP_START_REASONS) {
    7e14:	98 2f       	mov	r25, r24
    7e16:	9a 70       	andi	r25, 0x0A	; 10
    7e18:	92 30       	cpi	r25, 0x02	; 2
    7e1a:	41 f0       	breq	.+16     	; 0x7e2c <main+0x28>
      if (WDRF_CLR_REASONS) {
    7e1c:	81 ff       	sbrs	r24, 1
    7e1e:	02 c0       	rjmp	.+4      	; 0x7e24 <main+0x20>
        /*
         * Clear WDRF if it was most probably set by wdr in bootloader.
         */
        if ((uint16_t)&MCUSR > 0x1F) {
          MCUSR = ~(_BV(WDRF));   // optimize to LDI/OUT
    7e20:	97 ef       	ldi	r25, 0xF7	; 247
    7e22:	94 bf       	out	0x34, r25	; 52
      /*
       * save the reset flags in the designated register
       * This can be saved in a main program by putting code in .init0 (which
       * executes before normal c init code) to save R2 to a global variable.
       */
      __asm__ __volatile__ ("  mov r2, %0\n" :: "r" (ch));
    7e24:	28 2e       	mov	r2, r24

      // switch off watchdog
      watchdogConfig(WATCHDOG_OFF);
    7e26:	80 e0       	ldi	r24, 0x00	; 0
    7e28:	ac d0       	rcall	.+344    	; 0x7f82 <watchdogConfig>
      // Note that appstart_vec is defined so that this works with either
      // real or virtual boot partitions.
      __asm__ __volatile__ (
    7e2a:	ea c0       	rjmp	.+468    	; 0x8000 <__VERSION_START__+0x2>
#elif defined(__AVR_ATtiny25__)||defined(__AVR_ATtiny45__)||defined(__AVR_ATtiny85__)
  TCCR1 = 0x0E; //div 8196 - it's an 8-bit timer.
#elif defined(__AVR_ATtiny43__)
#error "LED flash for Tiny43 not yet supported"
#else
  TCCR1B = _BV(CS12) | _BV(CS10); // div 1024
    7e2c:	85 e0       	ldi	r24, 0x05	; 5
    7e2e:	8e bd       	out	0x2e, r24	; 46
#if (SOFT_UART == 0)
#if defined(__AVR_ATmega8__) || defined (__AVR_ATmega8515__) || \
  defined (__AVR_ATmega8535__) || defined (__AVR_ATmega16__) || \
  defined (__AVR_ATmega32__)
#if (SINGLESPEED == 0)
  UCSRA = _BV(U2X); //Double speed mode USART
    7e30:	82 e0       	ldi	r24, 0x02	; 2
    7e32:	8b b9       	out	0x0b, r24	; 11
#endif //singlespeed
  UCSRB = _BV(RXEN) | _BV(TXEN);  // enable Rx & Tx
    7e34:	88 e1       	ldi	r24, 0x18	; 24
    7e36:	8a b9       	out	0x0a, r24	; 10
  UCSRC = _BV(URSEL) | _BV(UCSZ1) | _BV(UCSZ0);  // config USART; 8N1
    7e38:	86 e8       	ldi	r24, 0x86	; 134
    7e3a:	80 bd       	out	0x20, r24	; 32
  UBRRL = (uint8_t)BAUD_SETTING;
    7e3c:	8b e0       	ldi	r24, 0x0B	; 11
    7e3e:	89 b9       	out	0x09, r24	; 9
  RS485_PORT &= ~_BV(RS485_BIT);
  #endif
#endif

  // Set up watchdog to trigger after desired timeout
  watchdogConfig(WDTPERIOD);
    7e40:	8e e0       	ldi	r24, 0x0E	; 14
    7e42:	9f d0       	rcall	.+318    	; 0x7f82 <watchdogConfig>

#if (LED_START_FLASHES > 0) || LED_DATA_FLASH || LED_START_ON
  /* Set LED pin as output */
  LED_DDR |= _BV(LED);
    7e44:	b8 9a       	sbi	0x17, 0	; 23
    7e46:	84 e0       	ldi	r24, 0x04	; 4
    TIFR = _BV(TOV1);
    while (!(TIFR & _BV(TOV1)));
#elif defined(__AVR_ATtiny43__)
#error "LED flash for Tiny43 not yet supported"
#else
    TCNT1 = -(F_CPU/(1024*16));
    7e48:	2d e5       	ldi	r18, 0x5D	; 93
    7e4a:	3d ef       	ldi	r19, 0xFD	; 253
    TIFR1 = _BV(TOV1);
    7e4c:	44 e0       	ldi	r20, 0x04	; 4
static void inline toggle_led(void) {
#if defined(__AVR_ATmega8__)    || defined(__AVR_ATmega8515__) ||       \
  defined(__AVR_ATmega8535__) || defined(__AVR_ATmega16__)   ||         \
  defined(__AVR_ATmega162__)  || defined(__AVR_ATmega32__)   ||         \
  defined(__AVR_ATmega64__)   || defined(__AVR_ATmega128__)
  LED_PORT ^= _BV(LED);
    7e4e:	51 e0       	ldi	r21, 0x01	; 1
    TIFR = _BV(TOV1);
    while (!(TIFR & _BV(TOV1)));
#elif defined(__AVR_ATtiny43__)
#error "LED flash for Tiny43 not yet supported"
#else
    TCNT1 = -(F_CPU/(1024*16));
    7e50:	3d bd       	out	0x2d, r19	; 45
    7e52:	2c bd       	out	0x2c, r18	; 44
    TIFR1 = _BV(TOV1);
    7e54:	48 bf       	out	0x38, r20	; 56
    while (!(TIFR1 & _BV(TOV1)));
    7e56:	08 b6       	in	r0, 0x38	; 56
    7e58:	02 fe       	sbrs	r0, 2
    7e5a:	fd cf       	rjmp	.-6      	; 0x7e56 <main+0x52>
static void inline toggle_led(void) {
#if defined(__AVR_ATmega8__)    || defined(__AVR_ATmega8515__) ||       \
  defined(__AVR_ATmega8535__) || defined(__AVR_ATmega16__)   ||         \
  defined(__AVR_ATmega162__)  || defined(__AVR_ATmega32__)   ||         \
  defined(__AVR_ATmega64__)   || defined(__AVR_ATmega128__)
  LED_PORT ^= _BV(LED);
    7e5c:	98 b3       	in	r25, 0x18	; 24
    7e5e:	95 27       	eor	r25, r21
    7e60:	98 bb       	out	0x18, r25	; 24
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
    7e62:	a8 95       	wdr
     *  by the UART hardware, avrdude sends several attempts in rather
     *  quick succession, some of which will be lost and cause us to
     *  get out of sync.  So if we see any data; stop blinking.
     */
#ifndef LIN_UART
    if (UART_SRA & _BV(RXC0))
    7e64:	5f 99       	sbic	0x0b, 7	; 11
    7e66:	02 c0       	rjmp	.+4      	; 0x7e6c <main+0x68>
    7e68:	81 50       	subi	r24, 0x01	; 1
#else
// This doesn't seem to work?
//    if ((UART_PIN & (1<<UART_RX_BIT)) == 0)
//      break;  // detect start bit on soft uart too.
#endif
  } while (--count);
    7e6a:	91 f7       	brne	.-28     	; 0x7e50 <main+0x4c>

      /*
       * Copy data from the buffer into the flash write buffer.
       */
      do {
        __boot_page_fill_short((uint16_t)(void*)addrPtr, *(mybuff.wptr++));
    7e6c:	ee 24       	eor	r14, r14
    7e6e:	e3 94       	inc	r14
      } while (len -= 2);

      /*
       * Actually Write the buffer to flash (and wait for it to finish.)
       */
      __boot_page_write_short(address.word);
    7e70:	25 e0       	ldi	r18, 0x05	; 5
    7e72:	d2 2e       	mov	r13, r18
      boot_spm_busy_wait();
#if defined(RWWSRE)
      // Reenable read access to flash
      __boot_rww_enable_short();
    7e74:	31 e1       	ldi	r19, 0x11	; 17
#endif

  /* Forever loop: exits by causing WDT reset */
  for (;;) {
    /* get character from UART */
    ch = getch();
    7e76:	c3 2e       	mov	r12, r19

    if (ch == STK_GET_PARAMETER) {
    7e78:	7d d0       	rcall	.+250    	; 0x7f74 <getch>
      unsigned char which = getch();
    7e7a:	81 34       	cpi	r24, 0x41	; 65
    7e7c:	51 f4       	brne	.+20     	; 0x7e92 <main+0x8e>
    7e7e:	7a d0       	rcall	.+244    	; 0x7f74 <getch>
      verifySpace();
    7e80:	18 2f       	mov	r17, r24
    7e82:	83 d0       	rcall	.+262    	; 0x7f8a <verifySpace>
       * Send optiboot version as "SW version"
       * Note that the references to memory are optimized away.
       */
      if (which == STK_SW_MINOR) {
        putch(optiboot_version & 0xFF);
      } else if (which == STK_SW_MAJOR) {
    7e84:	11 38       	cpi	r17, 0x81	; 129
      /*
       * Send optiboot version as "SW version"
       * Note that the references to memory are optimized away.
       */
      if (which == STK_SW_MINOR) {
        putch(optiboot_version & 0xFF);
    7e86:	11 f0       	breq	.+4      	; 0x7e8c <main+0x88>
    7e88:	83 e0       	ldi	r24, 0x03	; 3
      } else if (which == STK_SW_MAJOR) {
        putch(optiboot_version >> 8);
    7e8a:	01 c0       	rjmp	.+2      	; 0x7e8e <main+0x8a>
    7e8c:	88 e0       	ldi	r24, 0x08	; 8
    7e8e:	6e d0       	rcall	.+220    	; 0x7f6c <putch>
    7e90:	6a c0       	rjmp	.+212    	; 0x7f66 <main+0x162>
         * other parameters - enough to keep Avrdude happy
         */
        putch(0x03);
      }
    }
    else if (ch == STK_SET_DEVICE) {
    7e92:	82 34       	cpi	r24, 0x42	; 66
      // SET DEVICE is ignored
      getNch(20);
    7e94:	11 f4       	brne	.+4      	; 0x7e9a <main+0x96>
    7e96:	84 e1       	ldi	r24, 0x14	; 20
    }
    else if (ch == STK_SET_DEVICE_EXT) {
    7e98:	03 c0       	rjmp	.+6      	; 0x7ea0 <main+0x9c>
      // SET DEVICE EXT is ignored
      getNch(5);
    7e9a:	85 34       	cpi	r24, 0x45	; 69
    7e9c:	19 f4       	brne	.+6      	; 0x7ea4 <main+0xa0>
    7e9e:	85 e0       	ldi	r24, 0x05	; 5
    }
    else if (ch == STK_LOAD_ADDRESS) {
    7ea0:	7c d0       	rcall	.+248    	; 0x7f9a <getNch>
    7ea2:	61 c0       	rjmp	.+194    	; 0x7f66 <main+0x162>
      // LOAD ADDRESS
      address.bytes[0] = getch();
    7ea4:	85 35       	cpi	r24, 0x55	; 85
    7ea6:	39 f4       	brne	.+14     	; 0x7eb6 <main+0xb2>
    7ea8:	65 d0       	rcall	.+202    	; 0x7f74 <getch>
      address.bytes[1] = getch();
    7eaa:	c8 2f       	mov	r28, r24
    7eac:	63 d0       	rcall	.+198    	; 0x7f74 <getch>
      }
      else {
        RAMPZ &= 0xFE;
      }
#endif
      address.word *= 2; // Convert from word address to byte address
    7eae:	d8 2f       	mov	r29, r24
    7eb0:	cc 0f       	add	r28, r28
    7eb2:	dd 1f       	adc	r29, r29
      verifySpace();
    }
    else if (ch == STK_UNIVERSAL) {
    7eb4:	57 c0       	rjmp	.+174    	; 0x7f64 <main+0x160>
        getNch(3);
        putch(0x00);
      }
#else
      // UNIVERSAL command is ignored
      getNch(4);
    7eb6:	86 35       	cpi	r24, 0x56	; 86
    7eb8:	21 f4       	brne	.+8      	; 0x7ec2 <main+0xbe>
      putch(0x00);
    7eba:	84 e0       	ldi	r24, 0x04	; 4
    7ebc:	6e d0       	rcall	.+220    	; 0x7f9a <getNch>
#endif
    }
    /* Write memory, length is big endian and is in bytes */
    else if (ch == STK_PROG_PAGE) {
    7ebe:	80 e0       	ldi	r24, 0x00	; 0
    7ec0:	e6 cf       	rjmp	.-52     	; 0x7e8e <main+0x8a>
      // PROGRAM PAGE - we support flash programming only, not EEPROM
      uint8_t desttype;
      uint8_t *bufPtr;
      pagelen_t savelength;

      GETLENGTH(length);
    7ec2:	84 36       	cpi	r24, 0x64	; 100
    7ec4:	09 f0       	breq	.+2      	; 0x7ec8 <main+0xc4>
    7ec6:	31 c0       	rjmp	.+98     	; 0x7f2a <main+0x126>
    7ec8:	55 d0       	rcall	.+170    	; 0x7f74 <getch>
    7eca:	54 d0       	rcall	.+168    	; 0x7f74 <getch>
      savelength = length;
      desttype = getch();
    7ecc:	18 2f       	mov	r17, r24
    7ece:	52 d0       	rcall	.+164    	; 0x7f74 <getch>
      // PROGRAM PAGE - we support flash programming only, not EEPROM
      uint8_t desttype;
      uint8_t *bufPtr;
      pagelen_t savelength;

      GETLENGTH(length);
    7ed0:	f8 2e       	mov	r15, r24
      savelength = length;
      desttype = getch();
    7ed2:	01 2f       	mov	r16, r17
    7ed4:	80 e6       	ldi	r24, 0x60	; 96
    7ed6:	a8 2e       	mov	r10, r24

      // read a page worth of contents
      bufPtr = buff.bptr;
      do *bufPtr++ = getch();
    7ed8:	b1 2c       	mov	r11, r1
    7eda:	4c d0       	rcall	.+152    	; 0x7f74 <getch>
    7edc:	f5 01       	movw	r30, r10
    7ede:	81 93       	st	Z+, r24
    7ee0:	5f 01       	movw	r10, r30
      while (--length);
    7ee2:	01 50       	subi	r16, 0x01	; 1
    7ee4:	d1 f7       	brne	.-12     	; 0x7eda <main+0xd6>

      // Read command terminator, start reply
      verifySpace();
    7ee6:	51 d0       	rcall	.+162    	; 0x7f8a <verifySpace>
    7ee8:	f5 e4       	ldi	r31, 0x45	; 69
 * void writebuffer(memtype, buffer, address, length)
 */
static inline void writebuffer(int8_t memtype, addr16_t mybuff,
                               addr16_t address, pagelen_t len)
{
  switch (memtype) {
    7eea:	ff 12       	cpse	r15, r31
    7eec:	01 c0       	rjmp	.+2      	; 0x7ef0 <main+0xec>
    7eee:	ff cf       	rjmp	.-2      	; 0x7eee <main+0xea>
    7ef0:	83 e0       	ldi	r24, 0x03	; 3
       * and we needed the space back.
       */
#ifdef FOURPAGEERASE
      if ((address.bytes[0] & ((SPM_PAGESIZE<<2)-1))==0) {
#endif
        __boot_page_erase_short(address.word);
    7ef2:	fe 01       	movw	r30, r28
    7ef4:	87 bf       	out	0x37, r24	; 55
    7ef6:	e8 95       	spm
    7ef8:	07 b6       	in	r0, 0x37	; 55
        boot_spm_busy_wait();
    7efa:	00 fc       	sbrc	r0, 0
    7efc:	fd cf       	rjmp	.-6      	; 0x7ef8 <main+0xf4>
    7efe:	a0 e6       	ldi	r26, 0x60	; 96
    7f00:	b0 e0       	ldi	r27, 0x00	; 0
    7f02:	fe 01       	movw	r30, r28
    7f04:	8d 91       	ld	r24, X+

      /*
       * Copy data from the buffer into the flash write buffer.
       */
      do {
        __boot_page_fill_short((uint16_t)(void*)addrPtr, *(mybuff.wptr++));
    7f06:	9d 91       	ld	r25, X+
    7f08:	0c 01       	movw	r0, r24
    7f0a:	e7 be       	out	0x37, r14	; 55
    7f0c:	e8 95       	spm
    7f0e:	11 24       	eor	r1, r1
    7f10:	12 50       	subi	r17, 0x02	; 2
        addrPtr += 2;
      } while (len -= 2);
    7f12:	32 96       	adiw	r30, 0x02	; 2
    7f14:	11 11       	cpse	r17, r1

      /*
       * Actually Write the buffer to flash (and wait for it to finish.)
       */
      __boot_page_write_short(address.word);
    7f16:	f6 cf       	rjmp	.-20     	; 0x7f04 <main+0x100>
    7f18:	fe 01       	movw	r30, r28
      boot_spm_busy_wait();
    7f1a:	d7 be       	out	0x37, r13	; 55
    7f1c:	e8 95       	spm
#if defined(RWWSRE)
      // Reenable read access to flash
      __boot_rww_enable_short();
    7f1e:	07 b6       	in	r0, 0x37	; 55
    7f20:	00 fc       	sbrc	r0, 0
    7f22:	fd cf       	rjmp	.-6      	; 0x7f1e <main+0x11a>
      writebuffer(desttype, buff, address, savelength);


    }
/* Read memory block mode, length is big endian.  */
    else if (ch == STK_READ_PAGE) {
    7f24:	c7 be       	out	0x37, r12	; 55
    7f26:	e8 95       	spm
      uint8_t desttype;
      GETLENGTH(length);
    7f28:	1e c0       	rjmp	.+60     	; 0x7f66 <main+0x162>
    7f2a:	84 37       	cpi	r24, 0x74	; 116
    7f2c:	71 f4       	brne	.+28     	; 0x7f4a <main+0x146>

      desttype = getch();
    7f2e:	22 d0       	rcall	.+68     	; 0x7f74 <getch>

      verifySpace();
    7f30:	21 d0       	rcall	.+66     	; 0x7f74 <getch>
    7f32:	f8 2e       	mov	r15, r24
    7f34:	1f d0       	rcall	.+62     	; 0x7f74 <getch>
      //      while (--length);
      // read a Flash and increment the address (may increment RAMPZ)
      __asm__ ("  elpm %0,Z+\n" : "=r" (ch), "=z" (address.bptr): "1" (address));
#else
      // read a Flash byte and increment the address
      __asm__ ("  lpm %0,Z+\n" : "=r" (ch), "=z" (address.bptr): "1" (address));
    7f36:	29 d0       	rcall	.+82     	; 0x7f8a <verifySpace>
    7f38:	8e 01       	movw	r16, r28
#endif
      putch(ch);
    7f3a:	f8 01       	movw	r30, r16
    } while (--length);
    7f3c:	85 91       	lpm	r24, Z+
    7f3e:	8f 01       	movw	r16, r30
    7f40:	15 d0       	rcall	.+42     	; 0x7f6c <putch>
    7f42:	fa 94       	dec	r15

      read_mem(desttype, address, length);
    }

/* Get device signature bytes  */
    else if (ch == STK_READ_SIGN) {
    7f44:	f1 10       	cpse	r15, r1
    7f46:	f9 cf       	rjmp	.-14     	; 0x7f3a <main+0x136>
      // READ SIGN - return what Avrdude wants to hear
      verifySpace();
    7f48:	0e c0       	rjmp	.+28     	; 0x7f66 <main+0x162>
    7f4a:	85 37       	cpi	r24, 0x75	; 117
      putch(SIGNATURE_0);
    7f4c:	39 f4       	brne	.+14     	; 0x7f5c <main+0x158>
    7f4e:	1d d0       	rcall	.+58     	; 0x7f8a <verifySpace>
    7f50:	8e e1       	ldi	r24, 0x1E	; 30
      putch(SIGNATURE_1);
    7f52:	0c d0       	rcall	.+24     	; 0x7f6c <putch>
    7f54:	85 e9       	ldi	r24, 0x95	; 149
    7f56:	0a d0       	rcall	.+20     	; 0x7f6c <putch>
      putch(SIGNATURE_2);
    7f58:	82 e0       	ldi	r24, 0x02	; 2
    7f5a:	99 cf       	rjmp	.-206    	; 0x7e8e <main+0x8a>
    }
    else if (ch == STK_LEAVE_PROGMODE) { /* 'Q' */
    7f5c:	81 35       	cpi	r24, 0x51	; 81
    7f5e:	11 f4       	brne	.+4      	; 0x7f64 <main+0x160>
      // Adaboot no-wait mod
      watchdogConfig(WATCHDOG_16MS);
    7f60:	88 e0       	ldi	r24, 0x08	; 8
    7f62:	0f d0       	rcall	.+30     	; 0x7f82 <watchdogConfig>
    7f64:	12 d0       	rcall	.+36     	; 0x7f8a <verifySpace>
      verifySpace();
    }
    else {
      // This covers the response to commands like STK_ENTER_PROGMODE
      verifySpace();
    7f66:	80 e1       	ldi	r24, 0x10	; 16
    7f68:	01 d0       	rcall	.+2      	; 0x7f6c <putch>
    }
    putch(STK_OK);
    7f6a:	86 cf       	rjmp	.-244    	; 0x7e78 <main+0x74>

00007f6c <putch>:
    7f6c:	5d 9b       	sbis	0x0b, 5	; 11
    7f6e:	fe cf       	rjmp	.-4      	; 0x7f6c <putch>
  }
    7f70:	8c b9       	out	0x0c, r24	; 12
# else
  RS485_PORT &= ~_BV(RS485_BIT);
# endif
#else //not RS485
  while (!(UART_SRA & _BV(UDRE0))) {  /* Spin */ }
  UART_UDR = ch;
    7f72:	08 95       	ret

00007f74 <getch>:
    :
    "r25"
    );
#else
#ifndef LIN_UART
  while (!(UART_SRA & _BV(RXC0)))  {  /* Spin */ }
    7f74:	5f 9b       	sbis	0x0b, 7	; 11
    7f76:	fe cf       	rjmp	.-4      	; 0x7f74 <getch>
  if (!(UART_SRA & _BV(FE0))) {
    7f78:	5c 99       	sbic	0x0b, 4	; 11
    7f7a:	01 c0       	rjmp	.+2      	; 0x7f7e <getch+0xa>
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
    7f7c:	a8 95       	wdr
  while (!(LINSIR & _BV(LRXOK)))  {  /* Spin */ }
  if (!(LINSIR & _BV(LFERR))) {
    watchdogReset();  /* Eventually abort if wrong speed */
  }
#endif
  ch = UART_UDR;
    7f7e:	8c b1       	in	r24, 0x0c	; 12
#if LED_DATA_FLASH
  toggle_led();
#endif

  return ch;
}
    7f80:	08 95       	ret

00007f82 <watchdogConfig>:
}

void watchdogConfig(uint8_t x) {
#ifdef WDCE //does it have a Watchdog Change Enable?
#ifdef WDTCSR
  WDTCSR = _BV(WDCE) | _BV(WDE);
    7f82:	98 e1       	ldi	r25, 0x18	; 24
    7f84:	91 bd       	out	0x21, r25	; 33
#else //then it must be one of those newfangled ones that use CCP
  CCP=0xD8; //so write this magic number to CCP
#endif

#ifdef WDTCSR
  WDTCSR = x;
    7f86:	81 bd       	out	0x21, r24	; 33
    7f88:	08 95       	ret

00007f8a <verifySpace>:
  do getch(); while (--count);
  verifySpace();
}

void verifySpace() {
  if (getch() != CRC_EOP) {
    7f8a:	f4 df       	rcall	.-24     	; 0x7f74 <getch>
    7f8c:	80 32       	cpi	r24, 0x20	; 32
    7f8e:	19 f0       	breq	.+6      	; 0x7f96 <verifySpace+0xc>
    watchdogConfig(WATCHDOG_16MS);    // shorten WD timeout
    7f90:	88 e0       	ldi	r24, 0x08	; 8
    7f92:	f7 df       	rcall	.-18     	; 0x7f82 <watchdogConfig>
    7f94:	ff cf       	rjmp	.-2      	; 0x7f94 <verifySpace+0xa>
    while (1)                         // and busy-loop so that WD causes
      ;                               //  a reset and app start.
  }
  putch(STK_INSYNC);
    7f96:	84 e1       	ldi	r24, 0x14	; 20
    7f98:	e9 cf       	rjmp	.-46     	; 0x7f6c <putch>

00007f9a <getNch>:
    ::[count] "M" (UART_B_VALUE)
    );
}
#endif

void getNch(uint8_t count) {
    7f9a:	cf 93       	push	r28
    7f9c:	c8 2f       	mov	r28, r24
  do getch(); while (--count);
    7f9e:	ea df       	rcall	.-44     	; 0x7f74 <getch>
    7fa0:	c1 50       	subi	r28, 0x01	; 1
    7fa2:	e9 f7       	brne	.-6      	; 0x7f9e <getNch+0x4>
  verifySpace();
}
    7fa4:	cf 91       	pop	r28
}
#endif

void getNch(uint8_t count) {
  do getch(); while (--count);
  verifySpace();
    7fa6:	f1 cf       	rjmp	.-30     	; 0x7f8a <verifySpace>

00007fa8 <do_spm>:
    7fa8:	fc 01       	movw	r30, r24
 *   data=0 in WRITE
 */
static void do_spm(uint16_t address, uint8_t command, uint16_t data)  __attribute__ ((used));
static void do_spm(uint16_t address, uint8_t command, uint16_t data) {
  // Do spm stuff
  asm volatile (
    7faa:	0a 01       	movw	r0, r20
    7fac:	67 bf       	out	0x37, r22	; 55
    7fae:	e8 95       	spm
    7fb0:	11 24       	eor	r1, r1
    7fb2:	07 b6       	in	r0, 0x37	; 55
    );

  // wait for spm to complete
  //   it doesn't have much sense for __BOOT_PAGE_FILL,
  //   but it doesn't hurt and saves some bytes on 'if'
  boot_spm_busy_wait();
    7fb4:	00 fc       	sbrc	r0, 0
    7fb6:	fd cf       	rjmp	.-6      	; 0x7fb2 <do_spm+0xa>
    7fb8:	66 70       	andi	r22, 0x06	; 6
#if defined(RWWSRE)
  // this 'if' condition should be: (command == __BOOT_PAGE_WRITE || command == __BOOT_PAGE_ERASE)...
  // but it's tweaked a little assuming that in every command we are interested in here, there
  // must be also SELFPRGEN set. If we skip checking this bit, we save here 4B
  if ((command & (_BV(PGWRT)|_BV(PGERS))) && (data == 0) ) {
    7fba:	29 f0       	breq	.+10     	; 0x7fc6 <do_spm+0x1e>
    7fbc:	45 2b       	or	r20, r21
    7fbe:	19 f4       	brne	.+6      	; 0x7fc6 <do_spm+0x1e>
    7fc0:	81 e1       	ldi	r24, 0x11	; 17
    // Reenable read access to flash
    __boot_rww_enable_short();
    7fc2:	87 bf       	out	0x37, r24	; 55
    7fc4:	e8 95       	spm
    7fc6:	08 95       	ret
