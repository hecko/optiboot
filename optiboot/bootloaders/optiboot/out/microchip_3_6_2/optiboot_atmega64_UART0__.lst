
optiboot_atmega64_UART0__.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002e3  0000fc00  0000fc00  00000094  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .trampolines  00000000  0000fee4  0000fee4  00000378  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .version      00000002  0000fffe  0000fffe  00000378  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .comment      00000030  00000000  00000000  0000037a  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000003aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007f5  00000000  00000000  000003da  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002f9  00000000  00000000  00000bcf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003c2  00000000  00000000  00000ec8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000ac  00000000  00000000  0000128c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000289  00000000  00000000  00001338  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000449  00000000  00000000  000015c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000080  00000000  00000000  00001a0a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0000fc00 <pre_main>:
/* everything that needs to run VERY early */
void pre_main(void) {
  // Allow convenient way of calling do_spm function - jump table, so
  //   entry to this function will always be here, independent of
  //   compilation, features etc
  asm volatile (
    fc00:	01 c0       	rjmp	.+2      	; 0xfc04 <main>
    fc02:	05 c1       	rjmp	.+522    	; 0xfe0e <do_spm>

0000fc04 <main>:
  //  SP points to RAMEND
  //  r1 contains zero
  //
  // If not, uncomment the following instructions:
  // cli();
  asm volatile ("  clr __zero_reg__");
    fc04:	11 24       	eor	r1, r1

#if defined(__AVR_ATmega8__) || defined(__AVR_ATmega8515__) ||  \
  defined(__AVR_ATmega8535__) || defined (__AVR_ATmega16__) ||  \
  defined (__AVR_ATmega32__) || defined (__AVR_ATmega64__)  ||  \
  defined (__AVR_ATmega128__) || defined (__AVR_ATmega162__)
  SP=RAMEND;  // This is done by hardware reset on newer chips
    fc06:	8f ef       	ldi	r24, 0xFF	; 255
    fc08:	90 e1       	ldi	r25, 0x10	; 16
    fc0a:	9e bf       	out	0x3e, r25	; 62
    fc0c:	8d bf       	out	0x3d, r24	; 61
#  warning "START_APP_ON_EXTR is defined and NO_START_APP_ON_POR isn't"
#  define APP_START_REASONS 1 /* Always start rge App. */
#  define WDRF_CLR_REASONS 0  /* Never clear WDRF */
#endif

  ch = MCUSR;
    fc0e:	84 b7       	in	r24, 0x34	; 52

  // Skip all logic and run bootloader if MCUSR is cleared (application request)
  if (ch != 0) {
    fc10:	88 23       	and	r24, r24
    fc12:	61 f0       	breq	.+24     	; 0xfc2c <main+0x28>
     * One problematic scenario: broken application code sets watchdog timer
     * without clearing MCUSR before and triggers it quickly. But it's
     * recoverable by power-on with pushed reset button.
     */

    if (APP_START_REASONS) {
    fc14:	98 2f       	mov	r25, r24
    fc16:	9a 70       	andi	r25, 0x0A	; 10
    fc18:	92 30       	cpi	r25, 0x02	; 2
    fc1a:	41 f0       	breq	.+16     	; 0xfc2c <main+0x28>
      if (WDRF_CLR_REASONS) {
    fc1c:	81 ff       	sbrs	r24, 1
    fc1e:	02 c0       	rjmp	.+4      	; 0xfc24 <main+0x20>
        /*
         * Clear WDRF if it was most probably set by wdr in bootloader.
         */
        if ((uint16_t)&MCUSR > 0x1F) {
          MCUSR = ~(_BV(WDRF));   // optimize to LDI/OUT
    fc20:	97 ef       	ldi	r25, 0xF7	; 247
    fc22:	94 bf       	out	0x34, r25	; 52
      /*
       * save the reset flags in the designated register
       * This can be saved in a main program by putting code in .init0 (which
       * executes before normal c init code) to save R2 to a global variable.
       */
      __asm__ __volatile__ ("  mov r2, %0\n" :: "r" (ch));
    fc24:	28 2e       	mov	r2, r24

      // switch off watchdog
      watchdogConfig(WATCHDOG_OFF);
    fc26:	80 e0       	ldi	r24, 0x00	; 0
    fc28:	df d0       	rcall	.+446    	; 0xfde8 <watchdogConfig>
      // Note that appstart_vec is defined so that this works with either
      // real or virtual boot partitions.
      __asm__ __volatile__ (
    fc2a:	ea c1       	rjmp	.+980    	; 0x10000 <__VERSION_START__+0x2>
#elif defined(__AVR_ATtiny25__)||defined(__AVR_ATtiny45__)||defined(__AVR_ATtiny85__)
  TCCR1 = 0x0E; //div 8196 - it's an 8-bit timer.
#elif defined(__AVR_ATtiny43__)
#error "LED flash for Tiny43 not yet supported"
#else
  TCCR1B = _BV(CS12) | _BV(CS10); // div 1024
    fc2c:	85 e0       	ldi	r24, 0x05	; 5
    fc2e:	8e bd       	out	0x2e, r24	; 46
  LINBTR = (1 << LDISR) | (8 << LBT0); 
  LINCR = _BV(LENA) | _BV(LCMD2) | _BV(LCMD1) | _BV(LCMD0);
  LINDAT=0;
#else
#if (SINGLESPEED == 0)
  UART_SRA = _BV(U2X0); //Double speed mode USART0
    fc30:	82 e0       	ldi	r24, 0x02	; 2
    fc32:	8b b9       	out	0x0b, r24	; 11
#endif
  UART_SRB = _BV(RXEN0) | _BV(TXEN0);
    fc34:	88 e1       	ldi	r24, 0x18	; 24
    fc36:	8a b9       	out	0x0a, r24	; 10
  UART_SRC = _BV(UCSZ00) | _BV(UCSZ01);
    fc38:	86 e0       	ldi	r24, 0x06	; 6
    fc3a:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <__RAM__+0x95>
  UART_SRL = (uint8_t)BAUD_SETTING;
    fc3e:	80 e1       	ldi	r24, 0x10	; 16
    fc40:	89 b9       	out	0x09, r24	; 9
  RS485_PORT &= ~_BV(RS485_BIT);
  #endif
#endif

  // Set up watchdog to trigger after desired timeout
  watchdogConfig(WDTPERIOD);
    fc42:	8e e0       	ldi	r24, 0x0E	; 14
    fc44:	d1 d0       	rcall	.+418    	; 0xfde8 <watchdogConfig>

#if (LED_START_FLASHES > 0) || LED_DATA_FLASH || LED_START_ON
  /* Set LED pin as output */
  LED_DDR |= _BV(LED);
    fc46:	bd 9a       	sbi	0x17, 5	; 23
    fc48:	84 e0       	ldi	r24, 0x04	; 4
    TIFR = _BV(TOV1);
    while (!(TIFR & _BV(TOV1)));
#elif defined(__AVR_ATtiny43__)
#error "LED flash for Tiny43 not yet supported"
#else
    TCNT1 = -(F_CPU/(1024*16));
    fc4a:	20 e3       	ldi	r18, 0x30	; 48
    fc4c:	3c ef       	ldi	r19, 0xFC	; 252
    TIFR1 = _BV(TOV1);
    fc4e:	44 e0       	ldi	r20, 0x04	; 4
static void inline toggle_led(void) {
#if defined(__AVR_ATmega8__)    || defined(__AVR_ATmega8515__) ||       \
  defined(__AVR_ATmega8535__) || defined(__AVR_ATmega16__)   ||         \
  defined(__AVR_ATmega162__)  || defined(__AVR_ATmega32__)   ||         \
  defined(__AVR_ATmega64__)   || defined(__AVR_ATmega128__)
  LED_PORT ^= _BV(LED);
    fc50:	50 e2       	ldi	r21, 0x20	; 32
    TIFR = _BV(TOV1);
    while (!(TIFR & _BV(TOV1)));
#elif defined(__AVR_ATtiny43__)
#error "LED flash for Tiny43 not yet supported"
#else
    TCNT1 = -(F_CPU/(1024*16));
    fc52:	3d bd       	out	0x2d, r19	; 45
    fc54:	2c bd       	out	0x2c, r18	; 44
    TIFR1 = _BV(TOV1);
    fc56:	46 bf       	out	0x36, r20	; 54
    while (!(TIFR1 & _BV(TOV1)));
    fc58:	06 b6       	in	r0, 0x36	; 54
    fc5a:	02 fe       	sbrs	r0, 2
    fc5c:	fd cf       	rjmp	.-6      	; 0xfc58 <main+0x54>
static void inline toggle_led(void) {
#if defined(__AVR_ATmega8__)    || defined(__AVR_ATmega8515__) ||       \
  defined(__AVR_ATmega8535__) || defined(__AVR_ATmega16__)   ||         \
  defined(__AVR_ATmega162__)  || defined(__AVR_ATmega32__)   ||         \
  defined(__AVR_ATmega64__)   || defined(__AVR_ATmega128__)
  LED_PORT ^= _BV(LED);
    fc5e:	98 b3       	in	r25, 0x18	; 24
    fc60:	95 27       	eor	r25, r21
    fc62:	98 bb       	out	0x18, r25	; 24
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
    fc64:	a8 95       	wdr
     *  by the UART hardware, avrdude sends several attempts in rather
     *  quick succession, some of which will be lost and cause us to
     *  get out of sync.  So if we see any data; stop blinking.
     */
#ifndef LIN_UART
    if (UART_SRA & _BV(RXC0))
    fc66:	5f 99       	sbic	0x0b, 7	; 11
    fc68:	02 c0       	rjmp	.+4      	; 0xfc6e <main+0x6a>
    fc6a:	81 50       	subi	r24, 0x01	; 1
#else
// This doesn't seem to work?
//    if ((UART_PIN & (1<<UART_RX_BIT)) == 0)
//      break;  // detect start bit on soft uart too.
#endif
  } while (--count);
    fc6c:	91 f7       	brne	.-28     	; 0xfc52 <main+0x4e>

      /*
       * Copy data from the buffer into the flash write buffer.
       */
      do {
        __boot_page_fill_short((uint16_t)(void*)addrPtr, *(mybuff.wptr++));
    fc6e:	ff 24       	eor	r15, r15
    fc70:	f3 94       	inc	r15
      } while (len -= 2);

      /*
       * Actually Write the buffer to flash (and wait for it to finish.)
       */
      __boot_page_write_short(address.word);
    fc72:	55 e0       	ldi	r21, 0x05	; 5
    fc74:	e5 2e       	mov	r14, r21
      boot_spm_busy_wait();
#if defined(RWWSRE)
      // Reenable read access to flash
      __boot_rww_enable_short();
    fc76:	61 e1       	ldi	r22, 0x11	; 17
#endif

  /* Forever loop: exits by causing WDT reset */
  for (;;) {
    /* get character from UART */
    ch = getch();
    fc78:	d6 2e       	mov	r13, r22

    if (ch == STK_GET_PARAMETER) {
    fc7a:	af d0       	rcall	.+350    	; 0xfdda <getch>
      unsigned char which = getch();
    fc7c:	81 34       	cpi	r24, 0x41	; 65
    fc7e:	51 f4       	brne	.+20     	; 0xfc94 <main+0x90>
    fc80:	ac d0       	rcall	.+344    	; 0xfdda <getch>
      verifySpace();
    fc82:	c8 2f       	mov	r28, r24
    fc84:	b5 d0       	rcall	.+362    	; 0xfdf0 <verifySpace>
       * Send optiboot version as "SW version"
       * Note that the references to memory are optimized away.
       */
      if (which == STK_SW_MINOR) {
        putch(optiboot_version & 0xFF);
      } else if (which == STK_SW_MAJOR) {
    fc86:	c1 38       	cpi	r28, 0x81	; 129
      /*
       * Send optiboot version as "SW version"
       * Note that the references to memory are optimized away.
       */
      if (which == STK_SW_MINOR) {
        putch(optiboot_version & 0xFF);
    fc88:	11 f0       	breq	.+4      	; 0xfc8e <main+0x8a>
    fc8a:	83 e0       	ldi	r24, 0x03	; 3
      } else if (which == STK_SW_MAJOR) {
        putch(optiboot_version >> 8);
    fc8c:	01 c0       	rjmp	.+2      	; 0xfc90 <main+0x8c>
    fc8e:	88 e0       	ldi	r24, 0x08	; 8
    fc90:	a0 d0       	rcall	.+320    	; 0xfdd2 <putch>
    fc92:	9c c0       	rjmp	.+312    	; 0xfdcc <main+0x1c8>
         * other parameters - enough to keep Avrdude happy
         */
        putch(0x03);
      }
    }
    else if (ch == STK_SET_DEVICE) {
    fc94:	82 34       	cpi	r24, 0x42	; 66
      // SET DEVICE is ignored
      getNch(20);
    fc96:	11 f4       	brne	.+4      	; 0xfc9c <main+0x98>
    fc98:	84 e1       	ldi	r24, 0x14	; 20
    }
    else if (ch == STK_SET_DEVICE_EXT) {
    fc9a:	03 c0       	rjmp	.+6      	; 0xfca2 <main+0x9e>
      // SET DEVICE EXT is ignored
      getNch(5);
    fc9c:	85 34       	cpi	r24, 0x45	; 69
    fc9e:	19 f4       	brne	.+6      	; 0xfca6 <main+0xa2>
    fca0:	85 e0       	ldi	r24, 0x05	; 5
    }
    else if (ch == STK_LOAD_ADDRESS) {
    fca2:	ae d0       	rcall	.+348    	; 0xfe00 <getNch>
    fca4:	93 c0       	rjmp	.+294    	; 0xfdcc <main+0x1c8>
      // LOAD ADDRESS
      address.bytes[0] = getch();
    fca6:	85 35       	cpi	r24, 0x55	; 85
    fca8:	39 f4       	brne	.+14     	; 0xfcb8 <main+0xb4>
    fcaa:	97 d0       	rcall	.+302    	; 0xfdda <getch>
      address.bytes[1] = getch();
    fcac:	08 2f       	mov	r16, r24
    fcae:	95 d0       	rcall	.+298    	; 0xfdda <getch>
      }
      else {
        RAMPZ &= 0xFE;
      }
#endif
      address.word *= 2; // Convert from word address to byte address
    fcb0:	18 2f       	mov	r17, r24
    fcb2:	00 0f       	add	r16, r16
    fcb4:	11 1f       	adc	r17, r17
      verifySpace();
    }
    else if (ch == STK_UNIVERSAL) {
    fcb6:	89 c0       	rjmp	.+274    	; 0xfdca <main+0x1c6>
        getNch(3);
        putch(0x00);
      }
#else
      // UNIVERSAL command is ignored
      getNch(4);
    fcb8:	86 35       	cpi	r24, 0x56	; 86
    fcba:	21 f4       	brne	.+8      	; 0xfcc4 <main+0xc0>
    fcbc:	84 e0       	ldi	r24, 0x04	; 4
      putch(0x00);
    fcbe:	a0 d0       	rcall	.+320    	; 0xfe00 <getNch>
#endif
    }
    /* Write memory, length is big endian and is in bytes */
    else if (ch == STK_PROG_PAGE) {
    fcc0:	80 e0       	ldi	r24, 0x00	; 0
    fcc2:	e6 cf       	rjmp	.-52     	; 0xfc90 <main+0x8c>
      // PROGRAM PAGE - we support flash programming only, not EEPROM
      uint8_t desttype;
      uint8_t *bufPtr;
      pagelen_t savelength;

      GETLENGTH(length);
    fcc4:	84 36       	cpi	r24, 0x64	; 100
    fcc6:	09 f0       	breq	.+2      	; 0xfcca <main+0xc6>
    fcc8:	4e c0       	rjmp	.+156    	; 0xfd66 <main+0x162>
    fcca:	87 d0       	rcall	.+270    	; 0xfdda <getch>
    fccc:	c8 2f       	mov	r28, r24
    fcce:	d0 e0       	ldi	r29, 0x00	; 0
    fcd0:	dc 2f       	mov	r29, r28
    fcd2:	cc 27       	eor	r28, r28
      savelength = length;
      desttype = getch();
    fcd4:	82 d0       	rcall	.+260    	; 0xfdda <getch>
    fcd6:	c8 2b       	or	r28, r24
      // PROGRAM PAGE - we support flash programming only, not EEPROM
      uint8_t desttype;
      uint8_t *bufPtr;
      pagelen_t savelength;

      GETLENGTH(length);
    fcd8:	80 d0       	rcall	.+256    	; 0xfdda <getch>
      savelength = length;
      desttype = getch();
    fcda:	c8 2e       	mov	r12, r24
    fcdc:	5e 01       	movw	r10, r28
    fcde:	81 2c       	mov	r8, r1

      // read a page worth of contents
      bufPtr = buff.bptr;
      do *bufPtr++ = getch();
    fce0:	99 24       	eor	r9, r9
    fce2:	93 94       	inc	r9
    fce4:	7a d0       	rcall	.+244    	; 0xfdda <getch>
    fce6:	f4 01       	movw	r30, r8
    fce8:	81 93       	st	Z+, r24
      while (--length);
    fcea:	4f 01       	movw	r8, r30
    fcec:	f1 e0       	ldi	r31, 0x01	; 1
    fcee:	af 1a       	sub	r10, r31
    fcf0:	b1 08       	sbc	r11, r1

      // Read command terminator, start reply
      verifySpace();
    fcf2:	c1 f7       	brne	.-16     	; 0xfce4 <main+0xe0>
    fcf4:	7d d0       	rcall	.+250    	; 0xfdf0 <verifySpace>
 * void writebuffer(memtype, buffer, address, length)
 */
static inline void writebuffer(int8_t memtype, addr16_t mybuff,
                               addr16_t address, pagelen_t len)
{
  switch (memtype) {
    fcf6:	85 e4       	ldi	r24, 0x45	; 69
    fcf8:	c8 12       	cpse	r12, r24
    fcfa:	12 c0       	rjmp	.+36     	; 0xfd20 <main+0x11c>
    fcfc:	d3 95       	inc	r29
    fcfe:	48 01       	movw	r8, r16
    fd00:	a1 2c       	mov	r10, r1
    fd02:	bb 24       	eor	r11, r11
  case 'E': // EEPROM
#if SUPPORT_EEPROM || BIGBOOT
    while (len--) {
    fd04:	b3 94       	inc	r11
    fd06:	ac 16       	cp	r10, r28
    fd08:	bd 06       	cpc	r11, r29
    fd0a:	09 f4       	brne	.+2      	; 0xfd0e <main+0x10a>
      eeprom_write_byte((address.bptr++), *(mybuff.bptr++));
    fd0c:	5f c0       	rjmp	.+190    	; 0xfdcc <main+0x1c8>
    fd0e:	f5 01       	movw	r30, r10
    fd10:	61 91       	ld	r22, Z+
    fd12:	5f 01       	movw	r10, r30
    fd14:	c4 01       	movw	r24, r8
    fd16:	96 d0       	rcall	.+300    	; 0xfe44 <eeprom_write_byte>
    fd18:	ff ef       	ldi	r31, 0xFF	; 255
    fd1a:	8f 1a       	sub	r8, r31
    fd1c:	9f 0a       	sbc	r9, r31
    fd1e:	f3 cf       	rjmp	.-26     	; 0xfd06 <main+0x102>
       * and we needed the space back.
       */
#ifdef FOURPAGEERASE
      if ((address.bytes[0] & ((SPM_PAGESIZE<<2)-1))==0) {
#endif
        __boot_page_erase_short(address.word);
    fd20:	83 e0       	ldi	r24, 0x03	; 3
    fd22:	f8 01       	movw	r30, r16
    fd24:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__RAM__+0x68>
    fd28:	e8 95       	spm
        boot_spm_busy_wait();
    fd2a:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__RAM__+0x68>
    fd2e:	80 fd       	sbrc	r24, 0
    fd30:	fc cf       	rjmp	.-8      	; 0xfd2a <main+0x126>
    fd32:	a0 e0       	ldi	r26, 0x00	; 0
    fd34:	b1 e0       	ldi	r27, 0x01	; 1
    fd36:	f8 01       	movw	r30, r16

      /*
       * Copy data from the buffer into the flash write buffer.
       */
      do {
        __boot_page_fill_short((uint16_t)(void*)addrPtr, *(mybuff.wptr++));
    fd38:	8d 91       	ld	r24, X+
    fd3a:	9d 91       	ld	r25, X+
    fd3c:	0c 01       	movw	r0, r24
    fd3e:	f0 92 68 00 	sts	0x0068, r15	; 0x800068 <__RAM__+0x68>
    fd42:	e8 95       	spm
    fd44:	11 24       	eor	r1, r1
        addrPtr += 2;
      } while (len -= 2);
    fd46:	22 97       	sbiw	r28, 0x02	; 2
    fd48:	32 96       	adiw	r30, 0x02	; 2
    fd4a:	20 97       	sbiw	r28, 0x00	; 0

      /*
       * Actually Write the buffer to flash (and wait for it to finish.)
       */
      __boot_page_write_short(address.word);
    fd4c:	a9 f7       	brne	.-22     	; 0xfd38 <main+0x134>
    fd4e:	f8 01       	movw	r30, r16
    fd50:	e0 92 68 00 	sts	0x0068, r14	; 0x800068 <__RAM__+0x68>
      boot_spm_busy_wait();
    fd54:	e8 95       	spm
    fd56:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__RAM__+0x68>
#if defined(RWWSRE)
      // Reenable read access to flash
      __boot_rww_enable_short();
    fd5a:	80 fd       	sbrc	r24, 0
    fd5c:	fc cf       	rjmp	.-8      	; 0xfd56 <main+0x152>
      writebuffer(desttype, buff, address, savelength);


    }
/* Read memory block mode, length is big endian.  */
    else if (ch == STK_READ_PAGE) {
    fd5e:	d0 92 68 00 	sts	0x0068, r13	; 0x800068 <__RAM__+0x68>
      uint8_t desttype;
      GETLENGTH(length);
    fd62:	e8 95       	spm
    fd64:	33 c0       	rjmp	.+102    	; 0xfdcc <main+0x1c8>
    fd66:	84 37       	cpi	r24, 0x74	; 116
    fd68:	19 f5       	brne	.+70     	; 0xfdb0 <main+0x1ac>
    fd6a:	37 d0       	rcall	.+110    	; 0xfdda <getch>
    fd6c:	c8 2f       	mov	r28, r24
    fd6e:	d0 e0       	ldi	r29, 0x00	; 0
    fd70:	dc 2f       	mov	r29, r28

      desttype = getch();
    fd72:	cc 27       	eor	r28, r28
    fd74:	32 d0       	rcall	.+100    	; 0xfdda <getch>
    fd76:	5e 01       	movw	r10, r28

      verifySpace();
    fd78:	a8 2a       	or	r10, r24
    fd7a:	2f d0       	rcall	.+94     	; 0xfdda <getch>

static inline void read_mem(uint8_t memtype, addr16_t address, pagelen_t length)
{
  uint8_t ch;

  switch (memtype) {
    fd7c:	98 2e       	mov	r9, r24
    fd7e:	38 d0       	rcall	.+112    	; 0xfdf0 <verifySpace>
    fd80:	e8 01       	movw	r28, r16

#if SUPPORT_EEPROM || BIGBOOT
  case 'E': // EEPROM
    do {
      putch(eeprom_read_byte((address.bptr++)));
    fd82:	f5 e4       	ldi	r31, 0x45	; 69
    fd84:	9f 12       	cpse	r9, r31
    fd86:	0b c0       	rjmp	.+22     	; 0xfd9e <main+0x19a>
    fd88:	ce 01       	movw	r24, r28
    } while (--length);
    fd8a:	54 d0       	rcall	.+168    	; 0xfe34 <eeprom_read_byte>
    fd8c:	22 d0       	rcall	.+68     	; 0xfdd2 <putch>
    fd8e:	81 e0       	ldi	r24, 0x01	; 1
    fd90:	a8 1a       	sub	r10, r24
    fd92:	b1 08       	sbc	r11, r1
    fd94:	21 96       	adiw	r28, 0x01	; 1
    fd96:	a1 14       	cp	r10, r1
      //      while (--length);
      // read a Flash and increment the address (may increment RAMPZ)
      __asm__ ("  elpm %0,Z+\n" : "=r" (ch), "=z" (address.bptr): "1" (address));
#else
      // read a Flash byte and increment the address
      __asm__ ("  lpm %0,Z+\n" : "=r" (ch), "=z" (address.bptr): "1" (address));
    fd98:	b1 04       	cpc	r11, r1
    fd9a:	b1 f7       	brne	.-20     	; 0xfd88 <main+0x184>
#endif
      putch(ch);
    fd9c:	17 c0       	rjmp	.+46     	; 0xfdcc <main+0x1c8>
    fd9e:	fe 01       	movw	r30, r28
    } while (--length);
    fda0:	85 91       	lpm	r24, Z+
    fda2:	ef 01       	movw	r28, r30
    fda4:	16 d0       	rcall	.+44     	; 0xfdd2 <putch>
    fda6:	e1 e0       	ldi	r30, 0x01	; 1
    fda8:	ae 1a       	sub	r10, r30

      read_mem(desttype, address, length);
    }

/* Get device signature bytes  */
    else if (ch == STK_READ_SIGN) {
    fdaa:	b1 08       	sbc	r11, r1
    fdac:	c1 f7       	brne	.-16     	; 0xfd9e <main+0x19a>
      // READ SIGN - return what Avrdude wants to hear
      verifySpace();
    fdae:	0e c0       	rjmp	.+28     	; 0xfdcc <main+0x1c8>
    fdb0:	85 37       	cpi	r24, 0x75	; 117
      putch(SIGNATURE_0);
    fdb2:	39 f4       	brne	.+14     	; 0xfdc2 <main+0x1be>
    fdb4:	1d d0       	rcall	.+58     	; 0xfdf0 <verifySpace>
    fdb6:	8e e1       	ldi	r24, 0x1E	; 30
      putch(SIGNATURE_1);
    fdb8:	0c d0       	rcall	.+24     	; 0xfdd2 <putch>
    fdba:	86 e9       	ldi	r24, 0x96	; 150
    fdbc:	0a d0       	rcall	.+20     	; 0xfdd2 <putch>
      putch(SIGNATURE_2);
    fdbe:	82 e0       	ldi	r24, 0x02	; 2
    fdc0:	67 cf       	rjmp	.-306    	; 0xfc90 <main+0x8c>
    }
    else if (ch == STK_LEAVE_PROGMODE) { /* 'Q' */
    fdc2:	81 35       	cpi	r24, 0x51	; 81
    fdc4:	11 f4       	brne	.+4      	; 0xfdca <main+0x1c6>
      // Adaboot no-wait mod
      watchdogConfig(WATCHDOG_16MS);
    fdc6:	88 e0       	ldi	r24, 0x08	; 8
    fdc8:	0f d0       	rcall	.+30     	; 0xfde8 <watchdogConfig>
    fdca:	12 d0       	rcall	.+36     	; 0xfdf0 <verifySpace>
      verifySpace();
    }
    else {
      // This covers the response to commands like STK_ENTER_PROGMODE
      verifySpace();
    fdcc:	80 e1       	ldi	r24, 0x10	; 16
    fdce:	01 d0       	rcall	.+2      	; 0xfdd2 <putch>
    }
    putch(STK_OK);
    fdd0:	54 cf       	rjmp	.-344    	; 0xfc7a <main+0x76>

0000fdd2 <putch>:
    fdd2:	5d 9b       	sbis	0x0b, 5	; 11
    fdd4:	fe cf       	rjmp	.-4      	; 0xfdd2 <putch>
  }
    fdd6:	8c b9       	out	0x0c, r24	; 12
# else
  RS485_PORT &= ~_BV(RS485_BIT);
# endif
#else //not RS485
  while (!(UART_SRA & _BV(UDRE0))) {  /* Spin */ }
  UART_UDR = ch;
    fdd8:	08 95       	ret

0000fdda <getch>:
    :
    "r25"
    );
#else
#ifndef LIN_UART
  while (!(UART_SRA & _BV(RXC0)))  {  /* Spin */ }
    fdda:	5f 9b       	sbis	0x0b, 7	; 11
    fddc:	fe cf       	rjmp	.-4      	; 0xfdda <getch>
  if (!(UART_SRA & _BV(FE0))) {
    fdde:	5c 99       	sbic	0x0b, 4	; 11
    fde0:	01 c0       	rjmp	.+2      	; 0xfde4 <getch+0xa>
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
    fde2:	a8 95       	wdr
  while (!(LINSIR & _BV(LRXOK)))  {  /* Spin */ }
  if (!(LINSIR & _BV(LFERR))) {
    watchdogReset();  /* Eventually abort if wrong speed */
  }
#endif
  ch = UART_UDR;
    fde4:	8c b1       	in	r24, 0x0c	; 12
#if LED_DATA_FLASH
  toggle_led();
#endif

  return ch;
}
    fde6:	08 95       	ret

0000fde8 <watchdogConfig>:
}

void watchdogConfig(uint8_t x) {
#ifdef WDCE //does it have a Watchdog Change Enable?
#ifdef WDTCSR
  WDTCSR = _BV(WDCE) | _BV(WDE);
    fde8:	98 e1       	ldi	r25, 0x18	; 24
    fdea:	91 bd       	out	0x21, r25	; 33
#else //then it must be one of those newfangled ones that use CCP
  CCP=0xD8; //so write this magic number to CCP
#endif

#ifdef WDTCSR
  WDTCSR = x;
    fdec:	81 bd       	out	0x21, r24	; 33
    fdee:	08 95       	ret

0000fdf0 <verifySpace>:
  do getch(); while (--count);
  verifySpace();
}

void verifySpace() {
  if (getch() != CRC_EOP) {
    fdf0:	f4 df       	rcall	.-24     	; 0xfdda <getch>
    fdf2:	80 32       	cpi	r24, 0x20	; 32
    fdf4:	19 f0       	breq	.+6      	; 0xfdfc <verifySpace+0xc>
    watchdogConfig(WATCHDOG_16MS);    // shorten WD timeout
    fdf6:	88 e0       	ldi	r24, 0x08	; 8
    fdf8:	f7 df       	rcall	.-18     	; 0xfde8 <watchdogConfig>
    fdfa:	ff cf       	rjmp	.-2      	; 0xfdfa <verifySpace+0xa>
    while (1)                         // and busy-loop so that WD causes
      ;                               //  a reset and app start.
  }
  putch(STK_INSYNC);
    fdfc:	84 e1       	ldi	r24, 0x14	; 20
    fdfe:	e9 cf       	rjmp	.-46     	; 0xfdd2 <putch>

0000fe00 <getNch>:
    ::[count] "M" (UART_B_VALUE)
    );
}
#endif

void getNch(uint8_t count) {
    fe00:	cf 93       	push	r28
    fe02:	c8 2f       	mov	r28, r24
  do getch(); while (--count);
    fe04:	ea df       	rcall	.-44     	; 0xfdda <getch>
    fe06:	c1 50       	subi	r28, 0x01	; 1
    fe08:	e9 f7       	brne	.-6      	; 0xfe04 <getNch+0x4>
  verifySpace();
}
    fe0a:	cf 91       	pop	r28
}
#endif

void getNch(uint8_t count) {
  do getch(); while (--count);
  verifySpace();
    fe0c:	f1 cf       	rjmp	.-30     	; 0xfdf0 <verifySpace>

0000fe0e <do_spm>:
    fe0e:	fc 01       	movw	r30, r24
 *   data=0 in WRITE
 */
static void do_spm(uint16_t address, uint8_t command, uint16_t data)  __attribute__ ((used));
static void do_spm(uint16_t address, uint8_t command, uint16_t data) {
  // Do spm stuff
  asm volatile (
    fe10:	0a 01       	movw	r0, r20
    fe12:	60 93 68 00 	sts	0x0068, r22	; 0x800068 <__RAM__+0x68>
    fe16:	e8 95       	spm
    fe18:	11 24       	eor	r1, r1
    fe1a:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__RAM__+0x68>
    );

  // wait for spm to complete
  //   it doesn't have much sense for __BOOT_PAGE_FILL,
  //   but it doesn't hurt and saves some bytes on 'if'
  boot_spm_busy_wait();
    fe1e:	80 fd       	sbrc	r24, 0
    fe20:	fc cf       	rjmp	.-8      	; 0xfe1a <do_spm+0xc>
    fe22:	66 70       	andi	r22, 0x06	; 6
#if defined(RWWSRE)
  // this 'if' condition should be: (command == __BOOT_PAGE_WRITE || command == __BOOT_PAGE_ERASE)...
  // but it's tweaked a little assuming that in every command we are interested in here, there
  // must be also SELFPRGEN set. If we skip checking this bit, we save here 4B
  if ((command & (_BV(PGWRT)|_BV(PGERS))) && (data == 0) ) {
    fe24:	31 f0       	breq	.+12     	; 0xfe32 <do_spm+0x24>
    fe26:	45 2b       	or	r20, r21
    fe28:	21 f4       	brne	.+8      	; 0xfe32 <do_spm+0x24>
    fe2a:	81 e1       	ldi	r24, 0x11	; 17
    // Reenable read access to flash
    __boot_rww_enable_short();
    fe2c:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__RAM__+0x68>
    fe30:	e8 95       	spm
    fe32:	08 95       	ret

0000fe34 <eeprom_read_byte>:
    fe34:	e1 99       	sbic	0x1c, 1	; 28
    fe36:	fe cf       	rjmp	.-4      	; 0xfe34 <eeprom_read_byte>
    fe38:	9f bb       	out	0x1f, r25	; 31
    fe3a:	8e bb       	out	0x1e, r24	; 30
    fe3c:	e0 9a       	sbi	0x1c, 0	; 28
    fe3e:	99 27       	eor	r25, r25
    fe40:	8d b3       	in	r24, 0x1d	; 29
    fe42:	08 95       	ret

0000fe44 <eeprom_write_byte>:
    fe44:	26 2f       	mov	r18, r22

0000fe46 <eeprom_write_r18>:
    fe46:	e1 99       	sbic	0x1c, 1	; 28
    fe48:	fe cf       	rjmp	.-4      	; 0xfe46 <eeprom_write_r18>
    fe4a:	9f bb       	out	0x1f, r25	; 31
    fe4c:	8e bb       	out	0x1e, r24	; 30
    fe4e:	2d bb       	out	0x1d, r18	; 29
    fe50:	0f b6       	in	r0, 0x3f	; 63
    fe52:	f8 94       	cli
    fe54:	e2 9a       	sbi	0x1c, 2	; 28
    fe56:	e1 9a       	sbi	0x1c, 1	; 28
    fe58:	0f be       	out	0x3f, r0	; 63
    fe5a:	01 96       	adiw	r24, 0x01	; 1
    fe5c:	08 95       	ret

0000fe5e <f_delimit>:
    fe5e:	ff                                                  .

0000fe5f <f_version>:
    fe5f:	56 65 72 73 69 6f 6e 3d 38 2e 33 00                 Version=8.3.

0000fe6b <f_device>:
    fe6b:	44 65 76 69 63 65 3d 61 74 6d 65 67 61 36 34 00     Device=atmega64.

0000fe7b <fF_CPU>:
    fe7b:	46 5f 43 50 55 3d 31 36 30 30 30 30 30 30 4c 00     F_CPU=16000000L.

0000fe8b <fBIGBOOT>:
    fe8b:	42 49 47 42 4f 4f 54 3d 31 00                       BIGBOOT=1.

0000fe95 <f_date>:
    fe95:	42 75 69 6c 74 3a 4e 6f 76 20 31 39 20 32 30 32     Built:Nov 19 202
    fea5:	33 3a 30 34 3a 30 33 3a 30 32 00                    3:04:03:02.

0000feb0 <fUART>:
    feb0:	55 41 52 54 3d 30 00                                UART=0.

0000feb7 <fBAUD_RATE>:
    feb7:	42 41 55 44 5f 52 41 54 45 3d 31 31 35 32 30 30     BAUD_RATE=115200
	...

0000fec8 <f_LED>:
    fec8:	4c 45 44 3d 42 35 00                                LED=B5.

0000fecf <fLED_START_FLASHES>:
    fecf:	4c 45 44 5f 53 54 41 52 54 5f 46 4c 41 53 48 45     LED_START_FLASHE
    fedf:	53 3d 32 00                                         S=2.
